<tei>
	<teiHeader>
	<fileDesc xml:id="28"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Type-driven Defunctionalization <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Jeffrey M. Bell &amp; Fran~coise Bellegarde &amp; James Hook <lb/></docAuthor></byline>
		<byline><affiliation>Pacific Software Research Center <lb/> Oregon Graduate Institute of Science &amp; Technology <lb/></affiliation></byline>
		<address>PO Box 91000 <lb/>Portland, Oregon 97291-1000 <lb/>USA <lb/></address>
		<email>fbell,bellegar,hookg@cse.ogi.edu <lb/></email>
		<div type="abstract">Abstract <lb/>In 1972, Reynolds outlined a general method for eliminating functional arguments known as defunctionalization. The <lb/>idea underlying defunctionalization is encoding functional <lb/>values as first-order data, and then to realized the applications of the encoded function via an apply function. Although this process is simple enough, problems arise when <lb/>defunctionalization is used in a polymorphic language. In <lb/>such a language, a functional argument of a higher-order <lb/>function can take different type instances in different applications. As a consequence, its associated apply function can <lb/>be untypable in the soucre language. In the paper we present <lb/>a defunctionalization transformation which preserves typa-bility. Moreover, the transformation imposes no restriction <lb/>on functional arguments of recursive functions, and it handles functions as results as well as functions encapsulated in <lb/>constructors or tuples. The key to this success is the use <lb/>of type information in the defunctionalization transformation. Run-time characteristics are preserved by defunction-alization; hence, there is no performance improvement coming from the transformation itself. However closures need <lb/>not be implemented to compile the transformed program. <lb/>Since the defunctionalization is driven by type information, <lb/>it can also easily perform a specialization of higher-order <lb/>functions with respect to the values of their functional arguments, hence gaining a real run-time improvement of the <lb/>transformed program. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>