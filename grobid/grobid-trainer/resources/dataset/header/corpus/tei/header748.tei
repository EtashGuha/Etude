<tei>
	<teiHeader>
	<fileDesc xml:id="749"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Using Runtime Measured Workload Characteristics in <lb/>Parallel Processor Scheduling <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Thu D. Nguyen, Raj Vaswani, and John Zahorjan <lb/></docAuthor></byline>
		<byline><affiliation>Department of Computer Science and Engineering,</affiliation></byline>
		<address>Box 352350 <lb/></address>
		<byline><affiliation>University of Washington,</affiliation></byline>
		<address>Seattle, WA 98195-2350 USA <lb/></address>
		<div type="abstract">Abstract. We consider the use of runtime measured workload characteristics in <lb/> parallel processor scheduling. Although many researchers have considered the <lb/> use of application characteristics in this domain, most of this work has assumed <lb/> that such information is available a priori. In contrast, we propose and evaluate <lb/> experimentally dynamic processor allocation policies that rely on determining <lb/> job characteristics at runtime; in particular, we focus on measuring and using job <lb/> efficiency and speedup. <lb/> Our work is intended to be a first step towards the eventual development of production <lb/> schedulers that use runtime measuredworkload characteristics in making <lb/> their decisions. The experimental results we present validate the following observations: <lb/> � Despite the inherent inaccuracies of runtime measurements and the added <lb/> overhead of more frequent reallocations, schedulers that use runtime measurements <lb/> of workload characteristics can significantly outperform schedulers <lb/> that are oblivious to these characteristics. <lb/> � Runtime measurements are sufficient for schedulers to achieve performance <lb/> surprisingly close to that possible when a priori efficiency and speedup <lb/> information is available. <lb/> � The primary performance loss, relative to the use of a priori information, is <lb/> due to the transient decisions of the schedulers as they acquire information <lb/> on the running applications, rather than to measurement and reallocation <lb/> overheads. <lb/> We consider both interactive environments, in which a response time directed <lb/> scheduler is appropriate, and batch environments, in which maximizing useful <lb/> instruction throughput is the primary goal. Our experiments are performed using <lb/> prototype implementations running on a 50-node KSR-2 shared memory multiprocessor. <lb/></div>
		<div type="intro">1 Introduction <lb/></div>
		</front>
</text>
</tei>