<tei>
	<teiHeader>
	<fileDesc xml:id="275"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Proactive RSA <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Yair Frankel Peter Gemmell Philip D. MacKenzie Moti Yung x <lb/></docAuthor></byline>
		<date>August 4, 1996 <lb/></date>
		<div type="abstract">Abstract <lb/>The notion of &quot;proactive security&quot; of basic primitives and cryptosystems that are distributed <lb/>amongst various servers, was introduced in order to tolerate a very strong &quot;mobile adversary.&quot; This <lb/>adversary may corrupt all participants throughout the lifetime of the system in a non-monotonic <lb/>fashion (i.e. recoveries are possible) but the adversary is unable to corrupt too many participants <lb/>during any short time period [OstrovskyYung]. The notion assures increased security and availability <lb/>of the cryptographic primitive. <lb/>We present a proactive RSA system in which a threshold of servers applies the RSA signature <lb/>(or decryption) function in a distributed manner; RSA is perhaps the most important trapdoor <lb/>function in use. Employing new combinatorial and elementary number theoretic techniques, our <lb/>protocol enables the dynamic updating of the servers (which hold the RSA key distributively); <lb/>it is secure even when a linear number of the servers are corrupted during any time period (linear <lb/>redundancy); it efficiently &quot;self-maintains&quot; the security of the function and its messages (ciphertexts <lb/>or signatures); and it enables continuous availability, namely, correct function application using the <lb/>shared key is possible at any time. <lb/>We present an efficient way in which l servers can share an RSA private function so that, given <lb/>0 &amp;lt; &amp;lt; t &amp;lt; 1: <lb/>* Proactive (Dynamic) Robustness: A gateway G can combine information from any set of lt <lb/>(honest) servers to deduce the RSA signature for any authorized message at any period. <lb/>* Proactive Security (against mobile adversary): Our protocol is secure against a polynomial <lb/>time adversary who controls the gateway G and time-variant sets of up to minfl(1 t ); lg <lb/>servers, and can obtain the shares of up to l servers (including those that it corrupts). <lb/>* Uniform Boundedness: The share-size is always bounded by the size of an RSA private key <lb/>(i.e., logarithmically in N ). <lb/>We also present special practical instances based on designs; some of these instances were recently <lb/>implemented as part of a highly secure application testbed at Sandia National Laboratories. <lb/>A major technical difficulty in &quot;proactivizing&quot; RSA was the fact that the servers have to update <lb/>the &quot;distributed representation&quot; of an RSA key, while not learning the order of the group from <lb/>which keys are drawn (in order not to compromise the RSA security). <lb/></div>
		<byline><affiliation>Sandia National Labs,</affiliation></byline>
		<address>P.O Box 5800, Albuquerque, NM 87185-1110,</address>
		<email>yair@cs.sandia.gov <lb/></email>
		<byline><affiliation>Sandia National Labs,</affiliation></byline>
		<address>P.O Box 5800, Albuquerque, NM 87185-1110,</address>
		<email>psgemme@cs.sandia.gov <lb/></email>
		<byline><affiliation>Sandia National Labs,</affiliation></byline>
		<address>P.O Box 5800, Albuquerque, NM 87185-1110,</address>
		<email>philmac@cs.sandia.gov. <lb/></email>
		<byline><affiliation>x IBM T. J. Watson Research Center,</affiliation></byline>
		<address>Yorktown Heights, NY,</address>
		<email>moti@watson.ibm.com, </email> <email>moti@cs.columbia.edu <lb/></email>
		<pb/>
		</front>
</text>
</tei>