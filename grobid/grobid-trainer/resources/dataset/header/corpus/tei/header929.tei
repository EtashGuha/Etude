<tei>
	<teiHeader>
	<fileDesc xml:id="unknown"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">On the Relation Between Unity Properties <lb/>and Sequences of States <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>R.T. Udink <lb/></docAuthor></byline>
		<byline><affiliation>Utrecht University, Department of Computer Science, <lb/></affiliation></byline>
		<address>P.O. Box 80.089, 3508 TB Utrecht, the Netherlands <lb/></address>
		<byline><docAuthor>J.N. Kok <lb/></docAuthor></byline>
		<byline><affiliation>Utrecht University, Department of Computer Science, <lb/></affiliation></byline>
		<address>P.O. Box 80.089, 3508 TB Utrecht, the Netherlands <lb/></address>
		<div type="abstract">ABSTRACT Stepwise refinement of programs has proven to be a suitable <lb/>method for developing parallel and distributed programs. We examine and compare a <lb/>number of different notions of program refinement for Unity. Two of these notions are <lb/>based on execution sequences. Refinement corresponds to the reduction of the set of execution sequences, i.e. reducing the amount of nondeterminism. The other refinement <lb/>notions are based on Unity properties as introduced by Chandy and Misra. The Unity approach is to refine specifications. Although it has proven a suitable formalism for deriving <lb/>algorithms, it seems less suitable for handling implementation details. Following Sanders <lb/>and Singh, we formalize program refinement in the Unity framework as the preservation <lb/>of Unity properties. We show that Unity properties are not powerful enough to characterize execution sequences. As a consequence, the notion of property-preserving refinement <lb/>differs from the notion of reducing the set of execution sequences. <lb/></div>
		<keywords>Keywords Semantic models, Unity, program refinement. <lb/></keywords>
		<div type="intro">CONTENTS <lb/>0 Introduction</div>
		</front>
</text>
</tei>