<tei>
	<teiHeader>
	<fileDesc xml:id="347"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Comparing Data Forwarding and Prefetching <lb/>for Communication-Induced Misses in Shared-Memory MPs 1 <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>David Koufaty 2 and Josep Torrellas <lb/></docAuthor></byline>
		<byline><affiliation>Department of Computer Science <lb/>University of Illinois at Urbana-Champaign,</affiliation></byline>
		<address>IL 61801 <lb/></address>
		<email>dkoufaty@ichips.intel.com </email> <email>torrella@cs.uiuc.edu <lb/></email>
		<ptr type="web">http://iacoma.cs.uiuc.edu <lb/></ptr>
		<div type="abstract">Abstract <lb/>As the difference in speed between processor and memory system continues to increase, it is becoming crucial to develop <lb/>and refine techniques that enhance the effectiveness of cache <lb/>hierarchies. Two such techniques are data prefetching and <lb/>data forwarding. With prefetching, a processor hides the latency of cache misses by requesting the data before it actually <lb/>needs it. With forwarding, a producer processor hides the <lb/>latency of communication-induced cache misses in the consumer processors by sending the data to the caches of the <lb/>latter. These two techniques are complementary approaches <lb/>to hiding the latency of communication-induced misses. <lb/>This paper compares the effectiveness of data forwarding <lb/>and data prefetching to hide communication-induced misses. <lb/>Although both techniques require comparable hardware support, forwarding usually has a lower instruction overhead. We <lb/>evaluate prefetching and forwarding algorithms in a paralleliz-ing compiler using execution-driven simulations of a shared-memory multiprocessor. Both data forwarding and prefetch-ing reduce the execution time of applications significantly (30-40% on average). Forwarding performs better on average, <lb/>while prefetching is more robust to changes in cache and memory parameters. Finally, we propose two ways of integrating <lb/>the two techniques. The integration of the two techniques reduces the execution time even more (43-48% on average) and <lb/>is very robust. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>