<tei>
	<teiHeader>
	<fileDesc xml:id="66"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<note type="reference">From the Proceedings of the Second International Conference on Coordination Models <lb/>and Languages, LNCS 1282, Springer, Berlin, 1997 <lb/>46 <lb/></note>
		<docTitle>
			<titlePart type="main">Checking Assumptions in Component <lb/>Dynamics at the Architectural Level <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Paola Inverardi 1 , Alexander L. Wolf 2 , and Daniel Yankelevich 3 <lb/></docAuthor></byline>
		<byline><affiliation>1 Dipartimento di Matematica 2 Department of Computer Science <lb/> Universita di L&apos;Aquila University of Colorado <lb/></affiliation></byline>
		<address>I-67010 L&apos;Aquila, Italy Boulder, CO 80309 USA <lb/></address>
		<byline><affiliation>3 Departmento de Computacion <lb/> Universidad de Buenos Aires <lb/></affiliation></byline>
		<address>Buenos Aires, Argentina <lb/></address>
		<div type="abstract">Abstract. A critical challenge faced by the developer of a software system is to understand whether the system&apos;s components correctly integrate. While type theory has provided substantial help in detecting and <lb/>preventing errors in mismatched static properties, much work remains <lb/>in the area of dynamics. In particular, components make assumptions <lb/>about their behavioral interaction with other components, but currently <lb/>we have only limited ways in which to state those assumptions and to <lb/>analyze those assumptions for correctness. <lb/>We have begun to formulate a method that addresses this problem. The <lb/>method operates at the architectural level so that behavioral integration <lb/>errors, such as deadlock, can be revealed early in development. For each <lb/>component, a specification is given both of its own interaction behavior <lb/>and of the assumptions that it makes about the interaction behavior of <lb/>the external context in which it expects to operate. We have defined an <lb/>algorithm that, given such specifications for a set of components, performs &quot;adequacy&quot; checks between the component context assumptions <lb/>and the component interaction behaviors. A configuration of a system is <lb/>possible if and only if a successful way of &quot;matching&quot; actual behaviors <lb/>with assumptions can be found. In effect, we are extending the usual no <lb/>tion of type checking to include the checking of behavioral compatibility. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>