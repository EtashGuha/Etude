<tei>
	<teiHeader>
	<fileDesc xml:id="779"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Fast and Accurate Flow-Insensitive Points-To Analysis <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Marc Shapiro and Susan Horwitz <lb/></docAuthor></byline>
		<byline><affiliation>Computer Sciences Department, University of Wisconsin-Madison <lb/></affiliation></byline>
		<address>1210 West Dayton Street, Madison, WI 53706 USA <lb/></address>
		<email>Electronic mail: {mds, horwitz}@cs.wisc.edu <lb/></email>
		<div type="abstract">Abstract <lb/>In order to analyze a program that involves pointers, it <lb/>is necessary to have (safe) information about what each <lb/>pointer points to. There are many different approaches <lb/>to computing points-to information. This paper addresses techniques for flow- and context-insensitive in-terprocedural analysis of stack-based storage. <lb/>The paper makes two contributions to work in this <lb/>area: <lb/>* The first contribution is a set of experiments that <lb/>explore the trade-offs between techniques previously defined by Lars Andersen and Bjarne Steens-gaard. The former has a cubic worst-case running <lb/>time, while the latter is essentially linear. However, the former may be much more precise than <lb/>the latter. We have found that in practice, Ander-sen&apos;s algorithm is consistently more precise than <lb/>Steensgaard&apos;s. For small programs, there is very <lb/>little difference in the times required by the two <lb/>approaches; however, for larger programs, Ander-sen&apos;s algorithm can be much slower than Steens <lb/>gaard&apos;s. <lb/>* The second contribution is the definition of two <lb/>new algorithms. The first algorithm can be &quot;tuned&quot; <lb/>so that its worst-case time and space requirements, <lb/>as well as its accuracy range from those of Steens-gaard to those of Andersen. We have experimented <lb/>with several versions of this algorithm; one version <lb/>provided a significant increase in accuracy over <lb/>Steensgaard&apos;s algorithm, while keeping the running time within a factor of two. <lb/>The second algorithm uses the first as a subroutine. Its worst-case time and space requirements <lb/>are a factor of log N (where N is the number of <lb/>variables in the program) worse than those of <lb/>Steensgaard&apos;s algorithm. In practice, it appears to <lb/></div>
		<note type="grant">This work was supported in part by the National Science Foundation under grant CCR-8958530, and by the Defense Advanced Research Projects Agency under ARPA Order No. 8856 (monitored by <lb/>the Office of Naval Research under contract N00014-92-J-1937). <lb/></note>
		<div type="abstract">run about ten times slower than Steensgaard&apos;s algorithm; however it is significantly more accurate <lb/>than Steensgaard&apos;s algorithm, and significantly <lb/>faster than Andersen&apos;s algorithm on large <lb/>programs. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>