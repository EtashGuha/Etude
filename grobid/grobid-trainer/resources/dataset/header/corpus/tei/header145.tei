<tei>
	<teiHeader>
	<fileDesc xml:id="146"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<note type="reference">Appears in &quot;Proceedings of the First Symposium on Operating Systems Design and Implementation,&quot; Usenix Association, November 1994. <lb/></note>
		<docTitle>
			<titlePart type="main">Dynamic Page Mapping Policies for Cache Conflict Resolution on <lb/>Standard Hardware <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Theodore H. Romer <lb/>Dennis Lee <lb/>Brian N. Bershad <lb/></docAuthor></byline>
		<byline><affiliation>Department of Computer Science <lb/>and Engineering <lb/>University of Washington <lb/></affiliation></byline>
		<address>Seattle, WA 98195 <lb/></address>
		<email>{fromer,dlee,bershadg}@cs.washington.edu <lb/></email>
		<byline><docAuthor>J. Bradley Chen <lb/></docAuthor></byline>
		<byline><affiliation>Division of Applied Sciences <lb/></affiliation></byline>
		<address>29 Oxford Street <lb/></address>
		<byline><affiliation>Harvard University <lb/></affiliation></byline>
		<address>Cambridge MA 02138 <lb/></address>
		<email>bchen@das.harvard.edu <lb/></email>
		<div type="abstract">Abstract <lb/>In computer systems with large, physically-indexed, <lb/>direct-mapped caches, a poor mapping from virtual to <lb/>physical pages causes excessive cache conflict misses. <lb/>In a previous paper we proposed a simple hardware device, the Cache Miss Lookaside (CML) Buffer, which <lb/>identifies pages that are suffering from conflict misses. <lb/>The operating system can use this information to implement a dynamic page mapping policy that resolves <lb/>conflicts by performing an in-memory copy of one of <lb/>the conflicting pages, and updating the virtual to physical mappings. In this paper, we propose several dynamic page mapping policies that detect and resolve <lb/>cache conflicts using hardware available in existing systems, such as a TLB and cache miss counter, to locate <lb/>possible cache conflicts. We evaluate the simulated <lb/>performance of a variety of mapping policies, and show <lb/>that a dynamic page mapping policy using standard <lb/>hardware can improve upon the performance of a static <lb/>policy, but is not as effective as special-purpose hardware such as an associative cache or a CML buffer. <lb/>We also describe the implementation and performance <lb/>of a software-based dynamic policy on a DEC Alpha <lb/>workstation running DEC OSF/1. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>