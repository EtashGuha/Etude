<tei>
	<teiHeader>
	<fileDesc xml:id="816"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Reactive Modules * <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Rajeev Alur Thomas A. Henzinger <lb/></docAuthor></byline>
		<div type="abstract">Abstract. We present a formal model for concurrent systems. The model represents <lb/>synchronous and asynchronous components in a uniform framework that supports compositional (assume-guarantee) and hierarchical (stepwise-refinement) design and verification. While synchronous models are based on a notion of atomic computation step, <lb/>and asynchronous models remove that notion by introducing stuttering, our model is <lb/>based on a flexible notion of what constitutes a computation step: by applying an abstraction operator to a system, arbitrarily many consecutive steps can be collapsed into <lb/>a single step. The abstraction operator, which may turn an asynchronous system into a <lb/>synchronous one, allows us to describe systems at various levels of temporal detail. For <lb/>describing systems at various levels of spatial detail, we use a hiding operator that may <lb/>turn a synchronous system into an asynchronous one. We illustrate the model with diverse examples from synchronous circuits, asynchronous shared-memory programs, and <lb/>synchronous message-passing protocols. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>