<?xml version="1.0" ?>
<tei>
	<teiHeader>
		<fileDesc xml:id="55004647"/>
	</teiHeader>
	<text xml:lang="en">
		<front>
<lb/>
	<docTitle>
	<titlePart>HadoopDB: An Architectural Hybrid of MapReduce and<lb/> DBMS Technologies for Analytical Workloads<lb/></titlePart>
	</docTitle>

	<byline>
	<docAuthor>Azza Abouzeid<lb/> 1 , Kamil Bajda-Pawlikowski<lb/> 1 ,<lb/> Daniel Abadi<lb/> 1 , Avi Silberschatz<lb/> 1 , Alexander Rasin<lb/> 2<lb/></docAuthor>
	</byline>

	<byline>
	<affiliation>1 Yale University</affiliation>
	</byline>

	,<lb/>

	<byline>
	<affiliation>2 Brown University<lb/></affiliation>
	</byline>

	<email>{azza,kbajda,dna,avi}@cs.yale.edu; alexr@cs.brown.edu<lb/></email>

	<div type="abstract">ABSTRACT<lb/> The production environment for analytical data management ap-<lb/>plications is rapidly changing. Many enterprises are shifting away<lb/> from deploying their analytical databases on high-end proprietary<lb/> machines, and moving towards cheaper, lower-end, commodity<lb/> hardware, typically arranged in a shared-nothing MPP architecture,<lb/> often in a virtualized environment inside public or private &quot;clouds&quot;.<lb/> At the same time, the amount of data that needs to be analyzed is<lb/> exploding, requiring hundreds to thousands of machines to work in<lb/> parallel to perform the analysis.<lb/> There tend to be two schools of thought regarding what tech-<lb/>nology to use for data analysis in such an environment. Propo-<lb/>nents of parallel databases argue that the strong emphasis on per-<lb/>formance and efficiency of parallel databases makes them well-<lb/>suited to perform such analysis. On the other hand, others argue<lb/> that MapReduce-based systems are better suited due to their supe-<lb/>rior scalability, fault tolerance, and flexibility to handle unstructured<lb/> data. In this paper, we explore the feasibility of building a hybrid<lb/> system that takes the best features from both technologies; the pro-<lb/>totype we built approaches parallel databases in performance and<lb/> efficiency, yet still yields the scalability, fault tolerance, and flexi-<lb/>bility of MapReduce-based systems.<lb/></div>

		</front>
	</text>
</tei>
