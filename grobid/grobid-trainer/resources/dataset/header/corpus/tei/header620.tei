<tei>
	<teiHeader>
	<fileDesc xml:id="622"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Termination Analysis for Mercury <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Chris Speirs, Zoltan Somogyi and Harald Stndergaard <lb/></docAuthor></byline>
		<byline><affiliation>Department of Computer Science <lb/>The University of Melbourne <lb/></affiliation></byline>
		<address>Parkville, Victoria 3052, Australia <lb/></address>
		<div type="abstract">Abstract <lb/>Since the late eighties, much progress has been made in the theory of termination analysis for <lb/>logic programs. However, from a practical point of view, the significance of much of the work <lb/>on termination is hard to judge, since experimental evaluations rarely get published. Here we <lb/>describe and evaluate a termination analyzer for Mercury, a strongly typed and moded logic- <lb/>functional programming language. Mercury&apos;s high degree of referential transparency and the <lb/>guaranteed availability of reliable mode information simplify the termination analysis of Mer- <lb/>cury compared with that of other logic programming languages. We describe our termination <lb/>analyzer, which uses a variant of a method developed by Plumer. It deals with full Mercury, <lb/>including modules, declarative input/output, the foreign language interface, and higher-order <lb/>features. In spite of these obstacles, it produces high-quality termination information, comparable to the results recently obtained by Lindenstrauss and Sagiv. Most important, in stark <lb/>contrast with Lindenstrauss and Sagiv&apos;s experimental results, our analyzer has a negligible <lb/>impact on the running time of the compiler of which it is part, even for large programs. This <lb/>means that the Mercury compiler can produce valuable termination information at no real <lb/>cost to the programmer. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>