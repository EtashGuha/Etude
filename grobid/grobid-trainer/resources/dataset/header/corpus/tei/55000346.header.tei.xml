<?xml version="1.0" ?>
<tei>
	<teiHeader>
		<fileDesc xml:id="55000346"/>
	</teiHeader>
	<text xml:lang="en">
		<front>
<lb/>
	<docTitle>
	<titlePart>4.6 Multidimensional Arrays<lb/></titlePart>
	</docTitle>

	<div type="introduction">The 80x86 hardware can easily handle single dimension arrays. Unfortunately, there is no magic addressing<lb/> mode that lets you easily access elements of multidimensional arrays. That&apos;s going to take some work and lots of<lb/> instructions.<lb/> Before discussing how to declare or access multidimensional arrays, it would be a good idea to figure out how to<lb/> implement them in memory. The first problem is to figure out how to store a multi-dimensional object into a<lb/> one-dimensional memory space.<lb/> Consider for a moment a Pascal array of the form &quot;A:array[0..3,0..3] of char;&quot;. This array contains 16 bytes<lb/> organized as four rows of four characters. Somehow you&apos;ve got to draw a correspondence with each of the 16<lb/> bytes in this array and 16 contiguous bytes in main memory. Figure 4.2 shows one way to do this:<lb/> Figure 4.2 Mapping a 4x4 Array to Sequential Memory Locations<lb/> The actual mapping is not important as long as two things occur: (1) each element maps to a unique memory<lb/> location (that is, no two entries in the array occupy the same memory locations) and (2) the mapping is<lb/> consistent. That is, a given element in the array always maps to the same memory location. So what you really<lb/> need is a function with two input parameters (row and column) that produces an offset into a linear array of<lb/> sixteen memory locations.<lb/> Now any function that satisfies the above constraints will work fine. Indeed, you could randomly choose a<lb/> mapping as long as it was unique. However, what you really want is a mapping that is efficient to compute at run<lb/> time and works for any size array (not just 4x4 or even limited to two dimensions). While there are a large<lb/> number of possible functions that fit this bill, there are two functions in particular that most programmers and<lb/> most high level languages use: row major ordering and column major ordering.</div>

		</front>
	</text>
</tei>
