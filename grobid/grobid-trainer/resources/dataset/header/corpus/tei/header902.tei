<tei>
	<teiHeader>
	<fileDesc xml:id="unknown"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<note type="other">Formal Aspects of Computing (1998) 3: 1-000 <lb/>c 1998 BCS <lb/></note>
		<docTitle>
			<titlePart type="main">Protective Interface Specifications <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Gary T. Leavens 2 and Jeannette M. Wing 3 <lb/></docAuthor></byline>
		<byline><affiliation>1 Department of Computer Science, Iowa State University,</affiliation></byline>
		<address>Ames, IA 50011 USA <lb/></address>
		<byline><affiliation>2 Computer Science Department, Carnegie Mellon University,</affiliation></byline>
		<address>Pittsburgh, PA 15213 USA <lb/></address>
		<div type="abstract">Abstract. The interface specification of a procedure describes the procedure&apos;s <lb/>behavior using pre- and postconditions. These pre- and postconditions are written using various functions. If some of these functions are partial, or underspec-ified, then the procedure specification may not be well-defined. <lb/>We show how to write pre- and postcondition specifications that avoid such <lb/>problems, by having the precondition &quot;protect&quot; the postcondition from the effects <lb/>of partiality and underspecification. We formalize the notion of protection from <lb/>partiality in the context of specification languages like VDM-SL and COLD-K. <lb/>We also formalize the notion of protection from underspecification for the Larch <lb/>family of specification languages, and for Larch show how one can prove that a <lb/>procedure specification is protected from the effects of underspecification. <lb/></div>
		<div type="intro">1. The Problem</div>
		</front>
</text>
</tei>