<tei>
	<teiHeader>
	<fileDesc xml:id="unknown"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Optimizing ML with Run-Time Code Generation <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Mark Leone Peter Lee <lb/></docAuthor></byline>
		<date>December 1995 <lb/></date>
		<idno>CMU-CS-95-205 <lb/></idno>
		<byline><affiliation>School of Computer Science <lb/>Carnegie Mellon University <lb/></affiliation></byline>
		<address>Pittsburgh, PA 15213 <lb/></address>
		<div type="abstract">Abstract <lb/>We describe the design and implementation of a compiler that automatically translates ordinary <lb/>programs written in a subset of ML into code that generates native code at run time. Run-time <lb/>code generation can make use of values and invariants that cannot be exploited at compile time, <lb/>yielding code that is superior to statically optimal code. But the cost of optimizing and generating <lb/>code at run time can be prohibitive. We demonstrate how compile-time specialization can reduce <lb/>the cost of run-time code generation by an order of magnitude without greatly affecting code <lb/>quality. Several benchmark programs are examined, which exhibit an average cost of six cycles per <lb/>instruction generated at run time. <lb/></div>
		<note type="other">The authors&apos; electronic mail addresses are</note>
		<email>Mark.Leone@cs.cmu.edu and </email> <email>Peter.Lee@cs.cmu.edu. <lb/></email>
		<note type="grant">This research was sponsored in part by the Advanced Research Projects Agency CSTO under the title &quot;The Fox <lb/>Project: Advanced Langauges for Systems Software,&quot; ARPA Order No. C533, issued by ESC/ENS under Contract <lb/>No. F19628-95-C-0050. The views and conclusions contained in this document are those of the authors and should <lb/>not be interpreted as representing the official policies, either expressed or implied, of the Advanced Research Projects <lb/>Agency or the U.S. Government. <lb/></note>
		<pb/>
		</front>
</text>
</tei>