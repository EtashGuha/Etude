<tei>
	<teiHeader>
	<fileDesc xml:id="573"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Comparing Mostly-Copying and Mark-Sweep Conservative Collection * <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Frederick Smith <lb/></docAuthor></byline>
		<byline><affiliation>Cornell University <lb/></affiliation></byline>
		<email>fms@cs.cornell.edu <lb/></email>
		<byline><docAuthor>Greg Morrisett <lb/></docAuthor></byline>
		<byline><affiliation>Cornell University <lb/></affiliation></byline>
		<email>jgm@cs.cornell.edu <lb/></email>
		<div type="abstract">Abstract <lb/>Many high-level language compilers generate C code and <lb/>then invoke a C compiler for code generation. To date, most <lb/>of these compilers link the resulting code against a conservative mark-sweep garbage collector in order to reclaim unused <lb/>memory. We introduce a new collector, MCC, based on an <lb/>extension of mostly-copying collection. <lb/>We analyze the various design decisions made in MCC <lb/>and provide a performance comparison to the most widely <lb/>used conservative mark-sweep collector (the Boehm-Demers-Weiser collector). Our results show that a good mostly-copying collector can outperform a mature highly-optimized <lb/>mark-sweep collector when physical memory is large relative <lb/>to the live data. A surprising result of our analysis is that <lb/>cache behavior can have a greater impact on overall performance than either collector time, or allocation code. <lb/></div>
		<div type="intro">1 Overview</div>
		</front>
</text>
</tei>