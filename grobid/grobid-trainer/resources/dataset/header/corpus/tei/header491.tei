<tei>
	<teiHeader>
	<fileDesc xml:id="494"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Eraser: A Dynamic Data Race Detector for Multi-Threaded Programs <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Stefan Savage <lb/></docAuthor></byline>
		<byline><affiliation>Department of Computer Science and Engineering <lb/>University of Washington, Seattle <lb/></affiliation></byline>
		<byline><docAuthor>Michael Burrows Greg Nelson Patrick Sobalvarro <lb/></docAuthor></byline>
		<byline><affiliation>Digital Equipment Corporation <lb/>Systems Research Center <lb/></affiliation></byline>
		<byline><docAuthor>Thomas Anderson <lb/></docAuthor></byline>
		<byline><affiliation>Computer Science Division <lb/>University of California, Berkeley <lb/></affiliation></byline>
		<div type="abstract">Abstract <lb/>Multi-threaded programming is difficult and error prone. It <lb/>is easy to make a mistake in synchronization that produces a <lb/>data race, yet it can be extremely hard to locate this mistake <lb/>during debugging. This paper describes a new tool, called <lb/>Eraser, for dynamically detecting data races in lock-based <lb/>multi-threaded programs. Eraser uses binary rewriting techniques to monitor every shared memory reference and verify <lb/>that consistent locking behavior is observed. We present several case studies, including undergraduate coursework and a <lb/>multi-threaded Web search engine, that demonstrate the effectiveness of this approach. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>