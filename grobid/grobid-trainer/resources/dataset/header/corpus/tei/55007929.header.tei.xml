<?xml version="1.0" ?>
<tei>
	<teiHeader>
		<fileDesc xml:id="55007929"/>
	</teiHeader>
	<text xml:lang="en">
		<front>
<lb/>
	<docTitle>
	<titlePart>System call<lb/></titlePart>
	</docTitle>

	<note type="other">From Wikipedia, the free encyclopedia<lb/> This is an old revision of this page, as edited by Carradee (talk | contribs) at 22:06, 27 October<lb/> 2005. It may differ significantly from the current revision (http://en.wikipedia.org<lb/> /wiki/System_call) .<lb/> (diff) ← Previous revision | Latest revision (diff) | Newer revision → (diff)<lb/> </note>
	
	<div type="introduction">In computing, a system call, or software interrupt is the mechanism used by an application program to<lb/> request service from the operating system. System calls often use a special machine code instruction which<lb/> causes the processor to change mode (e.g. to &quot;supervisor mode&quot; or &quot;protected mode&quot;). This allows the OS to<lb/> perform restricted actions such as accessing hardware devices or the memory management unit.<lb/> Generally, operating systems provide a library that sits between normal programs and the rest of the<lb/> operating system, usually the C library (libc), such as Glibc, or the Windows API. This library handles the<lb/> low-level details of passing information to the kernel and switching to supervisor mode. Ideally, this reduces<lb/> the coupling between the operating system and the application.<lb/> When a system call is invoked by a program in the &quot;running&quot; state, the context of this program -values of<lb/> the CPU&apos;s processor registers -have to be stored into the program´s stack area in the main memory. After<lb/> that, the Instruction Pointer will point to a memory address that is the first executable instruction of the<lb/> system call code. At the end of the execution, the system call will return the previous value of the Instruction<lb/> Pointer from the stack area of the program to the CPU. If the system call performs any kind of I/O operation<lb/> (e.g. disk/ network access) the program will switch from the &quot;running&quot; state to the &quot;blocked&quot; state and will<lb/> wait until the hardware generates an interrupt request to return the I/O operation data and change the<lb/> program to the &quot;ready&quot; state.</div>

		</front>
	</text>
</tei>
