<tei>
	<teiHeader>
	<fileDesc xml:id="724"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Compilation of Constraint Systems to <lb/>Procedural Parallel Programs <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Ajita John and J. C. Browne <lb/></docAuthor></byline>
		<byline><affiliation>Dept. of Computer Sciences <lb/>University of Texas,</affiliation></byline>
		<address>Austin, TX 78712 <lb/></address>
		<email>{ajohn,browne}@cs.utexas.edu <lb/></email>
		<div type="abstract">Abstract. This paper describes the first results from research 1 on the <lb/>compilation of constraint systems into task level parallel programs in a <lb/>procedural language. This is the only research, of which we are aware, <lb/>which attempts to generate efficient parallel programs for numerical <lb/>computations from constraint systems. Computations are expressed as <lb/>constraint systems. A dependence graph is derived from the constraint <lb/>system and a set of input variables. The dependence graph, which exploits the parallelism in the constraints, is mapped to the target language CODE, which represents parallel computation structures as generalized dependence graphs. Finally, parallel C programs are generated. <lb/>The granularity of the derived dependence graphs depends upon the <lb/>complexity of the operations represented in the type system of the constraint specification language. To extract parallel programs of appropriate granularity, the following features have been included: (i) modularity, (ii) operations over structured types as primitives, (iii) definition <lb/>of sequential C functions. A prototype of the compiler has been implemented. The execution environment or software architecture is specified <lb/>separately from the constraint system. The domain of matrix computations has been targeted for applications. Some examples have been <lb/>programmed. Initial results are very encouraging. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>