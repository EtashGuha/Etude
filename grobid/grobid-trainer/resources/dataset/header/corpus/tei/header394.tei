<tei>
	<teiHeader>
	<fileDesc xml:id="397"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Compiler Technology for Portable Checkpoints <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Volker Strumpen * <lb/></docAuthor></byline>
		<byline><affiliation>Laboratory for Computer Science <lb/>Massachusetts Institute of Technology <lb/></affiliation></byline>
		<address>Cambridge, MA 02139 <lb/></address>
		<email>strumpen@theory.lcs.mit.edu <lb/></email>
		<div type="abstract">Abstract <lb/>We have implemented a prototype compiler called porch that transforms C programs into C programs supporting portable checkpoints. Portable checkpoints capture the state of a computation in <lb/>a machine-independent format that allows the transfer of computations across binary incompatible machines. We introduce source-to-source compilation techniques for generating code to save and <lb/>recover from such portable checkpoints automatically. These techniques instrument a program with code that maps the state of a computation into a machine-independent representation and vice versa. <lb/>In particular, the following problems are addressed: (1) providing <lb/>stack environment portability, (2) enabling conversion of complex <lb/>data types, and (3) rendering pointers portable. Experimental results show that the overhead of checkpointing is reasonably small, <lb/>even if data representation conversion is required for portability. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>