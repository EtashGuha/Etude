<tei>
	<teiHeader>
	<fileDesc xml:id="37"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<note type="reference">LISP AND SYMBOLIC COMPUTATION: An International Journal, 5, 191-221, 1992 <lb/></note>
		<note type="copyright">c 1992 Kluwer Academic Publishers Manufactured in The Netherlands <lb/></note>
		<docTitle>
			<titlePart type="main">Callee-save Registers in Continuation-passing Style <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>ANDREW W. APPEL</docAuthor></byline>
		<email>(appel@princeton.edu) <lb/></email>
		<byline><docAuthor>ZHONG SHAO</docAuthor></byline>
		<email>(zsh@princeton.edu) <lb/></email>
		<byline><affiliation>Department of Computer Science,  Princeton University,</affiliation></byline>
		<address>Princeton, NJ 08544-2087 <lb/></address>
		<keywords>Keywords: Register Allocation, Continuation-passing Style, Procedure Call <lb/></keywords>
		<div type="abstract">Abstract. Continuation-passing style (CPS) is a good abstract representation to use <lb/>for compilation and optimization: it has a clean semantics and is easily manipulated. <lb/>We examine how CPS expresses the saving and restoring of registers in source-language <lb/>procedure calls. In most CPS-based compilers, the context of the calling procedure is <lb/>saved in a &quot;continuation closure&quot;|a single variable that is passed as an argument to the <lb/>function being called. This closure is a record containing bindings of all the free variables <lb/>of the continuation; that is, registers that hold values needed by the caller &quot;after the call&quot; <lb/>are written to memory in the closure, and fetched back after the call. <lb/>Consider the procedure-call mechanisms used by conventional compilers. In particular, <lb/>registers holding values needed after the call must be saved and later restored. The <lb/>responsibility for saving registers can lie with the caller (a &quot;caller-saves&quot; convention) <lb/>or with the called function (&quot;callee-saves&quot;). In practice, to optimize memory traffic, <lb/>compilers find it useful to have some caller-saves registers and some callee-saves. <lb/>&quot;Conventional&quot; CPS-based compilers that pass a pointer to a record containing all <lb/>the variables needed after the call (i.e., the continuation closure), are using a caller-saves <lb/>convention. We explain how to express callee-save registers in Continuation-Passing <lb/>Style, and give measurements showing the resulting improvement in execution time. <lb/></div>
		<div type="intro">1. Introduction</div>
		</front>
</text>
</tei>