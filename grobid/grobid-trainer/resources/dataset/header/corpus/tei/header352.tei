<tei>
	<teiHeader>
	<fileDesc xml:id="357"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<note type="other">Survey Paper <lb/></note>
		<docTitle>
			<titlePart type="main">Update-in-place Analysis for Sets <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Chung Yung <lb/></docAuthor></byline>
		<byline><affiliation>Computer Science Department <lb/>Courant Institute of Mathematical Sciences <lb/>New York University <lb/></affiliation></byline>
		<email>yung@cs.nyu.edu <lb/></email>
		<date>December 15, 1997 <lb/></date>
		<div type="abstract">Abstract <lb/>This survey paper describes the current approaches on the update-in-place analysis <lb/>for sets. Pure functional languages do not allow mutations, destructive updates, or selective updates so that straightforward implementations of functional language compilers <lb/>may induce large amounts of copying to preserve program semantics. The unnecessary <lb/>copying of data can increase both the execution time and the memory requirements of <lb/>an application. Introducing sets to functional languages as a primitive data constructor posts a new problem of update-in-place analysis in functional languages. Moreover, most of the compiler optimization techniques depend on the side-effects and the <lb/>update-in-place analysis serves as the premise of applying such optimization techniques. <lb/>Among other compiler optimization techniques, finite differencing captures common yet <lb/>distinctive program constructions of costly repeated calculations and transforms them <lb/>into more efficient incremental program constructions. This dissertation is an attempt <lb/>to explore the update-in-place analysis for sets in functional languages in order to apply finite differencing to compiling pure functional languages. In this survey paper, <lb/>we will describe the approaches of update-in-place analysis and the finite differencing <lb/>techniques. <lb/></div>
		<div type="intro">1 Motivation and Introduction</div>
		</front>
</text>
</tei>