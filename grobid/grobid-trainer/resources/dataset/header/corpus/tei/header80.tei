<tei>
	<teiHeader>
	<fileDesc xml:id="81"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Asymptotically Tight Bounds for Performing <lb/>BMMC Permutations on Parallel Disk Systems <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Thomas H. Cormen <lb/>Thomas Sundquist <lb/>Leonard F. Wisniewski <lb/></docAuthor></byline>
		<byline><affiliation>Department of Mathematics and Computer Science <lb/> Dartmouth College <lb/></affiliation></byline>
		<div type="abstract">Abstract <lb/>We give asymptotically equal lower and upper bounds for the number of parallel I/O operations required to perform bit-matrix-multiply/complement (BMMC) permutations on parallel <lb/>disk systems. In a BMMC permutation on N records, where N is a power of 2, each (lg N )-bit <lb/>source address x maps to a corresponding (lg N)-bit target address by the matrix equation <lb/>= A x c, where matrix multiplication is performed over GF (2). The characteristic matrix A <lb/>is (lg N )fi(lg N ) and nonsingular over GF (2). Under the Vitter-Shriver parallel-disk model with <lb/>N records, D disks, B records per block, and M records of memory, we show a universal lower <lb/>bound of <lb/>BD <lb/>1 + rank <lb/>lg(M=B) <lb/>parallel I/Os for performing a BMMC permutation, where <lb/>is the lower left lg(N=B) fi lg B submatrix of the characteristic matrix. We also present an algo <lb/>rithm that uses at most 2N <lb/>BD <lb/>rank <lb/>lg(M=B) <lb/>+ 2 <lb/>parallel I/Os, which asymptotically matches the <lb/>lower bound and improves upon the BMMC and bit-permute/complement (BPC) algorithms in <lb/>[4]. When rank is low, this method is an improvement over the general-permutation bound of <lb/>fi <lb/>N <lb/>lg(N=B) <lb/>We introduce a new subclass of BMMC permutations, called memoryload-dispersal (MLD) <lb/>permutations, which can be performed in one pass. This subclass, which is used in the BMMC <lb/>algorithm, extends the catalog of one-pass permutations appearing in [4]. <lb/>Although many BMMC permutations of practical interest fall into subclasses that might be <lb/>explicitly invoked within the source code, we show how to detect in at most N=BD+ <lb/>l <lb/>D <lb/>parallel I/Os whether a given vector of target addresses specifies a BMMC permutation. Thus, <lb/>one can determine efficiently at run time whether a permutation to be performed is BMMC and <lb/>then avoid the general-permutation algorithm and save parallel I/Os by using our algorithm. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>