<tei>
	<teiHeader>
	<fileDesc xml:id="771"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Program Generalization for Software Reuse: <lb/>From C to C++ <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Michael Siff and Thomas Reps <lb/></docAuthor></byline>
		<byline><affiliation>University of Wisconsin-Madison <lb/></affiliation></byline>
		<address>1210 West Dayton Street <lb/>Madison, WI 53706 <lb/></address>
		<email>{siff, reps}@cs.wisc.edu <lb/></email>
		<div type="abstract">Abstract <lb/>We consider the problem of software generalization: Given a program component C, create <lb/>a parameterized program component C 0 such that C 0 is usable in a wider variety of syntactic <lb/>contexts than C. Furthermore, C 0 should be a semantically meaningful generalization of C; <lb/>namely, there must exist an instantiation of C 0 that is equivalent in functionality to C. <lb/>In this paper, we present an algorithm that generalizes C functions via type inference. The <lb/>original functions operate on specific data types; the result of generalization is a collection of <lb/>C++ function templates that operate on parameterized types. This version of the generalization <lb/>problem is useful in the context of converting existing C programs to C++. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>