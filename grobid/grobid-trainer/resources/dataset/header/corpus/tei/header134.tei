<tei>
	<teiHeader>
	<fileDesc xml:id="135"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Secure Group Communications Using Key Graphs <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Chung Kei Wong Mohamed Gouda Simon S. Lam <lb/></docAuthor></byline>
		<byline><affiliation>Department of Computer Sciences <lb/>University of Texas at Austin <lb/></affiliation></byline>
		<address>Austin, TX 78712-1188 <lb/></address>
		<email>{fckwong,gouda,lam}@cs.utexas.edu <lb/></email>
		<div type="abstract">Abstract <lb/>Many emerging applications (e.g., teleconference, real-time <lb/>information services, pay per view, distributed interactive <lb/>simulation, and collaborative work) are based upon a group <lb/>communications model, i.e., they require packet delivery <lb/>from one or more authorized senders to a very large number <lb/>of authorized receivers. As a result, securing group communications (i.e., providing confidentiality, integrity, and authenticity of messages delivered between group members) <lb/>will become a critical networking issue. <lb/>In this paper, we present a novel solution to the scalability problem of group/multicast key management. We <lb/>formalize the notion of a secure group as a triple (U; K; R) <lb/>where U denotes a set of users, K a set of keys held by the <lb/>users, and R a user-key relation. We then introduce key <lb/>graphs to specify secure groups. For a special class of key <lb/>graphs, we present three strategies for securely distributing rekey messages after a join/leave, and specify protocols <lb/>for joining and leaving a secure group. The rekeying strategies and join/leave protocols are implemented in a prototype <lb/>group key server we have built. We present measurement <lb/>results from experiments and discuss performance comparisons. We show that our group key management service, using any of the three rekeying strategies, is scalable to large <lb/>groups with frequent joins and leaves. In particular, the <lb/>average measured processing time per join/leave increases <lb/>linearly with the logarithm of group size. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>