<tei>
	<teiHeader>
	<fileDesc xml:id="unknown"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Improving Programming-by-Demonstration With Better Semantic Expression <lb/></titlePart>
		</docTitle>
		<note type="degree">Thesis Proposal <lb/></note>
		<byline><docAuthor>Richard McDaniel <lb/></docAuthor></byline>
		<date>November 14, 1995 <lb/></date>
		<div type="abstract">Abstract <lb/>The domain of applications that can be created with programming-by-demonstration <lb/>(PBD) can be extended by improving the developers ability to communicate with the system. The <lb/>techniques provided in this thesis will allow nonprogrammers to create a new variety of complete, <lb/>interactive applications including many board games and educational software using PBD. <lb/>A PBD software tool uses inferencing to induce programs by watching the developer demonstrate examples that show how the application should behave. Current systems reduce their scope <lb/>or resort to having the developer program because they do not provide sufficient ways to express <lb/>behaviors and the factors that affect them. Therefore, the goal of this thesis is to develop understandable forms of annotated expression and manipulation that help a system infer a broader range <lb/>of behavior. To test these ideas, this proposal introduces a new system called Gamut that will <lb/>present the techniques in a unified software tool. <lb/>The first technique replaces the macro recorder method for demonstrating behavior used <lb/>in other PBD systems with a technique called nudges. The developer demonstrates by correcting <lb/>the system at important points during program execution and also using two nudge commands to <lb/>communicate important situations. First, the Do Something! nudge causes the system to reconsider <lb/>past learned behavior and try to generalize its knowledge to fit the current situation. Using the <lb/>Stop That! nudge will point out improper behavior and generate negative examples. <lb/>Second, Gamut will use a new deck-of-playing-cards metaphor to express concepts such <lb/>as randomness, sequencing, and data storage. By constructing an appropriate deck, shufing, sorting, and playing cards at key moments, developers can incorporate many effects not available without programming in other systems. <lb/>Third, Gamut will improve communication about behaviors by making them more manipulable than in previous systems. Behaviors will be represented as small icons near the objects they <lb/>affect. Using the familiar cut, copy, and paste commands, the developer can transfer behavior <lb/>between objects. Determining how to make a behavior operate in the new context will be inferred <lb/>automatically. An objects state from the recent past will be represented as temporal ghosts in <lb/>which objects become dimmed, translucent images. Many sorts of behavior refer to prior states <lb/>such as a previous position or an old property value. The ghost objects will allow the developer to <lb/>make explicit connections. <lb/>Finally, to reduce the number of options the system must explore, the developer will be <lb/>able to give hints by highlighting important objects and properties. A new inferencing algorithm <lb/>will be created that will take advantage of the hints. <lb/>By combining these techniques, Gamut will provide a rich medium for expressing developer intentions, fostering greater communication between the PBD system and the developer and <lb/>enabling the developer to create highly interactive software with minimal programming expertise. <lb/></div>
		<pb/>
		</front>
</text>
</tei>