<tei>
	<teiHeader>
	<fileDesc xml:id="788"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Measuring the Performance of Communication <lb/>Middleware on High-Speed Networks <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Aniruddha Gokhale and Douglas C. Schmidt <lb/></docAuthor></byline>
		<email>gokhale@cs.wustl.edu and </email> <email>schmidt@cs.wustl.edu <lb/></email>
		<byline><affiliation>Department of Computer Science, Washington University <lb/></affiliation></byline>
		<address>St. Louis, MO 63130, USA <lb/></address>
		<note type="other">An earlier version of this paper appeared in the </note>
		<note type="reference">Proceedings <lb/>of the SIGCOMM Conference, 1996, Stanford University, <lb/>August, 1996. <lb/></note>
		<div type="abstract">Abstract <lb/>Conventional implementations of communication middle-ware (such as CORBA and traditional RPC toolkits) incur <lb/>considerable overhead when used for performance-sensitive <lb/>applications over high-speed networks. As gigabit networks <lb/>become pervasive, inefficient middleware will force programmers to use lower-level mechanisms to achieve the necessary <lb/>transfer rates. This is a serious problem for mission/life-critical applications (such as satellite surveillance and medical imaging). <lb/>This paper compares the performance of several widely <lb/>used communication middleware mechanisms on a high-speed ATM network. The middleware ranged from lower-level mechanisms (such as socket-based C interfaces and <lb/>C++ wrappers for sockets) to higher-level mechanisms (such <lb/>as RPC, hand-optimized RPC and two implementations of <lb/>CORBA - Orbix 2.0.1 and ORBeline 2.0). These measurements reveal that the lower-level C and C++ implementations outperform the CORBA implementations significantly <lb/>(the best CORBA throughput for remote transfer was roughly <lb/>75 to 80 percent of the best C/C++ throughput for sending scalar data types and only around 33 percent for sending structs containing binary fields), and the hand-optimized <lb/>RPC code performs slightly better than the CORBA implementations. Our goal in precisely pinpointing the sources of <lb/>overhead for communication middleware is to develop scalable and flexible CORBA implementations that can deliver <lb/>gigabit data rates to applications. <lb/></div>
		<keywords>Keywords: Communication middleware, distributed object computing, CORBA, high-speed networks. <lb/></keywords>
		<div type="intro">1 Introduction and Motivation</div>
		</front>
</text>
</tei>