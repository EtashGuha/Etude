<tei>
	<teiHeader>
	<fileDesc xml:id="181"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Defining the Java Virtual Machine as Platform <lb/>for Provably Correct Java Compilation ? <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Egon Borger 1 and Wolfram Schulte 2 <lb/></docAuthor></byline>
		<byline><affiliation>1 Universita di Pisa, Dipartimento di Informatica,</affiliation></byline>
		<address>I-56125 Pisa, Italy <lb/></address>
		<email>boerger@di.unipi.it <lb/></email>
		<byline><affiliation>2 Universitat Ulm, Fakultat fur Informatik,</affiliation></byline>
		<address>D-89069 Ulm, Germany <lb/></address>
		<email>wolfram@informatik.uni-ulm.de <lb/></email>
		<div type="abstract">Abstract. We provide concise abstract code for running the Java Virtual Machine (JVM) to execute compiled Java programs, and define a <lb/>general compilation scheme of Java programs to JVM code. These definitions, together with the definition of an abstract interpreter of Java <lb/>programs given in our previous work [3], allow us to prove that any <lb/>compiler that satisfies the conditions stated in this paper compiles Java <lb/>code correctly. In addition we have validated our JVM and compiler <lb/>specification through experimentation. <lb/>The modularity of our definitions for Java, the JVM and the compilation <lb/>scheme exhibit orthogonal language, machine and compiler components, <lb/>which fit together and provide the basis for a stepwise and provably correct design-for-reuse. As a by-product we provide a challenging realistic <lb/>case study for mechanical verification of a compiler correctness proof. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>