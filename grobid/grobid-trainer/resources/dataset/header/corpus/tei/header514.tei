<tei>
	<teiHeader>
	<fileDesc xml:id="517"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">A Middleware Service for Real-Time Push-Pull <lb/>Communications <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Kanaka Juvva and Raj Rajkumar <lb/></docAuthor></byline>
		<byline><affiliation>Real-Time and Multimedia Laboratory <lb/>Carnegie Mellon University <lb/></affiliation></byline>
		<address>Pittsburgh PA 15213 <lb/></address>
		<email>{kjuvva, raj+}@cs.cmu.edu <lb/></email>
		<div type="abstract">Abstract: <lb/>Current and emerging real-time and multimedia applications like multi-party collaboration, internet telephony and <lb/>distributed command control systems require the exchange of information over distributed and heterogeneous nodes. <lb/>Multiple data types including voice, video, sensor data, real-time intelligence data and text are being transported <lb/>widely across today&apos;s information, control and surveillance networks. All such applications can benefit enormously <lb/>from middleware, operating system and networking services that can support QoS guarantees, high availability, <lb/>dynamic reconfigurability and scalability. <lb/>In this paper, we propose a middleware layer called a &quot;Real-Time Push-Pull Communications Service&quot; to easily and quickly disseminate information across heterogeneous nodes with an underlying architecture to satisfy the <lb/>above-mentioned requirements. Push-Pull Communications is an extension of the real-time publisher/subscriber <lb/>model [4], and represents both &quot;push&quot; (data transfer initiated by a sender) and &quot;pull&quot; (data transfer initiated by a <lb/>receiver) communications. Nodes with widely differing processing power and networking bandwidth can coordinate <lb/>and co-exist by the provision of appropriate and automatic support for transformation on data and supports scaling. <lb/>Different information sources and sinks can operate at different frequencies and also can choose another (intermedi-ate) node to act as their proxy and and deliver data at the desired frequency. This service has been implemented <lb/>on RT-Mach, a resource-centric kernel using resource kernel primitives [7]. This paper presents an overview of the <lb/>design, implementation and preliminary performance evaluation of the model. <lb/></div>
		<keywords>Keywords: Push communications, Pull communications, Proxy, Scaling, Middleware service, QoS <lb/></keywords>
		<pb/>
		</front>
</text>
</tei>