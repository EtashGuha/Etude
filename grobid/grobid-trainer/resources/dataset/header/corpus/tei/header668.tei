<tei>
	<teiHeader>
	<fileDesc xml:id="670"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Support for Implementation of Evolutionary <lb/>Concurrent Systems in Concurrent <lb/>Programming Languages <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Raju Pandey 1 and J. C. Browne 2 <lb/></docAuthor></byline>
		<byline><affiliation>1 Computer Science Department, University of California,</affiliation></byline>
		<address>Davis, CA 95616</address>
		<byline><affiliation>2 Department of Computer Sciences, The University of Texas,</affiliation></byline>
		<address>Austin, TX 78712 <lb/></address>
		<div type="abstract">Abstract. In many concurrent programming languages, concurrent programs are difficult to extend and modify: small changes in a concurrent <lb/>program may require re-implementations of a large number of its components. In this paper a novel concurrent program composition mechanism <lb/>is presented in which implementations of computations and synchronizations are completely separated. Separation of implementations facilitates <lb/>extensions and modifications of programs by allowing one to change implementations of both computations and synchronizations. The paper <lb/>also describes a concurrent programming model and a programming lan <lb/>guage that support the proposed approach. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>