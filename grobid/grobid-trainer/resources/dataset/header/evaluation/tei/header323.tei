<tei>
	<teiHeader>
	<fileDesc xml:id="328"/>
	</teiHeader>
<text xml:lang="en">
		<front>
		<docTitle>
			<titlePart type="main">Optimizing ML with Run-Time Code Generation <lb/></titlePart>
		</docTitle>
		<byline><docAuthor>Peter Lee Mark Leone <lb/></docAuthor></byline>
		<byline><affiliation>School of Computer Science <lb/>Carnegie Mellon University <lb/></affiliation></byline>
		<address>Pittsburgh, Pennsylvania 15213-3891 <lb/></address>
		<email>petel@cs.cmu.edu </email> <email>mleone@cs.cmu.edu <lb/></email>
		<div type="abstract">Abstract <lb/>We describe the design and implementation of a compiler <lb/>that automatically translates ordinary programs written in <lb/>a subset of ML into code that generates native code at run <lb/>time. Run-time code generation can make use of values and <lb/>invariants that cannot be exploited at compile time, yielding <lb/>code that is often superior to statically optimal code. But <lb/>the cost of optimizing and generating code at run time can <lb/>be prohibitive. We demonstrate how compile-time specialization can reduce the cost of run-time code generation by <lb/>an order of magnitude without greatly affecting code quality. <lb/>Several benchmark programs are examined, which exhibit an <lb/>average cost of only six cycles per instruction generated at <lb/>run time. <lb/></div>
		<div type="intro">1 Introduction</div>
		</front>
</text>
</tei>