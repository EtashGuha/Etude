declare namespace tnt = "http://tntbase.org/ns";



declare default element namespace "http://maven.apache.org/POM/4.0.0";

declare option saxon:output "omit-xml-declaration=yes";
declare variable $NEW_LINE := "&#x0A;";
declare variable $NEW_LINE_1 := "&#x0A;   ";
declare variable $NEW_LINE_2 := "&#x0A;       ";
declare variable $NEW_LINE_3 := "&#x0A;          ";

declare variable $docpath external;
(:declare variable $docpath := '../grobid-core/pom.xml';:)
declare variable $url external;
declare variable $user external;
declare variable $password external;

declare variable $doc := doc($docpath);
declare variable $pr := $doc/project;
declare variable $pr-version := if (not(empty($pr/version))) then 
        $pr/version
    else if (not(empty($pr/parent/version))) then
        $pr/parent/version
    else
        ();


declare function tnt:header() as xs:string* {
  tnt:merge-strings(
  (
    "// GENERATED by pom2gradle.xq ",
    "// don't edit this file manually",
    "// author: Vyacheslav Zholudev",
    $NEW_LINE,
    "apply plugin: 'java'",
    "apply plugin: 'idea'",
    "apply plugin: 'maven'",    
    $NEW_LINE,
    "sourceCompatibility = 1.6",
    "targetCompatibility = 1.6"    
  )
  )
};

declare function tnt:repos() as xs:string* {
    let $reps := $pr/repositories/repository/url/data(.)
    return (
        "repositories {",
        "  mavenCentral()",
        for $i in $reps return
            concat("  mavenRepo(urls: ", tnt:e($i), ")")
        ,
        "}"
    
    )
   
};

declare function tnt:appendix() as xs:string* {
    tnt:merge-strings(
     (
        "// idea stuff", 
        "ideaProject { ", 
        "  javaVersion = '1.6'",
        "}"
     )
    )
};

declare function tnt:project-id() as xs:string* {
    let $artifactId := 
    if (not(empty($pr/artifactId))) then
        concat("archiveBaseName = ", tnt:e($pr/artifactId))
    else ()
    
    let $version := if (not(empty($pr-version))) then concat("version = ", tnt:e($pr-version)) else ()
    return
        ($artifactId, $version)
};

declare function tnt:merge-strings($strings as xs:string*) as xs:string {
  string-join($strings, $NEW_LINE)
};

(:tnt:merge-strings(tnt:header()):)

declare function tnt:e($string as xs:string) as xs:string {
  concat("'", $string, "'")
};

declare function tnt:preprocess-path($s as xs:string) as xs:string {
    replace($s, "\$\{project.basedir\}/", "")
};

declare function tnt:preprocess-version($s as xs:string) as xs:string {
    replace($s, "\$\{project.version\}", $pr-version)
};

declare function tnt:dependencies() as xs:string* {
  let $deps := $doc/project/dependencies
  let $file_deps := concat("   compile files(", 
    string-join(
    for $i in $deps/dependency[scope eq "system"] return
        tnt:e(tnt:preprocess-path($i/systemPath))
        , ", "),
     ")" )
  
   
  let $remote_deps :=  
    for $i in $deps/dependency[not(scope eq "system")] return
       concat("   compile group: ", tnt:e($i/groupId), 
       ", name: ", tnt:e($i/artifactId), 
       ", version: ", tnt:e(tnt:preprocess-version($i/version)))
   
   return ($file_deps, $remote_deps)
};

declare function tnt:local-lib-names() as xs:string * {
    let $deps := $doc/project/dependencies
    for $i in $deps/dependency[scope eq "system"] return
        tnt:e(tnt:substring-after-last(tnt:preprocess-path($i/systemPath), "/"))
};

declare function tnt:wrap-deps() as xs:string {
  concat ("dependencies {",  $NEW_LINE, tnt:merge-strings(tnt:dependencies()), $NEW_LINE, "}")
};

declare function tnt:local-libs() as xs:string* {
    concat("localLibs = [", string-join(tnt:local-lib-names(), ", "), "]")
};

declare function tnt:fat-jar-task() as xs:string {
    "jar {&#x0A;   from { configurations.compile.collect { it.isDirectory() ? [] : localLibs.contains(it.getName()) ?  zipTree(it) : []} }&#x0A;}"
};

declare function tnt:sources-jar() as xs:string {
concat(
"task sourceJar(type: Jar) {",   
"&#x0A;   description = 'Builds a source jar artifact suitable for maven deployment.'",
"&#x0A;   classifier = 'sources'",
"&#x0A;   from sourceSets.main.java",
"&#x0A;}",
$NEW_LINE,
$NEW_LINE,
"build.dependsOn sourceJar",
$NEW_LINE,
$NEW_LINE,
"artifacts {&#x0A;   archives sourceJar &#x0A;}"
)
};

declare function tnt:deployer() as xs:string? {
    if(string-length($url) ne 0 and string-length($user) ne 0 and string-length($password) ne 0) then
       let $u := if (ends-with($url, "/")) then substring($url, 0, string-length($url) ) else $url
        return 
       concat(
       "uploadArchives {", $NEW_LINE_1, 
    "repositories.mavenDeployer {", $NEW_LINE_2,
        "repository(url: '", $u, "/releases/') {", $NEW_LINE_3,
            "authentication(userName: '", $user, "', password: '", $password, "')", $NEW_LINE_2,
        "}", $NEW_LINE_2,

        "snapshotRepository(url: '", $u, "/snapshots/') {", $NEW_LINE_3,
            "authentication(userName: '", $user, "', password: '", $password, "')", $NEW_LINE_2,
        "}", $NEW_LINE_2,
        "pom.groupId = 'org.grobid'", $NEW_LINE_1,
        "}", $NEW_LINE,

        
    "}", $NEW_LINE
    
    )
    else 
        ()
};

declare function tnt:test() as xs:string {
 concat(
 "test {", $NEW_LINE_1,
    "maxHeapSize = '1024m'", $NEW_LINE,
"}"
)
};

(: HELPERS :)
declare function tnt:substring-after-last($arg as xs:string?, $delim as xs:string) as xs:string {
    replace ($arg,concat('^.*', tnt:escape-for-regex($delim)), '')
};

declare function tnt:escape-for-regex($arg as xs:string?) as xs:string {      
    replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1')
};



tnt:merge-strings(
  (
    tnt:header(),
    $NEW_LINE,
    tnt:project-id(),
    $NEW_LINE,
    tnt:repos(),
    $NEW_LINE,
    tnt:wrap-deps(),
    $NEW_LINE,
    tnt:local-libs(),
    $NEW_LINE,
    tnt:sources-jar(),
    $NEW_LINE,
    tnt:fat-jar-task(),
    $NEW_LINE,
    tnt:deployer(),
    $NEW_LINE,
    tnt:test(),
    $NEW_LINE,
    tnt:appendix()
  )
)

