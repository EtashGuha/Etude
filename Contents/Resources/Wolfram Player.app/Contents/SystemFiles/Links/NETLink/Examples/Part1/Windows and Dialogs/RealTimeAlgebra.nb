(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[     10349,        302]
NotebookOptionsPosition[      9206,        260]
NotebookOutlinePosition[      9723,        279]
CellTagsIndexPosition[      9680,        276]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[".NET/Link Example : A \"RealTimeAlgebra\" Dialog", "Title",
 CellID->406514983],

Cell[TextData[{
 "This example demonstrates many basic features of creating interactive user \
interface elements from ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " code. It can be run in a modal way, using ",
 Cell[BoxData[
  ButtonBox["DoNETModal",
   BaseStyle->"Link",
   ButtonData->"paclet:NETLink/ref/DoNETModal"]], "InlineFormula"],
 ", or modeless, using ",
 Cell[BoxData[
  ButtonBox["DoNETModeless",
   BaseStyle->"Link",
   ButtonData->"paclet:NETLink/ref/DoNETModeless"]], "InlineFormula"],
 ". This example is a .NET version of the Java-based one that is included \
with J/Link."
}], "Text",
 CellChangeTimes->{{3.412959425697315*^9, 3.412959449754963*^9}},
 CellID->178951897],

Cell[TextData[{
 "To try this example, evaluate all the initialization cells (you can do this \
using the menu item ",
 StyleBox[ButtonBox["Evaluation",
  BaseStyle->"Link",
  ButtonData->"paclet:guide/EvaluationMenu"], "MenuName"],
 StyleBox[" \[FilledRightTriangle] ", "MenuNameDelimiter"],
 StyleBox[ButtonBox["Evaluate Initialization Cells",
  BaseStyle->"Link",
  ButtonData->"paclet:ref/menuitem/EvaluateInitializationCells"], "MenuName"],
 ") and then go to the Examples section."
}], "Text",
 CellChangeTimes->{{3.412707566063933*^9, 3.412707597948962*^9}, {
   3.412707959534474*^9, 3.412707967363954*^9}, {3.412708138927157*^9, 
   3.412708173015101*^9}, {3.412708230174596*^9, 3.412708252892912*^9}, 
   3.4129594876000347`*^9},
 CellID->1738407360],

Cell[CellGroupData[{

Cell["Code", "Section"],

Cell["\<\
Needs[\"NETLink`\"]

createWindow[] :=
\tNETBlock[
\t\tModule[{form, trackbar, listener},
\t\t\tInstallNET[];
\t\t\t(* We load some types from which we need to call static members. *)
\t\t\tLoadNETType[\"System.Windows.Forms.ScrollBars\"];
\t\t\tLoadNETType[\"System.Windows.Forms.AnchorStyles\"];
\t\t\tLoadNETType[\"System.Windows.Forms.DockStyle\"];
\t\t\tLoadNETType[\"System.Windows.Forms.FormStartPosition\"];
\t\t\tLoadNETType[\"System.Drawing.FontFamily\"];
\t\t\t(* Now create the form and populate it with components. *)
\t\t\tform = NETNew[\"System.Windows.Forms.Form\"];
\t\t\tform@Text = \"RealTimeAlgebra\";
\t\t\ttrackbar = NETNew[\"System.Windows.Forms.TrackBar\"];
\t\t\ttrackbar@Minimum = 0;
\t\t\ttrackbar@Maximum = 20;
\t\t\ttrackbar@LargeChange = 1;
\t\t\tinText = NETNew[\"System.Windows.Forms.TextBox\"];
\t\t\tinText@Text = \"Expand[(x+1)^a]\";
\t\t\tinText@ScrollBars = ScrollBars`Vertical;
\t\t\toutText = NETNew[\"System.Windows.Forms.TextBox\"];
\t\t\toutText@Multiline = True;
\t\t\t(* The next line is the equivalent of a bitwise-or of flags in a .NET \
language like C#, e.g.:
\t\t\t\t\tScrollBars.Vertical | ScrollBars.Horizontal.
\t\t\t*)
\t\t\toutText@ScrollBars = BitOr[NETObjectToExpression[ScrollBars`Vertical], \
NETObjectToExpression[ScrollBars`Horizontal]];
\t\t\toutText@Font = NETNew[\"System.Drawing.Font\", \
FontFamily`GenericMonospace, 10];
\t\t\toutText@WordWrap = False;
\t\t\toutText@Dock = DockStyle`Fill;
\t\t\ttrackbar@Dock = DockStyle`Top;
\t\t\tinText@Dock = DockStyle`Top;
\t\t\toutText@Parent = form;
\t\t\ttrackbar@Parent = form;
\t\t\tinText@Parent = form;  (* Last one added appears at top of frame. *)
\t\t\tform@StartPosition = FormStartPosition`CenterScreen;
\t\t\t(* Here we wire up the Scroll event to call back into Mathematica and \
execute the scrollFunc function. *)
\t\t\tAddEventHandler[trackbar@Scroll, scrollFunc];
\t\t\tform@Width = 400;
\t\t\tform@Height = 200;
\t\t\t(* inText and outText are globals, because we need to refer to them by
\t\t\t   name in the scrollFunc. They must escape the NETBlock wrapping this \
createWindow function,
\t\t\t   hence the call to KeepNETObject. The form object also needs to \
escape the NETBlock, but it
\t\t\t   escapes automatically, as it is the NETBlock's return value.
\t\t\t*)
\t\t\tKeepNETObject[inText, outText];
\t\t\tform
\t\t]
\t]

(* This is what will be called in response to moving the slider position: *)
scrollFunc[trackBar_, eventArgs_] :=
\toutText@Text = Block[{a = trackBar@Value}, \
FixCRLF[ToString[ToExpression[inText@Text]]]]


RealTimeAlgebraModal[] :=
\tNETBlock[
\t\tDoNETModal[createWindow[]]
\t]


RealTimeAlgebraModeless[opts___?OptionQ] :=
\tModule[{form},
\t\tform = createWindow[];
\t\t(* We use the form's Closing event to specify code to be executed when \
the form
\t\t   is closed. It is important for a modeless form to use the Closing \
event, not the
\t\t   Closed event. The Closing event fires before Closed, and there is \
logic in the Closed
\t\t   event that turns off sharing, so that afterwards no other code that \
calls Mathematica
\t\t   could be executed from .NET.
\t\t   The use here is typical--we clean up the object references that need \
to persist
\t\t   throughout the lifetime of the window. Note that the \
RealTimeAlgebraModeless
\t\t   function is not wrapped in NETBlock. If it were, then the inText and \
outText objects
\t\t   would be released when that NETBlock ended, which happens right after \
the window is
\t\t   displayed. The inText and outText objects escape the NETBlock wrapping \
createWindow
\t\t   because KeepNETObject is called on them. But KeepNETObject doesn't \
mean \"keep forever\"--it
\t\t   simply promotes the objects to the \"release\" list of the next \
enclosing NETBlock.
\t\t*)
\t\tAddEventHandler[form@Closing, ReleaseNETObject[inText, outText]&];
\t\tDoNETModeless[form, opts];
\t\t(* We don't need a reference to the form anymore, even though it will \
remain visible and active. *)
\t\tReleaseNETObject[form]
\t]\
\>", "Input",
 PageWidth->Infinity,
 InitializationCell->True,
 CellChangeTimes->{{3.389963376145977*^9, 3.389963425315977*^9}},
 ShowSpecialCharacters->False]
}, Closed]],

Cell[CellGroupData[{

Cell["Examples", "Section"],

Cell["\<\
This dialog lets you drag a slider to change the value of the varaible a from \
0 to 20 and recompute the expression in the top text panel.\
\>", "Text",
 CellID->173222071],

Cell["This runs the dialog in a modal way:", "Text",
 CellID->497610897],

Cell["RealTimeAlgebraModal[]", "Input"],

Cell[TextData[{
 "Try entering ",
 Cell[BoxData[
  RowBox[{"Print", "[", "a", "]"}]], "InlineFormula"],
 " or  in the top panel and dragging the slider. Notice how the output \
appears in the notebook. Close the window to end the program.\n\nFor \
comparison, next run the dialog in a modeless way:"
}], "Text",
 CellChangeTimes->{3.412977891096616*^9}],

Cell["RealTimeAlgebraModeless[]", "Input"],

Cell[TextData[{
 "Note how you can continue to use the front end for computations while the \
RealTimeAlgebra window is up.\n\nTry ",
 Cell[BoxData[
  RowBox[{"Print", "[", "a", "]"}]], "InlineFormula"],
 " in the upper panel now. Note that the Print output does not appear in the \
front end. When using ShareKernel, which is how modeless interfaces are \
implemented, the .NET link is the kernel's ",
 Cell[BoxData[
  ButtonBox["$ParentLink",
   BaseStyle->"Link"]], "InlineFormula"],
 " while the slider is being dragged, so all side-effect output gets sent to \
.NET, where it is discarded by the internal code used for event callbacks. \
You can get the output to appear in the front end by using ShareFrontEnd. \
ShareFrontEnd is a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " function that turns on sharing of the front end between the kernel and the \
link to .NET, but it is also an option to ",
 Cell[BoxData[
  ButtonBox["DoNETModeless",
   BaseStyle->"Link",
   ButtonData->"NETLink/ref/DoNETModeless"]], "InlineFormula"],
 ", so you will rarely need to call ShareFrontEnd as a function.\n\nClose the \
previous modeless window and then try this:"
}], "Text",
 CellChangeTimes->{{3.4129781063784065`*^9, 3.4129781122058973`*^9}, {
  3.4129781428275657`*^9, 3.4129781615755253`*^9}}],

Cell["RealTimeAlgebraModeless[ShareFrontEnd -> True]", "Input"],

Cell[TextData[{
 "Now putting ",
 Cell[BoxData[
  RowBox[{
   ButtonBox["Plot",
    BaseStyle->"Link"], "[", 
   RowBox[{
    RowBox[{
     ButtonBox["Sin",
      BaseStyle->"Link"], "[", 
     RowBox[{"a", " ", "x"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", 
      RowBox[{"2", 
       ButtonBox["Pi",
        BaseStyle->"Link"]}]}], "}"}]}], "]"}]], "InlineFormula"],
 " in the upper panel and dragging the slider will cause plots to appear in \
the front end.\n\nAfter you are finished, close the RealTimeAlgebra window \
and front end sharing will be turned off."
}], "Text",
 CellChangeTimes->{{3.412978173980426*^9, 3.412978211976291*^9}}]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowSize->{694, 594},
WindowMargins->{{Automatic, 193}, {113, Automatic}},
DockedCells->(None& ),
PrivateNotebookOptions->{"NotebookAuthor"->""},
FrontEndVersion->"8.0 for Microsoft Windows (64-bit) (August 15, 2010)",
StyleDefinitions->FrontEnd`FileName[{"Wolfram"}, "Reference.nb", 
  CharacterEncoding -> "WindowsANSI"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 85, 1, 51, "Title",
 CellID->406514983],
Cell[655, 25, 700, 19, 94, "Text",
 CellID->178951897],
Cell[1358, 46, 760, 16, 50, "Text",
 CellID->1738407360],
Cell[CellGroupData[{
Cell[2143, 66, 23, 0, 51, "Section"],
Cell[2169, 68, 4196, 107, 1425, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[6402, 180, 27, 0, 31, "Section"],
Cell[6432, 182, 183, 4, 50, "Text",
 CellID->173222071],
Cell[6618, 188, 72, 1, 30, "Text",
 CellID->497610897],
Cell[6693, 191, 39, 0, 28, "Input"],
Cell[6735, 193, 353, 8, 116, "Text"],
Cell[7091, 203, 42, 0, 28, "Input"],
Cell[7136, 205, 1304, 27, 324, "Text"],
Cell[8443, 234, 63, 0, 27, "Input"],
Cell[8509, 236, 669, 20, 92, "Text"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
