/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_wolfram_jlink_NativeLink */

#ifndef _Included_com_wolfram_jlink_NativeLink
#define _Included_com_wolfram_jlink_NativeLink
#ifdef __cplusplus
extern "C" {
#endif
#undef com_wolfram_jlink_NativeLink_DEBUGLEVEL
#define com_wolfram_jlink_NativeLink_DEBUGLEVEL 0L
/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLInitialize
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLInitialize
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLOpenString
 * Signature: (Ljava/lang/String;[Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_wolfram_jlink_NativeLink_MLOpenString
  (JNIEnv *, jobject, jstring, jobjectArray);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLOpen
 * Signature: (I[Ljava/lang/String;[Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_wolfram_jlink_NativeLink_MLOpen
  (JNIEnv *, jobject, jint, jobjectArray, jobjectArray);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLLoopbackOpen
 * Signature: ([Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_wolfram_jlink_NativeLink_MLLoopbackOpen
  (JNIEnv *, jclass, jobjectArray);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLSetEnvIDString
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLSetEnvIDString
  (JNIEnv *, jclass, jstring);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetLinkedEnvIDString
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_wolfram_jlink_NativeLink_MLGetLinkedEnvIDString
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLConnect
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLConnect
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLClose
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLClose
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLName
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_wolfram_jlink_NativeLink_MLName
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLNewPacket
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLNewPacket
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLNextPacket
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_MLNextPacket
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLEndPacket
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLEndPacket
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLError
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_MLError
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLClearError
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_com_wolfram_jlink_NativeLink_MLClearError
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLErrorMessage
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_wolfram_jlink_NativeLink_MLErrorMessage
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLSetError
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLSetError
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLReady
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_com_wolfram_jlink_NativeLink_MLReady
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLFlush
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLFlush
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetNext
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_MLGetNext
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetType
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_MLGetType
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutNext
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutNext
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetArgCount
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_MLGetArgCount
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutArgCount
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutArgCount
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutData
 * Signature: (J[BI)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutData
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutSize
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutSize
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetData
 * Signature: (JI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_wolfram_jlink_NativeLink_MLGetData
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLBytesToGet
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_MLBytesToGet
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLBytesToPut
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_MLBytesToPut
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetString
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_wolfram_jlink_NativeLink_MLGetString
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutString
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutString
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetByteString
 * Signature: (JB)[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_wolfram_jlink_NativeLink_MLGetByteString
  (JNIEnv *, jclass, jlong, jbyte);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutByteString
 * Signature: (J[BI)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutByteString
  (JNIEnv *, jclass, jlong, jbyteArray, jint);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetSymbol
 * Signature: (J)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_com_wolfram_jlink_NativeLink_MLGetSymbol
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutSymbol
 * Signature: (JLjava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutSymbol
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetInteger
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_MLGetInteger
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutInteger
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutInteger
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetDouble
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_com_wolfram_jlink_NativeLink_MLGetDouble
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutDouble
 * Signature: (JD)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutDouble
  (JNIEnv *, jclass, jlong, jdouble);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutArray
 * Signature: (JILjava/lang/Object;Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutArray
  (JNIEnv *, jclass, jlong, jint, jobject, jstring);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutArrayFlat
 * Signature: (JILjava/lang/Object;[Ljava/lang/String;[I)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutArrayFlat
  (JNIEnv *, jclass, jlong, jint, jobject, jobjectArray, jintArray);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetArray
 * Signature: (JII[Ljava/lang/String;)Ljava/lang/Object;
 */
JNIEXPORT jobject JNICALL Java_com_wolfram_jlink_NativeLink_MLGetArray
  (JNIEnv *, jclass, jlong, jint, jint, jobjectArray);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLCheckFunction
 * Signature: (JLjava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_MLCheckFunction
  (JNIEnv *, jclass, jlong, jstring);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLCheckFunctionWithArgCount
 * Signature: (JLjava/lang/String;I)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_MLCheckFunctionWithArgCount
  (JNIEnv *, jclass, jlong, jstring, jint);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLTransferExpression
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLTransferExpression
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLTransferToEndOfLoopbackLink
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLTransferToEndOfLoopbackLink
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLGetMessage
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_MLGetMessage
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLPutMessage
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLPutMessage
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLMessageReady
 * Signature: (J)Z
 */
JNIEXPORT jboolean JNICALL Java_com_wolfram_jlink_NativeLink_MLMessageReady
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLCreateMark
 * Signature: (J)J
 */
JNIEXPORT jlong JNICALL Java_com_wolfram_jlink_NativeLink_MLCreateMark
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLSeekMark
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLSeekMark
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLDestroyMark
 * Signature: (JJ)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLDestroyMark
  (JNIEnv *, jclass, jlong, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLSetYieldFunction
 * Signature: (JZ)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLSetYieldFunction
  (JNIEnv *, jclass, jlong, jboolean);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    MLSetMessageHandler
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_MLSetMessageHandler
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    nativeSizesMatch
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_com_wolfram_jlink_NativeLink_nativeSizesMatch
  (JNIEnv *, jclass, jint);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    hideJavaWindow
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_hideJavaWindow
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    macJavaLayerToFront
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_macJavaLayerToFront
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    winJavaLayerToFront
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_winJavaLayerToFront
  (JNIEnv *, jclass, jboolean);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    mathematicaToFront
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_mathematicaToFront
  (JNIEnv *, jclass);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    getNativeWindowHandle
 * Signature: (Ljava/awt/Window;Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL Java_com_wolfram_jlink_NativeLink_getNativeWindowHandle
  (JNIEnv *, jclass, jobject, jstring);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    killProcess
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_com_wolfram_jlink_NativeLink_killProcess
  (JNIEnv *, jclass, jlong);

/*
 * Class:     com_wolfram_jlink_NativeLink
 * Method:    appToFront
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_com_wolfram_jlink_NativeLink_appToFront
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
