(* :Title: RCodeHighlighter *)

(* :Context: RLink`RCodeHighlighter` *)

(* :Author:
        Leonid Shifrin
        leonids@wolfram.com
*)

(* :Package Version: 1.0 *)

(* :Mathematica Version: 9.0 *)

(* :Copyright: RLink source code (c) 2011-2012, Wolfram Research, Inc. All rights reserved.  *)

(* :Discussion:

  Experimental package implementing code highlighting engine for R language.
  Currently works relibaly only on Windows. Attempts to use on Linux and 
  Mac OSX may lead to crashes. 
  
  This package was automatically generated by the code highlighter generator,
  which can be found here:
  
  https://gist.github.com/1739837
  
  The highlighter generator itself is under MIT open source license. 
  
  This package is however under the standard proprietary Wolfram license.  
     
*)


(* :Keywords: R code highlighting *)


BeginPackage["RLink`RCodeHighlighter`"];
 

 GetRCell;
 

 Begin["`Private`"];
 

 typeQ["Keywords"]["function"] = True;
 typeQ["Keywords"]["for"] = True;
 typeQ["Keywords"]["in"] = True;
 typeQ["Keywords"]["if"] = True;
 typeQ["Keywords"]["else"] = True;
 typeQ["Keywords"]["return"] = True;
 typeQ["Keywords"][_] = False;
 typeQ["Operators"][":::"] = True;
 typeQ["Operators"]["::"] = True;
 typeQ["Operators"]["?"] = True;
 typeQ["Operators"]["$"] = True;
 typeQ["Operators"]["@"] = True;
 typeQ["Operators"]["<<-"] = True;
 typeQ["Operators"]["<-"] = True;
 typeQ["Operators"]["->"] = True;
 typeQ["Operators"]["->>"] = True;
 typeQ["Operators"]["["] = True;
 typeQ["Operators"]["]"] = True;
 typeQ["Operators"][":"] = True;
 typeQ["Operators"]["&&"] = True;
 typeQ["Operators"]["||"] = True;
 typeQ["Operators"]["&"] = True;
 typeQ["Operators"]["|"] = True;
 typeQ["Operators"]["=="] = True;
 typeQ["Operators"]["<="] = True;
 typeQ["Operators"][">="] = True;
 typeQ["Operators"]["!="] = True;
 typeQ["Operators"]["!"] = True;
 typeQ["Operators"][">"] = True;
 typeQ["Operators"]["<"] = True;
 typeQ["Operators"]["+"] = True;
 typeQ["Operators"]["-"] = True;
 typeQ["Operators"]["*"] = True;
 typeQ["Operators"]["/"] = True;
 typeQ["Operators"][_] = False;
 typeQ["Builtins"]["Arithmetic"] = True;
 typeQ["Builtins"]["AsIs"] = True;
 typeQ["Builtins"]["Bessel"] = True;
 typeQ["Builtins"]["Comparison"] = True;
 typeQ["Builtins"]["Constants"] = True;
 typeQ["Builtins"]["Control"] = True;
 typeQ["Builtins"]["DateTimeClasses"] = True;
 typeQ["Builtins"]["Dates"] = True;
 typeQ["Builtins"]["Defunct"] = True;
 typeQ["Builtins"]["Deprecated"] = True;
 typeQ["Builtins"]["Encoding"] = True;
 typeQ["Builtins"]["Extract"] = True;
 typeQ["Builtins"]["Filter"] = True;
 typeQ["Builtins"]["Foreign"] = True;
 typeQ["Builtins"]["ISOdatetime"] = True;
 typeQ["Builtins"]["InternalMethods"] = True;
 typeQ["Builtins"]["Logic"] = True;
 typeQ["Builtins"]["Memory"] = True;
 typeQ["Builtins"]["NA"] = True;
 typeQ["Builtins"]["NULL"] = True;
 typeQ["Builtins"]["NotYetImplemented"] = True;
 typeQ["Builtins"]["NumericConstants"] = True;
 typeQ["Builtins"]["Ops.Date"] = True;
 typeQ["Builtins"]["Paren"] = True;
 typeQ["Builtins"]["Quotes"] = True;
 typeQ["Builtins"]["R.Version"] = True;
 typeQ["Builtins"]["R.home"] = True;
 typeQ["Builtins"]["Random"] = True;
 typeQ["Builtins"]["Random.user"] = True;
 typeQ["Builtins"]["Rdconv"] = True;
 typeQ["Builtins"]["Recall"] = True;
 typeQ["Builtins"]["Reserved"] = True;
 typeQ["Builtins"]["Special"] = True;
 typeQ["Builtins"]["Startup"] = True;
 typeQ["Builtins"]["Syntax"] = True;
 typeQ["Builtins"]["Sys.getenv"] = True;
 typeQ["Builtins"]["Sys.getpid"] = True;
 typeQ["Builtins"]["Sys.glob"] = True;
 typeQ["Builtins"]["Sys.info"] = True;
 typeQ["Builtins"]["Sys.localeconv"] = True;
 typeQ["Builtins"]["Sys.readlink"] = True;
 typeQ["Builtins"]["Sys.setFileTime"] = True;
 typeQ["Builtins"]["Sys.setenv"] = True;
 typeQ["Builtins"]["Sys.sleep"] = True;
 typeQ["Builtins"]["Sys.time"] = True;
 typeQ["Builtins"]["Sys.timezone"] = True;
 typeQ["Builtins"]["Sys.which"] = True;
 typeQ["Builtins"]["Trig"] = True;
 typeQ["Builtins"]["UseMethod"] = True;
 typeQ["Builtins"]["Vectorize"] = True;
 typeQ["Builtins"]["abbreviate"] = True;
 typeQ["Builtins"]["abs"] = True;
 typeQ["Builtins"]["addTaskCallback"] = True;
 typeQ["Builtins"]["agrep"] = True;
 typeQ["Builtins"]["all"] = True;
 typeQ["Builtins"]["all.equal"] = True;
 typeQ["Builtins"]["all.names"] = True;
 typeQ["Builtins"]["any"] = True;
 typeQ["Builtins"]["aperm"] = True;
 typeQ["Builtins"]["append"] = True;
 typeQ["Builtins"]["apply"] = True;
 typeQ["Builtins"]["args"] = True;
 typeQ["Builtins"]["array"] = True;
 typeQ["Builtins"]["as.Date"] = True;
 typeQ["Builtins"]["as.POSIXct"] = True;
 typeQ["Builtins"]["as.environment"] = True;
 typeQ["Builtins"]["as.function"] = True;
 typeQ["Builtins"]["assign"] = True;
 typeQ["Builtins"]["assignOps"] = True;
 typeQ["Builtins"]["attach"] = True;
 typeQ["Builtins"]["attachNamespace"] = True;
 typeQ["Builtins"]["attr"] = True;
 typeQ["Builtins"]["attributes"] = True;
 typeQ["Builtins"]["autoload"] = True;
 typeQ["Builtins"]["backsolve"] = True;
 typeQ["Builtins"]["basename"] = True;
 typeQ["Builtins"]["bindenv"] = True;
 typeQ["Builtins"]["body"] = True;
 typeQ["Builtins"]["bquote"] = True;
 typeQ["Builtins"]["browser"] = True;
 typeQ["Builtins"]["browserText"] = True;
 typeQ["Builtins"]["builtins"] = True;
 typeQ["Builtins"]["by"] = True;
 typeQ["Builtins"]["call"] = True;
 typeQ["Builtins"]["callCC"] = True;
 typeQ["Builtins"]["capabilities"] = True;
 typeQ["Builtins"]["cat"] = True;
 typeQ["Builtins"]["cbind"] = True;
 typeQ["Builtins"]["ceiling"] = True;
 typeQ["Builtins"]["char.expand"] = True;
 typeQ["Builtins"]["charToRaw"] = True;
 typeQ["Builtins"]["character"] = True;
 typeQ["Builtins"]["charmatch"] = True;
 typeQ["Builtins"]["chartr"] = True;
 typeQ["Builtins"]["chol"] = True;
 typeQ["Builtins"]["chol2inv"] = True;
 typeQ["Builtins"]["class"] = True;
 typeQ["Builtins"]["col"] = True;
 typeQ["Builtins"]["colSums"] = True;
 typeQ["Builtins"]["commandArgs"] = True;
 typeQ["Builtins"]["comment"] = True;
 typeQ["Builtins"]["complex"] = True;
 typeQ["Builtins"]["conditions"] = True;
 typeQ["Builtins"]["conflicts"] = True;
 typeQ["Builtins"]["connections"] = True;
 typeQ["Builtins"]["contributors"] = True;
 typeQ["Builtins"]["copyright"] = True;
 typeQ["Builtins"]["cosh"] = True;
 typeQ["Builtins"]["crossprod"] = True;
 typeQ["Builtins"]["cumsum"] = True;
 typeQ["Builtins"]["cut"] = True;
 typeQ["Builtins"]["cut.POSIXt"] = True;
 typeQ["Builtins"]["data.class"] = True;
 typeQ["Builtins"]["data.frame"] = True;
 typeQ["Builtins"]["data.matrix"] = True;
 typeQ["Builtins"]["date"] = True;
 typeQ["Builtins"]["debug"] = True;
 typeQ["Builtins"]["delayedAssign"] = True;
 typeQ["Builtins"]["deparse"] = True;
 typeQ["Builtins"]["det"] = True;
 typeQ["Builtins"]["detach"] = True;
 typeQ["Builtins"]["diag"] = True;
 typeQ["Builtins"]["diff"] = True;
 typeQ["Builtins"]["difftime"] = True;
 typeQ["Builtins"]["dim"] = True;
 typeQ["Builtins"]["dimnames"] = True;
 typeQ["Builtins"]["dir.create"] = True;
 typeQ["Builtins"]["do.call"] = True;
 typeQ["Builtins"]["double"] = True;
 typeQ["Builtins"]["dput"] = True;
 typeQ["Builtins"]["drop"] = True;
 typeQ["Builtins"]["droplevels"] = True;
 typeQ["Builtins"]["dump"] = True;
 typeQ["Builtins"]["duplicated"] = True;
 typeQ["Builtins"]["dyn.load"] = True;
 typeQ["Builtins"]["eapply"] = True;
 typeQ["Builtins"]["eigen"] = True;
 typeQ["Builtins"]["encodeString"] = True;
 typeQ["Builtins"]["environment"] = True;
 typeQ["Builtins"]["environment"] = True;
 typeQ["Builtins"]["eval"] = True;
 typeQ["Builtins"]["exists"] = True;
 typeQ["Builtins"]["expand.grid"] = True;
 typeQ["Builtins"]["expression"] = True;
 typeQ["Builtins"]["factor"] = True;
 typeQ["Builtins"]["file.access"] = True;
 typeQ["Builtins"]["file.choose"] = True;
 typeQ["Builtins"]["file.info"] = True;
 typeQ["Builtins"]["file.path"] = True;
 typeQ["Builtins"]["file.show"] = True;
 typeQ["Builtins"]["files"] = True;
 typeQ["Builtins"]["find.package"] = True;
 typeQ["Builtins"]["findInterval"] = True;
 typeQ["Builtins"]["force"] = True;
 typeQ["Builtins"]["formals"] = True;
 typeQ["Builtins"]["format"] = True;
 typeQ["Builtins"]["format.info"] = True;
 typeQ["Builtins"]["format.pval"] = True;
 typeQ["Builtins"]["formatC"] = True;
 typeQ["Builtins"]["formatDL"] = True;
 typeQ["Builtins"]["function"] = True;
 typeQ["Builtins"]["gc"] = True;
 typeQ["Builtins"]["gc.time"] = True;
 typeQ["Builtins"]["gctorture"] = True;
 typeQ["Builtins"]["get"] = True;
 typeQ["Builtins"]["getDLLRegisteredRoutines"] = True;
 typeQ["Builtins"]["getHook"] = True;
 typeQ["Builtins"]["getLoadedDLLs"] = True;
 typeQ["Builtins"]["getNativeSymbolInfo"] = True;
 typeQ["Builtins"]["getNumCConverters"] = True;
 typeQ["Builtins"]["getTaskCallbackNames"] = True;
 typeQ["Builtins"]["gettext"] = True;
 typeQ["Builtins"]["getwd"] = True;
 typeQ["Builtins"]["gl"] = True;
 typeQ["Builtins"]["grep"] = True;
 typeQ["Builtins"]["grepRaw"] = True;
 typeQ["Builtins"]["groupGeneric"] = True;
 typeQ["Builtins"]["gzcon"] = True;
 typeQ["Builtins"]["hexmode"] = True;
 typeQ["Builtins"]["iconv"] = True;
 typeQ["Builtins"]["icuSetCollate"] = True;
 typeQ["Builtins"]["identical"] = True;
 typeQ["Builtins"]["identity"] = True;
 typeQ["Builtins"]["ifelse"] = True;
 typeQ["Builtins"]["integer"] = True;
 typeQ["Builtins"]["interaction"] = True;
 typeQ["Builtins"]["interactive"] = True;
 typeQ["Builtins"]["invisible"] = True;
 typeQ["Builtins"]["is.R"] = True;
 typeQ["Builtins"]["is.finite"] = True;
 typeQ["Builtins"]["is.function"] = True;
 typeQ["Builtins"]["is.language"] = True;
 typeQ["Builtins"]["is.object"] = True;
 typeQ["Builtins"]["is.recursive"] = True;
 typeQ["Builtins"]["is.single"] = True;
 typeQ["Builtins"]["is.unsorted"] = True;
 typeQ["Builtins"]["isS4"] = True;
 typeQ["Builtins"]["isSymmetric"] = True;
 typeQ["Builtins"]["jitter"] = True;
 typeQ["Builtins"]["kappa"] = True;
 typeQ["Builtins"]["kronecker"] = True;
 typeQ["Builtins"]["labels"] = True;
 typeQ["Builtins"]["lapply"] = True;
 typeQ["Builtins"]["length"] = True;
 typeQ["Builtins"]["levels"] = True;
 typeQ["Builtins"]["library"] = True;
 typeQ["Builtins"]["library.dynam"] = True;
 typeQ["Builtins"]["license"] = True;
 typeQ["Builtins"]["list"] = True;
 typeQ["Builtins"]["list.files"] = True;
 typeQ["Builtins"]["list2env"] = True;
 typeQ["Builtins"]["load"] = True;
 typeQ["Builtins"]["locales"] = True;
 typeQ["Builtins"]["log"] = True;
 typeQ["Builtins"]["logical"] = True;
 typeQ["Builtins"]["lower.tri"] = True;
 typeQ["Builtins"]["ls"] = True;
 typeQ["Builtins"]["make.names"] = True;
 typeQ["Builtins"]["make.unique"] = True;
 typeQ["Builtins"]["mapply"] = True;
 typeQ["Builtins"]["margin.table"] = True;
 typeQ["Builtins"]["match"] = True;
 typeQ["Builtins"]["match.arg"] = True;
 typeQ["Builtins"]["match.call"] = True;
 typeQ["Builtins"]["match.fun"] = True;
 typeQ["Builtins"]["matmult"] = True;
 typeQ["Builtins"]["matrix"] = True;
 typeQ["Builtins"]["max"] = True;
 typeQ["Builtins"]["max.col"] = True;
 typeQ["Builtins"]["mean"] = True;
 typeQ["Builtins"]["memCompress"] = True;
 typeQ["Builtins"]["memory.profile"] = True;
 typeQ["Builtins"]["merge"] = True;
 typeQ["Builtins"]["message"] = True;
 typeQ["Builtins"]["missing"] = True;
 typeQ["Builtins"]["mode"] = True;
 typeQ["Builtins"]["name"] = True;
 typeQ["Builtins"]["names"] = True;
 typeQ["Builtins"]["nargs"] = True;
 typeQ["Builtins"]["nchar"] = True;
 typeQ["Builtins"]["nlevels"] = True;
 typeQ["Builtins"]["noquote"] = True;
 typeQ["Builtins"]["norm"] = True;
 typeQ["Builtins"]["normalizePath"] = True;
 typeQ["Builtins"]["nrow"] = True;
 typeQ["Builtins"]["numeric"] = True;
 typeQ["Builtins"]["octmode"] = True;
 typeQ["Builtins"]["on.exit"] = True;
 typeQ["Builtins"]["options"] = True;
 typeQ["Builtins"]["order"] = True;
 typeQ["Builtins"]["outer"] = True;
 typeQ["Builtins"]["parse"] = True;
 typeQ["Builtins"]["paste"] = True;
 typeQ["Builtins"]["path.expand"] = True;
 typeQ["Builtins"]["pmatch"] = True;
 typeQ["Builtins"]["polyroot"] = True;
 typeQ["Builtins"]["pretty"] = True;
 typeQ["Builtins"]["print"] = True;
 typeQ["Builtins"]["print.default"] = True;
 typeQ["Builtins"]["prmatrix"] = True;
 typeQ["Builtins"]["proc.time"] = True;
 typeQ["Builtins"]["prod"] = True;
 typeQ["Builtins"]["prop.table"] = True;
 typeQ["Builtins"]["pushBack"] = True;
 typeQ["Builtins"]["qr"] = True;
 typeQ["Builtins"]["qr.X"] = True;
 typeQ["Builtins"]["quit"] = True;
 typeQ["Builtins"]["range"] = True;
 typeQ["Builtins"]["rank"] = True;
 typeQ["Builtins"]["rapply"] = True;
 typeQ["Builtins"]["raw"] = True;
 typeQ["Builtins"]["rawConnection"] = True;
 typeQ["Builtins"]["read.dcf"] = True;
 typeQ["Builtins"]["readBin"] = True;
 typeQ["Builtins"]["readChar"] = True;
 typeQ["Builtins"]["readLines"] = True;
 typeQ["Builtins"]["readRDS"] = True;
 typeQ["Builtins"]["readRenviron"] = True;
 typeQ["Builtins"]["readline"] = True;
 typeQ["Builtins"]["real"] = True;
 typeQ["Builtins"]["reg.finalizer"] = True;
 typeQ["Builtins"]["regex"] = True;
 typeQ["Builtins"]["regmatches"] = True;
 typeQ["Builtins"]["remove"] = True;
 typeQ["Builtins"]["rep"] = True;
 typeQ["Builtins"]["replace"] = True;
 typeQ["Builtins"]["rev"] = True;
 typeQ["Builtins"]["rle"] = True;
 typeQ["Builtins"]["round.POSIXt"] = True;
 typeQ["Builtins"]["row"] = True;
 typeQ["Builtins"]["row.names"] = True;
 typeQ["Builtins"]["rownames"] = True;
 typeQ["Builtins"]["rowsum"] = True;
 typeQ["Builtins"]["sQuote"] = True;
 typeQ["Builtins"]["sample"] = True;
 typeQ["Builtins"]["save"] = True;
 typeQ["Builtins"]["scale"] = True;
 typeQ["Builtins"]["scan"] = True;
 typeQ["Builtins"]["search"] = True;
 typeQ["Builtins"]["seek"] = True;
 typeQ["Builtins"]["seq"] = True;
 typeQ["Builtins"]["seq.Date"] = True;
 typeQ["Builtins"]["seq.POSIXt"] = True;
 typeQ["Builtins"]["sequence"] = True;
 typeQ["Builtins"]["serialize"] = True;
 typeQ["Builtins"]["setTimeLimit"] = True;
 typeQ["Builtins"]["shQuote"] = True;
 typeQ["Builtins"]["shell"] = True;
 typeQ["Builtins"]["shell.exec"] = True;
 typeQ["Builtins"]["showConnections"] = True;
 typeQ["Builtins"]["sign"] = True;
 typeQ["Builtins"]["sink"] = True;
 typeQ["Builtins"]["slice.index"] = True;
 typeQ["Builtins"]["socketSelect"] = True;
 typeQ["Builtins"]["solve"] = True;
 typeQ["Builtins"]["sort"] = True;
 typeQ["Builtins"]["source"] = True;
 typeQ["Builtins"]["split"] = True;
 typeQ["Builtins"]["sprintf"] = True;
 typeQ["Builtins"]["srcfile"] = True;
 typeQ["Builtins"]["stop"] = True;
 typeQ["Builtins"]["stopifnot"] = True;
 typeQ["Builtins"]["strptime"] = True;
 typeQ["Builtins"]["strsplit"] = True;
 typeQ["Builtins"]["strtoi"] = True;
 typeQ["Builtins"]["strtrim"] = True;
 typeQ["Builtins"]["structure"] = True;
 typeQ["Builtins"]["strwrap"] = True;
 typeQ["Builtins"]["subset"] = True;
 typeQ["Builtins"]["substitute"] = True;
 typeQ["Builtins"]["substr"] = True;
 typeQ["Builtins"]["sum"] = True;
 typeQ["Builtins"]["summary"] = True;
 typeQ["Builtins"]["svd"] = True;
 typeQ["Builtins"]["sweep"] = True;
 typeQ["Builtins"]["switch"] = True;
 typeQ["Builtins"]["sys.parent"] = True;
 typeQ["Builtins"]["sys.source"] = True;
 typeQ["Builtins"]["system"] = True;
 typeQ["Builtins"]["system.file"] = True;
 typeQ["Builtins"]["system.time"] = True;
 typeQ["Builtins"]["system2"] = True;
 typeQ["Builtins"]["table"] = True;
 typeQ["Builtins"]["tabulate"] = True;
 typeQ["Builtins"]["tapply"] = True;
 typeQ["Builtins"]["taskCallbackManager"] = True;
 typeQ["Builtins"]["tempfile"] = True;
 typeQ["Builtins"]["textConnection"] = True;
 typeQ["Builtins"]["tilde"] = True;
 typeQ["Builtins"]["toString"] = True;
 typeQ["Builtins"]["topenv"] = True;
 typeQ["Builtins"]["trace"] = True;
 typeQ["Builtins"]["traceback"] = True;
 typeQ["Builtins"]["tracemem"] = True;
 typeQ["Builtins"]["transform"] = True;
 typeQ["Builtins"]["try"] = True;
 typeQ["Builtins"]["typeof"] = True;
 typeQ["Builtins"]["union"] = True;
 typeQ["Builtins"]["unique"] = True;
 typeQ["Builtins"]["unlink"] = True;
 typeQ["Builtins"]["unlist"] = True;
 typeQ["Builtins"]["unname"] = True;
 typeQ["Builtins"]["utf8ToInt"] = True;
 typeQ["Builtins"]["vector"] = True;
 typeQ["Builtins"]["warning"] = True;
 typeQ["Builtins"]["warnings"] = True;
 typeQ["Builtins"]["weekdays"] = True;
 typeQ["Builtins"]["which"] = True;
 typeQ["Builtins"]["which.min"] = True;
 typeQ["Builtins"]["with"] = True;
 typeQ["Builtins"]["withVisible"] = True;
 typeQ["Builtins"]["write"] = True;
 typeQ["Builtins"]["writeLines"] = True;
 typeQ["Builtins"]["xtfrm"] = True;
 typeQ["Builtins"]["zapsmall"] = True;
 typeQ["Builtins"][_] = False;
 typeQ["Brackets"]["["] = True;
 typeQ["Brackets"]["]"] = True;
 typeQ["Brackets"][_] = False;
 typeQ["Parens"]["("] = True;
 typeQ["Parens"][")"] = True;
 typeQ["Parens"][_] = False;
 typeQ["Braces"]["{"] = True;
 typeQ["Braces"]["}"] = True;
 typeQ["Braces"][_] = False;
 typeQ["Numbers"][x_String /; StringMatchQ[x, NumberString]] = True;
 typeQ["Numbers"][_] = False;
 typeQ["Strings"][x_String /; StringMatchQ[x, "\""~~___~~"\""]] = True;
 typeQ["Strings"][_] = False;
 typeQ[_][_] = False;
 

 highlight[tokens_List] := highlight /@ tokens;
 highlight[(x_)?(typeQ["Keywords"])] := (StyleBox[#1, Rule[FontWeight, Bold], Rule[FontColor, RGBColor[0.5`, 0, 0.5`]]] & )[x];
 highlight[(x_)?(typeQ["Operators"])] := (StyleBox[#1, Rule[FontWeight, Bold], Rule[FontColor, RGBColor[0, 0, 0.5`]]] & )[x];
 highlight[(x_)?(typeQ["Builtins"])] := (StyleBox[#1, Rule[FontWeight, Bold], Rule[FontColor, RGBColor[1, 0, 1]]] & )[x];
 highlight[(x_)?(typeQ["Brackets"])] := (StyleBox[#1, Rule[FontWeight, Bold], Rule[FontColor, RGBColor[0.5`, 3, 0]]] & )[x];
 highlight[(x_)?(typeQ["Parens"])] := (StyleBox[#1, Rule[FontWeight, Bold], Rule[FontColor, GrayLevel[0.5`]]] & )[x];
 highlight[(x_)?(typeQ["Braces"])] := (StyleBox[#1, Rule[FontWeight, Bold], Rule[FontColor, RGBColor[0.4`, 0, 0]]] & )[x];
 highlight[(x_)?(typeQ["Numbers"])] := (StyleBox[#1, Rule[FontWeight, Plain], Rule[FontColor, RGBColor[0, 0, 1]]] & )[x];
 highlight[(x_)?(typeQ["Strings"])] := (StyleBox[#1, Rule[FontWeight, Bold], Rule[FontColor, GrayLevel[0.5`]]] & )[x];
 highlight[tok_] := tok;
 

 tokenize[code$_String] := DeleteCases[StringSplit[code$, tok:ShortestMatch["\""~~___~~"\""] | NumberString | (WordCharacter | "_" | ".").. | ":::" | "<<-" | "->>" | "::" | ">=" | "<=" | "<-" | "||" | "==" | "->" | "&&" | "!=" | "$" | ":" | "/" | "?" | ">" | "<" | "|" | "]" | "]" | "}" | "[" | "[" | "{" | "+" | "-" | ")" | "(" | "*" | "&" | "@" | "!" :> tok], ""];
 

 positionByStringPosition[tokens_, pos_Integer] := (If[#1 =!= {}, #1[[1,1]], #1] & )[Position[Accumulate[StringLength /@ tokens], pos]];
 

 forwardMatch[tokens_, tpos_Integer, del:"(" | "[" | "{"] := Module[{i = 0, revdel = del /. {"(" -> ")", "[" -> "]", "{" -> "}"}}, (If[Length[#1] == 2, #1[[2,1]] + tpos - 1, {}] & )[Position[tokens[[tpos ;; All]] /. {del :> i++, revdel :> --i}, 0, 1, 2]]];
 

 backwardMatch[tokens_, tpos_Integer, revdel:")" | "]" | "}"] := Module[{i = 0, del = revdel /. {")" -> "(", "]" -> "[", "}" -> "{"}}, (If[Length[#1] >= 2, #1[[-2,1]], {}] & )[Position[Reverse[Reverse[tokens[[1 ;; tpos]]] /. {revdel :> i++, del :> --i}], 0, 1]]];
 

 bracketMatchHighlight[tokens_, pos_] := Module[{toks = tokens, match = {}, tpos = positionByStringPosition[tokens, pos]}, If[tpos =!= {}, If[MemberQ[{"(", "[", "{"}, toks[[tpos]]], match = forwardMatch[toks, tpos, toks[[tpos]]]];
 If[MemberQ[{")", "]", "}"}, toks[[tpos]]], match = backwardMatch[toks, tpos, toks[[tpos]]]]];
 If[match =!= {}, toks[[{tpos, match}]] = (StyleBox[#1, Rule[FontWeight, Bold], Rule[FontColor, RGBColor[1, 0.5`, 0]]] & ) /@ toks[[{tpos, match}]]];
 toks];
 

 keyAction[transformRuleFunction_, relativePosMove_Integer, actions_] := Module[{nb, cp, a}, nb = EvaluationNotebook[];
 SetOptions[NotebookSelection[nb], ShowSelection -> False];
 cp = "CursorPosition" /. Developer`CellInformation[nb];
 SelectionMove[nb, All, ButtonCell, AutoScroll -> False];
 SetOptions[NotebookSelection[nb], ShowSelection -> False];
 a = NotebookRead[nb];
 NotebookWrite[nb, a /. transformRuleFunction[cp[[1,1]]], All, AutoScroll -> False];
 SetOptions[NotebookSelection[nb], ShowSelection -> False];
 SelectionMove[nb, Previous, Cell, AutoScroll -> False];
 SelectionMove[nb, After, Cell, AutoScroll -> False];
 SelectionMove[nb, After, CellContents, AutoScroll -> False];
 SetOptions[NotebookSelection[nb], CellEventActions -> actions, GeneratedCell -> True, CellAutoOverwrite -> True, ShowSelection -> False];
 With[{sel = NotebookSelection[nb]}, SelectionMove[nb, All, CellContents, AutoScroll -> False];
 SelectionMove[nb, Previous, Character, AutoScroll -> False];
 Do[SelectionMove[nb, Next, Character, AutoScroll -> False], {cp[[1,1]] + relativePosMove}];
 SetOptions[sel, ShowSelection -> True]]];
 

 mouseAction[] := Module[{nb}, nb = EvaluationNotebook[];
 SelectionMove[nb, All, ButtonCell];
 SetOptions[NotebookSelection[nb], ShowSelection -> True];
 ];
 

 cellHighlightRule[postprocessF_] := Cell[body_, "Program", rest___] :> Cell[TextData[postprocessF[StringJoin[Cases[body, _String, {0, Infinity}]]]], "Program", rest];
 

 processQuotes[text_String] := StringReplace[text, {FromCharacterCode[8220] :> "\"", FromCharacterCode[8221] :> "\""}];
 

 HighlightFunction[pos$_Integer] := (highlight[bracketMatchHighlight[#1, pos$]] & )[tokenize[processQuotes[#1]]] & ;
 

 CharacterEnterHighlightFunction[char$_String, pos$_Integer] := (HighlightFunction[pos$][StringInsert[#1, char$, pos$]] & )[#1] & ;
 

 RLink`Private`eventActions = {"LeftArrowKeyDown" :> keyAction[Function[{pos$}, cellHighlightRule[HighlightFunction[pos$]]], -1, RLink`Private`eventActions], "RightArrowKeyDown" :> keyAction[Function[{pos$}, cellHighlightRule[HighlightFunction[pos$ + 1]]], 1, RLink`Private`eventActions], "MouseOver" :> mouseAction[], {"KeyDown", " "} :> keyAction[Function[{pos$}, cellHighlightRule[CharacterEnterHighlightFunction[" ", pos$ + 1]]], 1, RLink`Private`eventActions], Sequence[]};
 

 Options[GetRCell] = {"InitialText" -> "Enter code here"};
 

 GetRCell[(options$___)?OptionQ] := With[{text$ = "InitialText" /. Flatten[{options$}] /. Options[GetRCell]}, Cell[TextData[{text$}], "Program", CellEventActions -> RLink`Private`eventActions, Sequence @@ Flatten[{options$}], Sequence[]]];
 

 End[];
 EndPackage[]