(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     99251,       2181]
NotebookOptionsPosition[     98713,       2161]
NotebookOutlinePosition[     99256,       2182]
CellTagsIndexPosition[     99177,       2177]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 DynamicModuleBox[{$CellContext`image$$, $CellContext`nb$$, \
$CellContext`cell$$}, 
  DynamicModuleBox[{Ribbon`Private`page$$ = None, 
   Ribbon`Private`mouseover$$ = {0}}, 
   TagBox[GridBox[{
      {
       ItemBox[
        TagBox[GridBox[{
           {
            TagBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "ColorFunctionIcon.png"]],
                   ImageSizeCache->{18., {9., 14.}}], "RibbonTabLabel",
                  StripOnInput->False], True->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "ColorFunctionIconHighlight.png"]],
                   ImageSizeCache->{18., {9., 14.}}], "RibbonTabLabelActive",
                  StripOnInput->False]}, Dynamic[
                  FEPrivate`Or[
                   FEPrivate`SameQ[Ribbon`Private`page$$, "ColorFunctionTab"], 
                   FEPrivate`SameQ[Ribbon`Private`mouseover$$, {1}]]]],
                Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "TabAbuttingRightNinePatchAppearance"], 
                  "ColorFunctionTab", 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingRightBottomPressedNinePatchAppearance"], 
                  Blank[], 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingRightBottomNinePatchAppearance"]],
                BaseStyle->{},
                
                ButtonFunction:>(Null; 
                 Ribbon`Private`page$$ = "ColorFunctionTab"),
                DefaultBaseStyle->"RibbonButton",
                Evaluator->Automatic,
                FrameMargins->{{10, 10}, {0, 0}},
                ImageSize->49,
                Method->"Preemptive"],
               DynamicBox[
                FEPrivate`FrontEndResource[
                "Image3DEditModeMenu", "ColorFunctionTooltip"], 
                BaseStyle -> {"TextStyling"}]],
              Annotation[#, 
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "Image3DEditModeMenu", "ColorFunctionTooltip"]], 
                BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {1}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {1}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], 
            TagBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "ClippingIcon.png"]],
                   ImageSizeCache->{20., {9., 14.}}], "RibbonTabLabel",
                  StripOnInput->False], True->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "ClippingIconHighlight.png"]],
                   ImageSizeCache->{20., {9., 14.}}], "RibbonTabLabelActive",
                  StripOnInput->False]}, Dynamic[
                  FEPrivate`Or[
                   FEPrivate`SameQ[Ribbon`Private`page$$, "ClippingTab"], 
                   FEPrivate`SameQ[Ribbon`Private`mouseover$$, {2}]]]],
                Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "TabAbuttingLeftRightNinePatchAppearance"],
                   "ClippingTab", 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomPressedNinePatchAppearance"], 
                  Blank[], 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomNinePatchAppearance"]],
                BaseStyle->{},
                ButtonFunction:>(Null; Ribbon`Private`page$$ = "ClippingTab"),
                DefaultBaseStyle->"RibbonButton",
                Evaluator->Automatic,
                FrameMargins->{{10, 10}, {0, 0}},
                ImageSize->49,
                Method->"Preemptive"],
               DynamicBox[
                FEPrivate`FrontEndResource[
                "Image3DEditModeMenu", "ClippingTooltip"], 
                BaseStyle -> {"TextStyling"}]],
              Annotation[#, 
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "Image3DEditModeMenu", "ClippingTooltip"]], 
                BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {2}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {2}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], 
            TagBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "ViewOptionsIcon.png"]],
                   ImageSizeCache->{19., {9., 14.}}], "RibbonTabLabel",
                  StripOnInput->False], True->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "ViewOptionsIconHighlight.png"]],
                   ImageSizeCache->{19., {9., 14.}}], "RibbonTabLabelActive",
                  StripOnInput->False]}, Dynamic[
                  FEPrivate`Or[
                   FEPrivate`SameQ[Ribbon`Private`page$$, "ViewOptionsTab"], 
                   FEPrivate`SameQ[Ribbon`Private`mouseover$$, {3}]]]],
                Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "TabAbuttingLeftRightNinePatchAppearance"],
                   "ViewOptionsTab", 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomPressedNinePatchAppearance"], 
                  Blank[], 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomNinePatchAppearance"]],
                BaseStyle->{},
                
                ButtonFunction:>(Null; 
                 Ribbon`Private`page$$ = "ViewOptionsTab"),
                DefaultBaseStyle->"RibbonButton",
                Evaluator->Automatic,
                FrameMargins->{{10, 10}, {0, 0}},
                ImageSize->49,
                Method->"Preemptive"],
               DynamicBox[
                FEPrivate`FrontEndResource[
                "Image3DEditModeMenu", "ViewOptionsTooltip"], 
                BaseStyle -> {"TextStyling"}]],
              Annotation[#, 
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "Image3DEditModeMenu", "ViewOptionsTooltip"]], 
                BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {3}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {3}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], 
            TagBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "InformationIcon.png"]],
                   ImageSizeCache->{17., {9., 14.}}], "RibbonTabLabel",
                  StripOnInput->False], True->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "InformationIconHighlight.png"]],
                   ImageSizeCache->{17., {9., 14.}}], "RibbonTabLabelActive",
                  StripOnInput->False]}, Dynamic[
                  FEPrivate`Or[
                   FEPrivate`SameQ[
                   Ribbon`Private`page$$, "ImageInformationTab"], 
                   FEPrivate`SameQ[Ribbon`Private`mouseover$$, {4}]]]],
                Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "TabAbuttingLeftNinePatchAppearance"], 
                  "ImageInformationTab", 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftBottomPressedNinePatchAppearance"], 
                  Blank[], 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftBottomNinePatchAppearance"]],
                BaseStyle->{},
                
                ButtonFunction:>(Null; 
                 Ribbon`Private`page$$ = "ImageInformationTab"),
                DefaultBaseStyle->"RibbonButton",
                Evaluator->Automatic,
                FrameMargins->{{10, 10}, {0, 0}},
                ImageSize->50,
                Method->"Preemptive"],
               DynamicBox[
                FEPrivate`FrontEndResource[
                "Image3DEditModeMenu", "InformationTooltip"], 
                BaseStyle -> {"TextStyling"}]],
              Annotation[#, 
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "Image3DEditModeMenu", "InformationTooltip"]], 
                BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {4}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {4}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], 
            TagBox[
             ButtonBox["\<\"\"\>",
              Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, None, 
                Blank[], 
                FEPrivate`FrontEndResource[
                "FEExpressions", "TabEmptyNinePatchAppearance"]],
              BaseStyle->{ShowStringCharacters -> False},
              ButtonFunction:>Null,
              DefaultBaseStyle->{},
              Enabled->False,
              Evaluator->Automatic,
              FrameMargins->{{0, 0}, {0, 0}},
              
              ImageSize:>FEPrivate`Switch[
               Ribbon`Private`page$$, None, {1, 1}, "ColorFunctionTab", 503, 
                "ClippingTab", 338, "ViewOptionsTab", 338, 
                "ImageInformationTab", 338, 5, 338, 
                Blank[], {1, 1}],
              Method->"Preemptive"],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {5}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {5}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]]}
          },
          AutoDelete->False,
          GridBoxAlignment->{"Rows" -> {{Bottom}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
         "Grid"],
        Alignment->Bottom,
        StripOnInput->False]},
      {
       ItemBox[
        PaneSelectorBox[{None->"\<\"\"\>", "ColorFunctionTab"->
         TagBox[
          TagBox[GridBox[{
             {
              PanelBox[
               TagBox[GridBox[{
                  {
                   PaneBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ColorFunctionTitle"],
                    BaseStyle->{"TextStyling"}], "RibbonTitle",
                    StripOnInput->False]},
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ColorFunctionCaption"],
                    BaseStyle->{"TextStyling"}], "RibbonCaption",
                    StripOnInput->False]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}],
                    "Column"],
                    ImageMargins->{{8, 0}, {5, 5}}], 
                   ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                   ItemBox[
                    ButtonBox[
                    PaneSelectorBox[{False->
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, "Close.png"]]],
                     True->
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "Close-Hover.png"]]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    ButtonFunction:>(Ribbon`Private`page$$ = None),
                    ContentPadding->False,
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->{{0, 8}, {8, 4}},
                    Method->"Preemptive"],
                    Alignment->Center,
                    StripOnInput->False]}
                 },
                 AutoDelete->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Left, Left, Right}, "Rows" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                 GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                "Grid"],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentTitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->700]},
             {
              PanelBox[
               PaneBox[
                DynamicBox[ToBoxes[
                  If[ImageChannels[
                    $CellContext`image$$[]] === 1, 
                   Image`ColorFunctionEditorInline[
                    Dynamic[
                    $CellContext`image$$[]], True], 
                   Pane[
                    Column[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ColorFunctionSingleChannel"]], 
                    BaseStyle -> {"TextStyling"}], "", 
                    StringForm[
                    FrontEndResource[
                    "Image3DEditModeMenu", "ColorFunctionChannelCount"], 
                    ImageChannels[
                    $CellContext`image$$[]]]}, Alignment -> Center], 
                    ImageSize -> {Full, 100}, Alignment -> Center]], 
                  StandardForm],
                 CachedValue:>PaneBox[
                   InterpretationBox[
                    StyleBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "NecklaceAnimator"][Medium]], 
                    AnimatorBoxOptions -> {}], 
                    Animator[Appearance -> "Necklace"], 
                    BaseStyle -> {"Deploy"}], ImageSize -> Full, Alignment -> 
                   Center],
                 SynchronousUpdating->False,
                 TrackedSymbols:>{}],
                FrameMargins->10],
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentAreaGradient.9.png"]},
               DefaultBaseStyle->{},
               ImageSize->700]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
           "Column"],
          Deploy,
          DefaultBaseStyle->"Deploy"], "ClippingTab"->
         TagBox[
          TagBox[GridBox[{
             {
              PanelBox[
               TagBox[GridBox[{
                  {
                   PaneBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingTitle"],
                    BaseStyle->{"TextStyling"}], "RibbonTitle",
                    StripOnInput->False]},
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingCaption"],
                    BaseStyle->{"TextStyling"}], "RibbonCaption",
                    StripOnInput->False]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}],
                    "Column"],
                    ImageMargins->{{8, 0}, {5, 5}}], 
                   ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                   ItemBox[
                    ButtonBox[
                    PaneSelectorBox[{False->
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, "Close.png"]]],
                     True->
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "Close-Hover.png"]]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    ButtonFunction:>(Ribbon`Private`page$$ = None),
                    ContentPadding->False,
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->{{0, 8}, {8, 4}},
                    Method->"Preemptive"],
                    Alignment->Center,
                    StripOnInput->False]}
                 },
                 AutoDelete->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Left, Left, Right}, "Rows" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                 GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                "Grid"],
               Alignment->{Left, Center},
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentTitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->535]},
             {
              PanelBox[
               PaneBox[
                
                DynamicModuleBox[{$CellContext`plotRange$$, \
$CellContext`vec1$$, $CellContext`vec2$$, $CellContext`vec3$$, \
$CellContext`show$$ = {}, $CellContext`lock$$ = {
                 False, False, False, False, False, 
                  False}, $CellContext`xyzControls$$, \
$CellContext`vecControls$$}, 
                 
                 DynamicBox[
                  ToBoxes[$CellContext`show$$; $CellContext`lock$$; \
$CellContext`vec1$$; $CellContext`vec2$$; $CellContext`vec3$$; Column[{
                    If[$CellContext`show$$ === {}, "", 
                    Grid[{
                    Map[Item[#, Alignment -> Center]& , {
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingOrientation"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingPosition"]], 
                    BaseStyle -> {"TextStyling"}], "", "", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingShowPlane"]], 
                    BaseStyle -> {"TextStyling"}], ""}], 
                    Apply[Sequence, 
                    MapIndexed[Switch[#, 1, 
                    $CellContext`xyzControls$$[
                    FrontEnd`AttachedCellParent[], #, #2, 
                    Append[
                    Part[$CellContext`plotRange$$, 1], 1], 1, 1, 2, 
                    Dynamic[$CellContext`show$$], 
                    Dynamic[
                    Part[$CellContext`lock$$, 1]]], 2, 
                    $CellContext`xyzControls$$[
                    FrontEnd`AttachedCellParent[], #, #2, 
                    Append[
                    Part[$CellContext`plotRange$$, 2], 1], 2, 3, 4, 
                    Dynamic[$CellContext`show$$], 
                    Dynamic[
                    Part[$CellContext`lock$$, 2]]], 3, 
                    $CellContext`xyzControls$$[
                    FrontEnd`AttachedCellParent[], #, #2, 
                    Append[
                    Part[$CellContext`plotRange$$, 3], 1], 3, 5, 6, 
                    Dynamic[$CellContext`show$$], 
                    Dynamic[
                    Part[$CellContext`lock$$, 3]]], 4, 
                    $CellContext`vecControls$$[
                    
                    FrontEnd`AttachedCellParent[], #, #2, \
$CellContext`plotRange$$, 1, 2, 
                    Dynamic[$CellContext`vec1$$], 
                    Dynamic[$CellContext`show$$], 
                    Dynamic[
                    Part[$CellContext`lock$$, 4]]], 5, 
                    $CellContext`vecControls$$[
                    
                    FrontEnd`AttachedCellParent[], #, #2, \
$CellContext`plotRange$$, 3, 4, 
                    Dynamic[$CellContext`vec2$$], 
                    Dynamic[$CellContext`show$$], 
                    Dynamic[
                    Part[$CellContext`lock$$, 5]]], 6, 
                    $CellContext`vecControls$$[
                    
                    FrontEnd`AttachedCellParent[], #, #2, \
$CellContext`plotRange$$, 5, 6, 
                    Dynamic[$CellContext`vec3$$], 
                    Dynamic[$CellContext`show$$], 
                    Dynamic[
                    Part[$CellContext`lock$$, 6]]]]& , $CellContext`show$$]]},
                     Dividers -> {None, Center, 2 -> False}, FrameStyle -> 
                    LightGray, ItemStyle -> {Automatic, {Bold}}, 
                    Alignment -> {Left, Center}]], 
                    Button[
                    Grid[{{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "Plus.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingNewPlanes"]], 
                    BaseStyle -> {"TextStyling"}]}}], 
                    With[{$CellContext`available$ = Complement[
                    Range[6], $CellContext`show$$]}, 
                    If[$CellContext`available$ === {}, 
                    Beep[], 
                    AppendTo[$CellContext`show$$, 
                    First[$CellContext`available$]]]], ImageSize -> Automatic,
                     Enabled -> Sort[$CellContext`show$$] =!= Range[6], 
                    BaseStyle -> {}, DefaultBaseStyle -> {}, Appearance :> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"], 
                    FrameMargins -> {{4, 4}, {0, 0}}]}], StandardForm],
                  
                  TrackedSymbols:>{$CellContext`show$$, $CellContext`lock$$, \
$CellContext`vec1$$, $CellContext`vec2$$, $CellContext`vec3$$}],
                 
                 DynamicModuleValues:>{{
                   DownValues[$CellContext`xyzControls$$] = {HoldPattern[
                    $CellContext`xyzControls$$[
                    Pattern[$CellContext`box$, 
                    Blank[]], 
                    Pattern[$CellContext`n$, 
                    Blank[]], {
                    Pattern[$CellContext`index$, 
                    Blank[]]}, {
                    Pattern[$CellContext`min$, 
                    Blank[]], 
                    Pattern[$CellContext`max$, 
                    Blank[]], 
                    Pattern[$CellContext`step$, 
                    Blank[]]}, 
                    Pattern[$CellContext`i$, 
                    Blank[]], 
                    Pattern[$CellContext`j$, 
                    Blank[]], 
                    Pattern[$CellContext`k$, 
                    Blank[]], 
                    Dynamic[
                    Pattern[$CellContext`show$, 
                    Blank[]]], 
                    Dynamic[
                    Pattern[$CellContext`locked$, 
                    Blank[]]]]] :> {
                    PopupMenu[
                    
                    Dynamic[$CellContext`n$, (
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRange", $CellContext`i$}] = \
{$CellContext`min$, $CellContext`max$}; 
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRangeClipPlanesStyle", \
$CellContext`j$}] = None; 
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRangeClipPlanesStyle", \
$CellContext`k$}] = None; 
                    Part[$CellContext`show$, $CellContext`index$] = #)& ], 
                    DeleteCases[{1 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionX"]], 
                    BaseStyle -> {"TextStyling"}], Red], 2 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionY"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Darker[Green]], 3 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionZ"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Darker[Blue]], 4 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionCustom"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Darker[Purple]], 5 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionCustom"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Darker[Orange]], 6 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionCustom"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Darker[Magenta]]}, 
                    Blank[][
                    Apply[Alternatives, 
                    DeleteCases[$CellContext`show$, $CellContext`n$]], 
                    Blank[]]], DefaultBaseStyle -> {}, 
                    DefaultMenuStyle -> {}], {
                    Slider[
                    Dynamic[
                    
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRange", $CellContext`i$, 
                    1}]], {$CellContext`min$, $CellContext`max$, \
$CellContext`step$}], 
                    Slider[
                    Dynamic[
                    
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRange", $CellContext`i$, 
                    2}]], {$CellContext`min$, $CellContext`max$, \
$CellContext`step$}]}; PaneSelector[{False -> IntervalSlider[
                    Dynamic[
                    
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRange", $CellContext`i$}]], \
{$CellContext`min$, $CellContext`max$, $CellContext`step$}, Method -> "Push", 
                    MinIntervalSize -> $CellContext`step$], True -> 
                    IntervalSlider[
                    Dynamic[
                    
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRange", $CellContext`i$}]], \
{$CellContext`min$, $CellContext`max$, $CellContext`step$}, Method -> 
                    "FixedInterval"]}, 
                    Dynamic[$CellContext`locked$], ImageSize -> Automatic], 
                    PaneSelector[{False -> Experimental`IntervalStepper[
                    Dynamic[
                    
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRange", $CellContext`i$}]], \
{$CellContext`min$, $CellContext`max$, $CellContext`step$}, Method -> "Push", 
                    MinIntervalSize -> $CellContext`step$], True -> 
                    Experimental`IntervalStepper[
                    Dynamic[
                    
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRange", $CellContext`i$}]], \
{$CellContext`min$, $CellContext`max$, $CellContext`step$}, Method -> 
                    "FixedInterval"]}, 
                    Dynamic[$CellContext`locked$], ImageSize -> Automatic], 
                    Toggler[
                    Dynamic[$CellContext`locked$], {True -> Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "Locked.png"]]]], False -> Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "Unlocked.png"]]]]}, Alignment -> Bottom], 
                    Checkbox[
                    Dynamic[
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRangeClipPlanesStyle", \
$CellContext`j$}] === Automatic, 
                    If[#, CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRangeClipPlanesStyle", \
$CellContext`j$}] = Automatic; 
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRangeClipPlanesStyle", \
$CellContext`k$}] = Automatic, 
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRangeClipPlanesStyle", \
$CellContext`j$}] = None; CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRangeClipPlanesStyle", \
$CellContext`k$}] = None]& ]], 
                    Button[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "Close-Small.png"]]]], 
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRange", $CellContext`i$}] = \
{$CellContext`min$, $CellContext`max$}; 
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRangeClipPlanesStyle", \
$CellContext`j$}] = None; 
                    CurrentValue[$CellContext`box$, {
                    "Raster3DBoxOptionsPlotRangeClipPlanesStyle", \
$CellContext`k$}] = None; $CellContext`show$ = 
                    Delete[$CellContext`show$, $CellContext`index$], 
                    Appearance -> None]}}}, {
                   DownValues[$CellContext`vecControls$$] = {HoldPattern[
                    $CellContext`vecControls$$[
                    Pattern[$CellContext`box$, 
                    Blank[]], 
                    Pattern[$CellContext`n$, 
                    Blank[]], {
                    Pattern[$CellContext`index$, 
                    Blank[]]}, 
                    Pattern[$CellContext`plotRange$, 
                    Blank[]], 
                    Pattern[$CellContext`i$, 
                    Blank[]], 
                    Pattern[$CellContext`j$, 
                    Blank[]], 
                    Dynamic[
                    Pattern[$CellContext`vec$, 
                    Blank[]]], 
                    Dynamic[
                    Pattern[$CellContext`show$, 
                    Blank[]]], 
                    Dynamic[
                    Pattern[$CellContext`locked$, 
                    Blank[]]]]] :> 
                    Module[{$CellContext`aa$}, $CellContext`aa$ = 
                    Table[-Dot[$CellContext`vec$, 
                    Part[
                    
                    Tuples[$CellContext`plotRange$], $CellContext`t]], \
{$CellContext`t, 8}]; With[{$CellContext`min$ = -
                    Max[$CellContext`aa$], $CellContext`max$ = -
                    Min[$CellContext`aa$], $CellContext`step$ = (-
                    Min[$CellContext`aa$] - -Max[$CellContext`aa$])/30.}, {
                    Column[{
                    PopupMenu[
                    
                    Dynamic[$CellContext`n$, (
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`i$}] = 
                    Append[$CellContext`vec$, $CellContext`min$]; 
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`j$}] = 
                    Append[-$CellContext`vec$, $CellContext`max$]; 
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanesStyle", $CellContext`i$}] = 
                    None; CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanesStyle", $CellContext`j$}] = 
                    None; Part[$CellContext`show$, $CellContext`index$] = #)& \
], 
                    DeleteCases[{1 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionX"]], 
                    BaseStyle -> {"TextStyling"}], Red], 2 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionY"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Darker[Green]], 3 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionZ"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Darker[Blue]], 4 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionCustom"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Darker[Purple]], 5 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionCustom"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Darker[Orange]], 6 -> Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ClippingDirectionCustom"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Darker[Magenta]]}, 
                    Blank[][
                    Apply[Alternatives, 
                    DeleteCases[$CellContext`show$, $CellContext`n$]], 
                    Blank[]]], DefaultBaseStyle -> {}, 
                    DefaultMenuStyle -> {}], 
                    Grid[{{"x", 
                    InputField[
                    Dynamic[
                    Part[$CellContext`vec$, 1], If[
                    NumericQ[#], Part[$CellContext`vec$, 1] = #]& ], Number, 
                    FieldSize -> {{3, 3}, {1, 1}}], "y", 
                    InputField[
                    Dynamic[
                    Part[$CellContext`vec$, 2], If[
                    NumericQ[#], Part[$CellContext`vec$, 2] = #]& ], Number, 
                    FieldSize -> {{3, 3}, {1, 1}}], "z", 
                    InputField[
                    Dynamic[
                    Part[$CellContext`vec$, 3], If[
                    NumericQ[#], Part[$CellContext`vec$, 3] = #]& ], Number, 
                    FieldSize -> {{3, 3}, {1, 1}}]}}, 
                    Spacings -> {{0.8, 0.2, 0.8, 0.2, 0.8, 0.2, 0.8}, 0}]}, 
                    BaselinePosition -> {1, 1}], 
                    PaneSelector[{False -> IntervalSlider[
                    Dynamic[{-1, 1} {
                    
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`i$, 4}], 
                    
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`j$, 4}]}, 
                    Function[
                    Null, {CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`i$, 4}] = -
                    First[#], CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`j$, 4}] = 
                    Last[#]}, 
                    HoldRest]], {$CellContext`min$, $CellContext`max$, \
$CellContext`step$}, Method -> "Push", MinIntervalSize -> $CellContext`step$],
                     True -> IntervalSlider[
                    Dynamic[{-1, 1} {
                    
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`i$, 4}], 
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`j$, 4}]}, 
                    Function[
                    Null, {CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`i$, 4}] = -
                    First[#], CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`j$, 4}] = 
                    Last[#]}, 
                    HoldRest]], {$CellContext`min$, $CellContext`max$, \
$CellContext`step$}, Method -> "FixedInterval"]}, 
                    Dynamic[$CellContext`locked$], ImageSize -> Automatic], 
                    PaneSelector[{False -> Experimental`IntervalStepper[
                    Dynamic[{-1, 1} {
                    
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`i$, 4}], 
                    
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`j$, 4}]}, 
                    Function[
                    Null, {CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`i$, 4}] = -
                    First[#], CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`j$, 4}] = 
                    Last[#]}, 
                    HoldRest]], {$CellContext`min$, $CellContext`max$, \
$CellContext`step$}, Method -> "Push", MinIntervalSize -> $CellContext`step$],
                     True -> Experimental`IntervalStepper[
                    Dynamic[{-1, 1} {
                    
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`i$, 4}], 
                    
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`j$, 4}]}, 
                    Function[
                    Null, {CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`i$, 4}] = -
                    First[#], CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`j$, 4}] = 
                    Last[#]}, 
                    HoldRest]], {$CellContext`min$, $CellContext`max$, \
$CellContext`step$}, Method -> "FixedInterval"]}, 
                    Dynamic[$CellContext`locked$], ImageSize -> Automatic], 
                    Toggler[
                    Dynamic[$CellContext`locked$], {True -> Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "Locked.png"]]]], False -> Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "Unlocked.png"]]]]}, Alignment -> Bottom], 
                    Checkbox[
                    Dynamic[
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanesStyle", $CellContext`i$}] === 
                    Automatic, 
                    If[#, CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanesStyle", $CellContext`i$}] = 
                    Automatic; 
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanesStyle", $CellContext`j$}] = 
                    Automatic, 
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanesStyle", $CellContext`i$}] = 
                    None; CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanesStyle", $CellContext`j$}] = 
                    None]& ]], 
                    Button[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "Close-Small.png"]]]], 
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`i$}] = 
                    Append[$CellContext`vec$, $CellContext`min$]; 
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanes", $CellContext`j$}] = 
                    Append[-$CellContext`vec$, $CellContext`max$]; 
                    CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanesStyle", $CellContext`i$}] = 
                    None; CurrentValue[$CellContext`box$, {
                    "Graphics3DBoxOptionsClipPlanesStyle", $CellContext`j$}] = 
                    None; $CellContext`show$ = 
                    Delete[$CellContext`show$, $CellContext`index$], 
                    Appearance -> None]}]]}}},
                 
                 Initialization:>
                  Module[{$CellContext`tmp$, $CellContext`aa$, \
$CellContext`bb$, $CellContext`cc$, $CellContext`userclips$, \
$CellContext`defaultvecs$}, $CellContext`plotRange$$ = AbsoluteCurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "Graphics3DBoxOptionsPlotRange"]; If[
                    Not[
                    MatchQ[$CellContext`plotRange$$, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]], $CellContext`plotRange$$ = Cases[
                    ToBoxes[
                    $CellContext`image$$[]], Blank[][PlotRange, 
                    Pattern[$CellContext`r, {
                    Repeated[{
                    Blank[], 
                    Blank[]}]}]] :> $CellContext`r, Infinity]; 
                    If[$CellContext`plotRange$$ === {}, \
$CellContext`plotRange$$ = {{0, 100}, {0, 100}, {0, 
                    100}}, $CellContext`plotRange$$ = 
                    First[$CellContext`plotRange$$]]; CurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "Graphics3DBoxOptionsPlotRange"] = \
$CellContext`plotRange$$]; If[
                    Not[
                    MatchQ[$CellContext`userclips$ = AbsoluteCurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "Raster3DBoxOptionsPlotRange"], {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]], CurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "Raster3DBoxOptionsPlotRange"] = \
$CellContext`plotRange$$]; If[
                    Not[
                    MatchQ[
                    AbsoluteCurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "Raster3DBoxOptionsPlotRangeClipPlanesStyle"], {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[]}]], CurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "Raster3DBoxOptionsPlotRangeClipPlanesStyle"] = 
                    Table[None, {6}]]; $CellContext`vec1$$ = {0, 1, 
                    1}; $CellContext`vec2$$ = {1, 0, 
                    1}; $CellContext`vec3$$ = {1, 1, 0}; $CellContext`aa$ = 
                    Table[-Dot[$CellContext`vec1$$, 
                    Part[
                    
                    Tuples[$CellContext`plotRange$$], $CellContext`t]], \
{$CellContext`t, 8}]; $CellContext`bb$ = Table[-Dot[$CellContext`vec2$$, 
                    Part[
                    
                    Tuples[$CellContext`plotRange$$], $CellContext`t]], \
{$CellContext`t, 8}]; $CellContext`cc$ = Table[-Dot[$CellContext`vec3$$, 
                    Part[
                    
                    Tuples[$CellContext`plotRange$$], $CellContext`t]], \
{$CellContext`t, 8}]; $CellContext`defaultvecs$ = {{$CellContext`vec1$$, 
                    Min[$CellContext`aa$], 
                    Max[$CellContext`aa$]}, {$CellContext`vec2$$, 
                    Min[$CellContext`bb$], 
                    Max[$CellContext`bb$]}, {$CellContext`vec3$$, 
                    Min[$CellContext`cc$], 
                    Max[$CellContext`cc$]}}; $CellContext`tmp$ = 
                    AbsoluteCurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "Graphics3DBoxOptionsClipPlanes"]; If[
                    MatchQ[$CellContext`tmp$, 
                    Condition[{{
                    Pattern[$CellContext`x1, 
                    Blank[]], 
                    Pattern[$CellContext`y1, 
                    Blank[]], 
                    Pattern[$CellContext`z1, 
                    Blank[]], 
                    Pattern[$CellContext`t1, 
                    Blank[]]}, {
                    Pattern[$CellContext`x2, 
                    Blank[]], 
                    Pattern[$CellContext`y2, 
                    Blank[]], 
                    Pattern[$CellContext`z2, 
                    Blank[]], 
                    Pattern[$CellContext`t2, 
                    Blank[]]}, 
                    
                    BlankNullSequence[]}, {$CellContext`x1, $CellContext`y1, \
$CellContext`z1} == -{$CellContext`x2, $CellContext`y2, $CellContext`z2}]], \
$CellContext`vec1$$ = Extract[$CellContext`tmp$, {{1, 1}, {1, 2}, {1, 
                    3}}]; $CellContext`aa$ = -
                    Extract[$CellContext`tmp$, {{1, 4}, {2, 4}}]; Null]; If[
                    MatchQ[$CellContext`tmp$, 
                    Condition[{
                    Blank[], 
                    Blank[], {
                    Pattern[$CellContext`x1, 
                    Blank[]], 
                    Pattern[$CellContext`y1, 
                    Blank[]], 
                    Pattern[$CellContext`z1, 
                    Blank[]], 
                    Pattern[$CellContext`t1, 
                    Blank[]]}, {
                    Pattern[$CellContext`x2, 
                    Blank[]], 
                    Pattern[$CellContext`y2, 
                    Blank[]], 
                    Pattern[$CellContext`z2, 
                    Blank[]], 
                    Pattern[$CellContext`t2, 
                    Blank[]]}, 
                    
                    BlankNullSequence[]}, {$CellContext`x1, $CellContext`y1, \
$CellContext`z1} == -{$CellContext`x2, $CellContext`y2, $CellContext`z2}]], \
$CellContext`vec2$$ = Extract[$CellContext`tmp$, {{3, 1}, {3, 2}, {3, 
                    3}}]; $CellContext`bb$ = -
                    Extract[$CellContext`tmp$, {{3, 4}, {4, 4}}]; Null]; If[
                    MatchQ[$CellContext`tmp$, 
                    Condition[{
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[], {
                    Pattern[$CellContext`x1, 
                    Blank[]], 
                    Pattern[$CellContext`y1, 
                    Blank[]], 
                    Pattern[$CellContext`z1, 
                    Blank[]], 
                    Pattern[$CellContext`t1, 
                    Blank[]]}, {
                    Pattern[$CellContext`x2, 
                    Blank[]], 
                    Pattern[$CellContext`y2, 
                    Blank[]], 
                    Pattern[$CellContext`z2, 
                    Blank[]], 
                    Pattern[$CellContext`t2, 
                    
                    Blank[]]}}, {$CellContext`x1, $CellContext`y1, \
$CellContext`z1} == -{$CellContext`x2, $CellContext`y2, $CellContext`z2}]], \
$CellContext`vec3$$ = Extract[$CellContext`tmp$, {{5, 1}, {5, 2}, {5, 
                    3}}]; $CellContext`cc$ = -
                    Extract[$CellContext`tmp$, {{5, 4}, {6, 4}}]; Null]; 
                   CurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "Graphics3DBoxOptionsClipPlanes"] = {
                    Append[$CellContext`vec1$$, -Max[$CellContext`aa$]], 
                    Append[-$CellContext`vec1$$, -Min[$CellContext`aa$]], 
                    Append[$CellContext`vec2$$, -Max[$CellContext`bb$]], 
                    Append[-$CellContext`vec2$$, -Min[$CellContext`bb$]], 
                    Append[$CellContext`vec3$$, -Max[$CellContext`cc$]], 
                    Append[-$CellContext`vec3$$, -Min[$CellContext`cc$]]}; 
                   CurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "Graphics3DBoxOptionsClipPlanesStyle"] = 
                    Table[None, {6}]; $CellContext`show$$ = {}; If[
                    And[
                    MatchQ[$CellContext`userclips$, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}], 
                    MatchQ[$CellContext`plotRange$$, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]], 
                    If[Part[$CellContext`userclips$, 1] != 
                    Part[$CellContext`plotRange$$, 1], 
                    AppendTo[$CellContext`show$$, 1]]; 
                    If[Part[$CellContext`userclips$, 2] != 
                    Part[$CellContext`plotRange$$, 2], 
                    AppendTo[$CellContext`show$$, 2]]; 
                    If[Part[$CellContext`userclips$, 3] != 
                    Part[$CellContext`plotRange$$, 3], 
                    AppendTo[$CellContext`show$$, 3]]; Null]; 
                   If[Part[$CellContext`defaultvecs$, 
                    1] != {$CellContext`vec1$$, 
                    Min[$CellContext`aa$], 
                    Max[$CellContext`aa$]}, 
                    AppendTo[$CellContext`show$$, 4]]; 
                   If[Part[$CellContext`defaultvecs$, 
                    2] != {$CellContext`vec2$$, 
                    Min[$CellContext`bb$], 
                    Max[$CellContext`bb$]}, 
                    AppendTo[$CellContext`show$$, 5]]; 
                   If[Part[$CellContext`defaultvecs$, 
                    3] != {$CellContext`vec3$$, 
                    Min[$CellContext`cc$], 
                    Max[$CellContext`cc$]}, 
                    AppendTo[$CellContext`show$$, 6]]; 
                   If[$CellContext`show$$ === {}, $CellContext`show$$ = {3}]; 
                   Null]],
                FrameMargins->10],
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentAreaGradient.9.png"]},
               DefaultBaseStyle->{},
               ImageSize->535]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
           "Column"],
          Deploy,
          DefaultBaseStyle->"Deploy"], "ViewOptionsTab"->
         TagBox[
          TagBox[GridBox[{
             {
              PanelBox[
               TagBox[GridBox[{
                  {
                   PaneBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewOptionsTitle"],
                    BaseStyle->{"TextStyling"}], "RibbonTitle",
                    StripOnInput->False]},
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewOptionsCaption"],
                    BaseStyle->{"TextStyling"}], "RibbonCaption",
                    StripOnInput->False]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}],
                    "Column"],
                    ImageMargins->{{8, 0}, {5, 5}}], 
                   ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                   ItemBox[
                    ButtonBox[
                    PaneSelectorBox[{False->
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, "Close.png"]]],
                     True->
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "Close-Hover.png"]]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    ButtonFunction:>(Ribbon`Private`page$$ = None),
                    ContentPadding->False,
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->{{0, 8}, {8, 4}},
                    Method->"Preemptive"],
                    Alignment->Center,
                    StripOnInput->False]}
                 },
                 AutoDelete->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Left, Left, Right}, "Rows" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                 GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                "Grid"],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentTitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->535]},
             {
              PanelBox[
               PaneBox[
                StyleBox[
                 TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewPoint"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold]},
                    {
                    TagBox[GridBox[{
                    {
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image3D"}, 
                    "ViewOptionsIcon.png"]]], 
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewPointDefault"],
                    BaseStyle->{"TextStyling"}]}
                    },
                    AutoDelete->False,
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>FrontEnd`Private`Image3DEditingSetOption[
                    ButtonNotebook[], 
                    Dynamic[$CellContext`image$$], {
                    ViewPoint -> Inherited, ViewVertical -> Inherited}],
                    Evaluator->Automatic,
                    FrameMargins->{{15, 15}, {1, 1}},
                    Method->"Preemptive"], 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewPointTop"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>FrontEnd`Private`Image3DEditingSetOption[
                    ButtonNotebook[], 
                    Dynamic[$CellContext`image$$], {
                    ViewPoint -> Top, ViewVertical -> Inherited}],
                    Evaluator->Automatic,
                    FrameMargins->{{15, 15}, {1, 1}},
                    Method->"Preemptive"], 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewPointFront"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>FrontEnd`Private`Image3DEditingSetOption[
                    ButtonNotebook[], 
                    Dynamic[$CellContext`image$$], {
                    ViewPoint -> Front, ViewVertical -> Inherited}],
                    Evaluator->Automatic,
                    FrameMargins->{{15, 15}, {1, 1}},
                    Method->"Preemptive"], 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewPointLeft"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>FrontEnd`Private`Image3DEditingSetOption[
                    ButtonNotebook[], 
                    Dynamic[$CellContext`image$$], {
                    ViewPoint -> Left, ViewVertical -> Inherited}],
                    Evaluator->Automatic,
                    FrameMargins->{{15, 15}, {1, 1}},
                    Method->"Preemptive"]},
                    {"\[SpanFromAbove]", 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewPointBottom"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>FrontEnd`Private`Image3DEditingSetOption[
                    ButtonNotebook[], 
                    Dynamic[$CellContext`image$$], {
                    ViewPoint -> Bottom, ViewVertical -> Inherited}],
                    Evaluator->Automatic,
                    FrameMargins->{{15, 15}, {1, 1}},
                    Method->"Preemptive"], 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewPointBack"],
                    BaseStyle->{"TextStyling"}],
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>FrontEnd`Private`Image3DEditingSetOption[
                    ButtonNotebook[], 
                    Dynamic[$CellContext`image$$], {
                    ViewPoint -> Back, ViewVertical -> Inherited}],
                    Evaluator->Automatic,
                    FrameMargins->{{15, 15}, {1, 1}},
                    Method->"Preemptive"], 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewPointRight"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>FrontEnd`Private`Image3DEditingSetOption[
                    ButtonNotebook[], 
                    Dynamic[$CellContext`image$$], {
                    ViewPoint -> Right, ViewVertical -> Inherited}],
                    Evaluator->Automatic,
                    FrameMargins->{{15, 15}, {1, 1}},
                    Method->"Preemptive"]}
                    },
                    AutoDelete->False,
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Center}}, "Rows" -> {{Center}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{1}}, "Rows" -> {{1}}}],
                    "Grid"]}
                   },
                   DefaultBaseStyle->"Column",
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
                  "Column"], "RibbonText",
                 StripOnInput->False],
                ImageMargins->{{8, 0}, {6, 5}}],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentSubtitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->535]},
             {
              PanelBox[
               PaneBox[
                
                DynamicModuleBox[{$CellContext`bratio$$, $CellContext`brx$$, \
$CellContext`bry$$, $CellContext`brz$$, $CellContext`vratio$$, \
$CellContext`vrx$$, $CellContext`vry$$, $CellContext`vrz$$, \
$CellContext`setBoxRatio$$, $CellContext`boxRatioToVoxelRatio$$, \
$CellContext`voxelRatioToBoxRatio$$, $CellContext`initBoxRatios$$, \
$CellContext`dimx$$, $CellContext`dimy$$, $CellContext`dimz$$, \
$CellContext`boxed$$}, 
                 TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewRelativeSize"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold]},
                    {
                    TagBox[GridBox[{
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewBoxRatio"],
                    BaseStyle->{"TextStyling"}], 
                    
                    PopupMenuBox[
                    Dynamic[$CellContext`bratio$$, (
                    Switch[$CellContext`bratio$$ = #, 
                    "Default", $CellContext`vratio$$ = 
                    "Default"; {$CellContext`vrx$$, $CellContext`vry$$, \
$CellContext`vrz$$} = {1, 1, 
                    1}; {$CellContext`brx$$, $CellContext`bry$$, \
$CellContext`brz$$} = \
$CellContext`voxelRatioToBoxRatio$$[{$CellContext`vrx$$, $CellContext`vry$$, \
$CellContext`vrz$$}], "1:1:1", $CellContext`vratio$$ = 
                    "Custom"; {$CellContext`brx$$, $CellContext`bry$$, \
$CellContext`brz$$} = {1, 1, 
                    1}; {$CellContext`vrx$$, $CellContext`vry$$, \
$CellContext`vrz$$} = \
$CellContext`boxRatioToVoxelRatio$$[{$CellContext`brx$$, $CellContext`bry$$, \
$CellContext`brz$$}], "Custom", $CellContext`vratio$$ = 
                    "Custom"]; \
$CellContext`setBoxRatio$$[{$CellContext`brx$$, $CellContext`bry$$, \
$CellContext`brz$$}])& ], {"Default"->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewRatioDefault"],
                    BaseStyle->{"TextStyling"}], "1:1:1"->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewRatio1:1:1"],
                    BaseStyle->{"TextStyling"}], "Custom"->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewRatioCustom"],
                    BaseStyle->{"TextStyling"}]},
                    BaseStyle->"RibbonText",
                    MenuStyle->"RibbonText"], 
                    PaneSelectorBox[{False->"\<\"\"\>", True->
                    TagBox[GridBox[{
                    {
                    TemplateBox[{10},
                    "Spacer1"], "\<\"x\"\>", 
                    InputFieldBox[Dynamic[
                    Round[$CellContext`brx$$, 0.01], If[
                    
                    Positive[#], $CellContext`brx$$ = #; $CellContext`vrx$$ = \
#/$CellContext`dimx$$; $CellContext`setBoxRatio$$[{$CellContext`brx$$, \
$CellContext`bry$$, $CellContext`brz$$}]]& ], Number,
                    FieldSize->{{5, 5}, {1, 1}}], "\<\"y\"\>", 
                    InputFieldBox[Dynamic[
                    Round[$CellContext`bry$$, 0.01], If[
                    
                    Positive[#], $CellContext`bry$$ = #; $CellContext`vry$$ = \
#/$CellContext`dimy$$; $CellContext`setBoxRatio$$[{$CellContext`brx$$, \
$CellContext`bry$$, $CellContext`brz$$}]]& ], Number,
                    FieldSize->{{5, 5}, {1, 1}}], "\<\"z\"\>", 
                    InputFieldBox[Dynamic[
                    Round[$CellContext`brz$$, 0.01], If[
                    
                    Positive[#], $CellContext`brz$$ = #; $CellContext`vrz$$ = \
#/$CellContext`dimz$$; $CellContext`setBoxRatio$$[{$CellContext`brx$$, \
$CellContext`bry$$, $CellContext`brz$$}]]& ], Number,
                    FieldSize->{{5, 5}, {1, 1}}]}
                    },
                    AutoDelete->False,
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"]}, Dynamic[$CellContext`bratio$$ === "Custom"],
                    ImageSize->Automatic], 
                    ItemBox[
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewResetButton"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    
                    ButtonFunction:>({$CellContext`brx$$, $CellContext`bry$$, \
$CellContext`brz$$} = $CellContext`initBoxRatios$$; {$CellContext`vrx$$, \
$CellContext`vry$$, $CellContext`vrz$$} = \
$CellContext`boxRatioToVoxelRatio$$[$CellContext`initBoxRatios$$]; Which[
                    
                    TrueQ[{$CellContext`vrx$$, $CellContext`vrz$$, \
$CellContext`vrz$$} == {1, 1, 
                    1}], $CellContext`bratio$$ = ($CellContext`vratio$$ = 
                    "Default"), 
                    
                    TrueQ[{$CellContext`brx$$, $CellContext`bry$$, \
$CellContext`brz$$} == {1, 1, 1}], $CellContext`bratio$$ = 
                    "1:1:1"; $CellContext`vratio$$ = "Custom", 
                    True, $CellContext`bratio$$ = ($CellContext`vratio$$ = 
                    "Custom")]; \
$CellContext`setBoxRatio$$[$CellContext`initBoxRatios$$]),
                    Evaluator->Automatic,
                    FrameMargins->{{15, 15}, {1, 1}},
                    ImageSize->Automatic,
                    Method->"Preemptive"],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewResetButtonTooltip"], 
                    BaseStyle -> {"TextStyling"}]],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewResetButtonTooltip"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
                    Alignment->{Right, Bottom},
                    ItemSize->Fit,
                    StripOnInput->False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewVoxelRatio"],
                    BaseStyle->{"TextStyling"}], 
                    
                    PopupMenuBox[
                    Dynamic[$CellContext`vratio$$, (
                    Switch[$CellContext`vratio$$ = #, 
                    "Default", $CellContext`bratio$$ = 
                    "Default"; {$CellContext`vrx$$, $CellContext`vry$$, \
$CellContext`vrz$$} = {1, 1, 
                    1}; {$CellContext`brx$$, $CellContext`bry$$, \
$CellContext`brz$$} = \
$CellContext`voxelRatioToBoxRatio$$[{$CellContext`vrx$$, $CellContext`vry$$, \
$CellContext`vrz$$}], "Custom", $CellContext`bratio$$ = 
                    "Custom"]; \
$CellContext`setBoxRatio$$[{$CellContext`brx$$, $CellContext`bry$$, \
$CellContext`brz$$}])& ], {"Default"->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewRatioDefault"],
                    BaseStyle->{"TextStyling"}], "Custom"->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewRatioCustom"],
                    BaseStyle->{"TextStyling"}]},
                    BaseStyle->"RibbonText",
                    MenuStyle->"RibbonText"], 
                    PaneSelectorBox[{False->"\<\"\"\>", True->
                    TagBox[GridBox[{
                    {
                    TemplateBox[{10},
                    "Spacer1"], "\<\"x\"\>", 
                    InputFieldBox[Dynamic[
                    Round[$CellContext`vrx$$, 0.01], If[
                    
                    Positive[#], $CellContext`vrx$$ = #; $CellContext`brx$$ = \
# $CellContext`dimx$$; $CellContext`setBoxRatio$$[{$CellContext`brx$$, \
$CellContext`bry$$, $CellContext`brz$$}]]& ], Number,
                    FieldSize->{{5, 5}, {1, 1}}], "\<\"y\"\>", 
                    InputFieldBox[Dynamic[
                    Round[$CellContext`vry$$, 0.01], If[
                    
                    Positive[#], $CellContext`vry$$ = #; $CellContext`bry$$ = \
# $CellContext`dimy$$; $CellContext`setBoxRatio$$[{$CellContext`brx$$, \
$CellContext`bry$$, $CellContext`brz$$}]]& ], Number,
                    FieldSize->{{5, 5}, {1, 1}}], "\<\"z\"\>", 
                    InputFieldBox[Dynamic[
                    Round[$CellContext`vrz$$, 0.01], If[
                    
                    Positive[#], $CellContext`vrz$$ = #; $CellContext`brz$$ = \
# $CellContext`dimz$$; $CellContext`setBoxRatio$$[{$CellContext`brx$$, \
$CellContext`bry$$, $CellContext`brz$$}]]& ], Number,
                    FieldSize->{{5, 5}, {1, 1}}]}
                    },
                    AutoDelete->False,
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"]}, Dynamic[$CellContext`vratio$$ === "Custom"],
                    ImageSize->Automatic], "\[SpanFromAbove]"}
                    },
                    AutoDelete->False,
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"]},
                    {
                    TagBox[GridBox[{
                    {
                    
                    CheckboxBox[
                    Dynamic[$CellContext`boxed$$, ($CellContext`boxed$$ = #; 
                    FrontEnd`Private`Image3DEditingSetOption[
                    ButtonNotebook[], 
                    Dynamic[$CellContext`image$$], {
                    Boxed -> $CellContext`boxed$$}])& ],
                    BaselinePosition->Scaled[0.3]], 
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ViewBoundingBox"],
                    BaseStyle->{"TextStyling"}]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{0.5}}}],
                    "Grid"]}
                   },
                   DefaultBaseStyle->"Column",
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   
                   GridBoxDividers->{
                    "Columns" -> {{None}}, 
                    "RowsIndexed" -> {-2 -> GrayLevel[0.85]}},
                   GridBoxItemSize->{"Columns" -> {{Fit}}, "Rows" -> {{Fit}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
                  "Column"],
                 
                 DynamicModuleValues:>{{
                   DownValues[$CellContext`setBoxRatio$$] = {HoldPattern[
                    $CellContext`setBoxRatio$$[
                    Pattern[$CellContext`setting$, 
                    Blank[]]]] :> (FrontEnd`Private`Image3DEditingSetOption[
                    ButtonNotebook[], 
                    Dynamic[$CellContext`image$$], {
                    BoxRatios -> $CellContext`setting$}]; If[
                    
                    And[$CellContext`bratio$$ === 
                    "1:1:1", $CellContext`setting$ != {1, 1, 
                    1}], $CellContext`bratio$$ = "Custom"])}}, {
                   DownValues[$CellContext`boxRatioToVoxelRatio$$] = {
                    HoldPattern[
                    $CellContext`boxRatioToVoxelRatio$$[
                    Pattern[$CellContext`setting$, 
                    
                    Blank[]]]] :> $CellContext`setting$/{$CellContext`dimx$$, \
$CellContext`dimy$$, $CellContext`dimz$$}}}, {
                   DownValues[$CellContext`voxelRatioToBoxRatio$$] = {
                    HoldPattern[
                    $CellContext`voxelRatioToBoxRatio$$[
                    Pattern[$CellContext`setting$, 
                    
                    Blank[]]]] :> $CellContext`setting$ {$CellContext`dimx$$, \
$CellContext`dimy$$, $CellContext`dimz$$}}}},
                 
                 Initialization:>({$CellContext`dimx$$, $CellContext`dimy$$, \
$CellContext`dimz$$} = ImageDimensions[
                    $CellContext`image$$[]]; $CellContext`boxed$$ = 
                   ReplaceAll[Boxed, 
                    Flatten[{
                    Options[
                    $CellContext`image$$[], Boxed], Boxed -> 
                    False}]]; $CellContext`initBoxRatios$$ = 
                   ReplaceAll[BoxRatios, 
                    Flatten[{
                    Options[
                    $CellContext`image$$[], BoxRatios], BoxRatios -> 
                    Automatic}]]; Switch[$CellContext`initBoxRatios$$, 
                    
                    Alternatives[{1, 1, 1}, {1., 1., 
                    1.}], {$CellContext`brx$$, $CellContext`bry$$, \
$CellContext`brz$$} = $CellContext`initBoxRatios$$; {$CellContext`vrx$$, \
$CellContext`vry$$, $CellContext`vrz$$} = \
$CellContext`initBoxRatios$$/{$CellContext`dimx$$, $CellContext`dimy$$, \
$CellContext`dimz$$}; $CellContext`bratio$$ = "1:1:1"; $CellContext`vratio$$ = 
                    "Custom", {
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], 
                    NumericQ]}, {$CellContext`brx$$, $CellContext`bry$$, \
$CellContext`brz$$} = $CellContext`initBoxRatios$$; {$CellContext`vrx$$, \
$CellContext`vry$$, $CellContext`vrz$$} = \
$CellContext`initBoxRatios$$/{$CellContext`dimx$$, $CellContext`dimy$$, \
$CellContext`dimz$$}; $CellContext`bratio$$ = "Custom"; $CellContext`vratio$$ = 
                    "Custom", 
                    Alternatives[Automatic, 
                    
                    Blank[]], {$CellContext`vrx$$, $CellContext`vry$$, \
$CellContext`vrz$$} = {1, 1, 
                    1}; {$CellContext`brx$$, $CellContext`bry$$, \
$CellContext`brz$$} = {$CellContext`dimx$$, $CellContext`dimy$$, \
$CellContext`dimz$$}; $CellContext`bratio$$ = 
                    "Default"; $CellContext`vratio$$ = 
                    "Default"]; $CellContext`initBoxRatios$$ = \
{$CellContext`brx$$, $CellContext`bry$$, $CellContext`brz$$}; Null)],
                FrameMargins->10],
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentAreaGradient.9.png"]},
               DefaultBaseStyle->{},
               ImageSize->535]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
           "Column"],
          Deploy,
          DefaultBaseStyle->"Deploy"], "ImageInformationTab"->
         TagBox[
          TagBox[GridBox[{
             {
              PanelBox[
               TagBox[GridBox[{
                  {
                   PaneBox[
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "InformationTitle"],
                    BaseStyle->{"TextStyling"}], "RibbonTitle",
                    StripOnInput->False],
                    ImageMargins->{{8, 0}, {0, 0}}], 
                   ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                   ItemBox[
                    ButtonBox[
                    PaneSelectorBox[{False->
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, "Close.png"]]],
                     True->
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "Close-Hover.png"]]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    ButtonFunction:>(Ribbon`Private`page$$ = None),
                    ContentPadding->False,
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->{{0, 8}, {8, 4}},
                    Method->"Preemptive"],
                    Alignment->Center,
                    StripOnInput->False]}
                 },
                 AutoDelete->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Left, Left, Right}, "Rows" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                 GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                "Grid"],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentTitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->535]},
             {
              PanelBox[
               PaneBox[
                TagBox[GridBox[{
                   {
                    TagBox[GridBox[{
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ImageDimensions"],
                    BaseStyle->{"TextStyling"}], 
                    DynamicBox[ToBoxes[
                    BoxForm`Undeploy[
                    ImageDimensions[
                    $CellContext`image$$[]]], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "ColorSpace"],
                    BaseStyle->{"TextStyling"}], 
                    DynamicBox[ToBoxes[
                    BoxForm`Undeploy[
                    ImageColorSpace[
                    $CellContext`image$$[]]], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "AlphaChannel"],
                    BaseStyle->{"TextStyling"}], 
                    DynamicBox[ToBoxes[
                    BoxForm`Undeploy[
                    ImageMeasurements[
                    $CellContext`image$$[], "Transparency"]], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "Channels"],
                    BaseStyle->{"TextStyling"}], 
                    DynamicBox[ToBoxes[
                    BoxForm`Undeploy[
                    ImageChannels[
                    $CellContext`image$$[]]], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "Interleaving"],
                    BaseStyle->{"TextStyling"}], 
                    DynamicBox[ToBoxes[
                    ReplaceAll[
                    ReplaceAll[
                    BoxForm`Undeploy[Interleaving], 
                    Options[
                    $CellContext`image$$[]]], 
                    Options[Image3D]], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "DataType"],
                    BaseStyle->{"TextStyling"}], 
                    DynamicBox[ToBoxes[
                    BoxForm`Undeploy[
                    ImageType[
                    $CellContext`image$$[]]], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "Size"],
                    BaseStyle->{"TextStyling"}], 
                    DynamicBox[ToBoxes[
                    BoxForm`Undeploy[
                    ByteCount[
                    $CellContext`image$$[]]], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "Magnification"],
                    BaseStyle->{"TextStyling"}], 
                    TagBox[
                    
                    DynamicModuleBox[{BoxForm`localvar$$, BoxForm`update$$ = 
                    0}, 
                    
                    DynamicBox[ToBoxes[
                    If[BoxForm`update$$ === 0, BoxForm`localvar$$ = 
                    CurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "Graphics3DBoxOptionsImageSize"], 
                    (FrontEnd`Private`Image3DEditingReplaceImage[
                    ButtonNotebook[], 
                    
                    Module[{$CellContext`mag$}, $CellContext`mag$ = 
                    Replace[#, {Magnification[
                    Pattern[$CellContext`x, 
                    Blank[]]] :> $CellContext`x, Pattern[$CellContext`other, 
                    Blank[]] :> $CellContext`other}]; Image3D[
                    $CellContext`image$$[], ImageSize -> Automatic, 
                    Magnification -> $CellContext`mag$]], 
                    "ImageInformationTab"]& )[BoxForm`localvar$$, 
                    CurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "Graphics3DBoxOptionsImageSize"]]]; PopupMenu[
                    Dynamic[
                    BoxForm`localvar$$, {(BoxForm`localvar$$ = #)& , (
                    BoxForm`localvar$$ = #)& , (BoxForm`localvar$$ = #; 
                    PreIncrement[BoxForm`update$$])& }], {Automatic -> Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "MagnificationAutomatic"]], 
                    BaseStyle -> {"TextStyling"}], Delimiter, 
                    Magnification[0.05] -> "5%", Magnification[0.1] -> "10%", 
                    Magnification[0.25] -> "25%", Magnification[0.5] -> "50%",
                     Magnification[1] -> "100%", Magnification[2] -> "200%", 
                    Magnification[3] -> "300%", Magnification[4] -> "400%", 
                    Magnification[8] -> "800%", Magnification[16] -> "1600%"}, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "MagnificationOther"]], 
                    BaseStyle -> {"TextStyling"}], BaseStyle -> "RibbonText", 
                    MenuStyle -> "RibbonText"], StandardForm],
                    CachedValue:>StyleBox[
                    CheckboxBox[False], ShowContents -> False, StripOnInput -> 
                    False],
                    SynchronousUpdating->False,
                    TrackedSymbols:>{BoxForm`update$$}],
                    DynamicModuleValues:>{}],
                    Deploy,
                    DefaultBaseStyle->"Deploy"]}
                    },
                    AutoDelete->False,
                    ColumnsEqual->True,
                    
                    FrameStyle->RGBColor[
                    0.7019607843137254, 0.7019607843137254, 
                    0.7019607843137254],
                    GridBoxAlignment->{"Columns" -> {Right, Left}},
                    
                    GridBoxDividers->{
                    "Columns" -> {{False}}, "Rows" -> {{False}, True, False}},
                    GridBoxItemSize->{},
                    GridBoxItemStyle->{"Columns" -> {Bold, Plain}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{1}}, "Rows" -> {{0.2}, 2, 0.2}},
                    RowsEqual->True],
                    "Grid"], 
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "Image3DEditModeMenu", "DataHistogram"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold]},
                    {
                    DynamicBox[ToBoxes[
                    BoxForm`Undeploy[
                    ImageHistogram[
                    $CellContext`image$$[], Background -> White, FrameStyle -> 
                    GrayLevel[191/255.], ImagePadding -> None, ImageSize -> 
                    290]], StandardForm],
                    BaseStyle->{CacheGraphics -> False},
                    CachedValue:>PaneBox[
                    InterpretationBox[
                    StyleBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "NecklaceAnimator"][Medium]], 
                    AnimatorBoxOptions -> {}], 
                    Animator[Appearance -> "Necklace"], 
                    BaseStyle -> {"Deploy"}], ImageSize -> {360, 100}, 
                    Alignment -> Center],
                    SynchronousUpdating->False]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.8}}}],
                    "Column"]}
                  },
                  AutoDelete->False,
                  BaseStyle->"RibbonText",
                  GridBoxAlignment->{"Rows" -> {{Top}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                  GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{0}}}],
                 "Grid"],
                FrameMargins->10],
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentAreaGradient.9.png"]},
               DefaultBaseStyle->{},
               ImageSize->535]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
           "Column"],
          Deploy,
          DefaultBaseStyle->"Deploy"]}, Dynamic[Ribbon`Private`page$$],
         ImageSize->Automatic],
        Alignment->Top,
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
     GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
    "Column"],
   DynamicModuleValues:>{},
   Initialization:>(If[
      ValueQ[FrontEnd`Private`$RibbonDefaultPage], Ribbon`Private`page$$ = 
      FrontEnd`Private`$RibbonDefaultPage]; 
    ClearAll[FrontEnd`Private`$RibbonDefaultPage])],
  BaseStyle->"RibbonText",
  DynamicModuleValues:>{},
  Initialization:>(If[
     Image`Image3DQ[
     FrontEnd`Private`$Image3DEditorDefaultImage], $CellContext`image$$[] = 
      FrontEnd`Private`$Image3DEditorDefaultImage; 
     Null, $CellContext`image$$[] := With[{$CellContext`expr$ = ToExpression[
          MathLink`CallFrontEnd[
           FrontEnd`NotebookRead[
            FrontEnd`AttachedCellParent[]]]]}, 
       If[
        Image`Image3DQ[$CellContext`expr$], $CellContext`image$$[] = \
$CellContext`expr$]]]; ClearAll[FrontEnd`Private`$Image3DEditorDefaultImage]; 
   Null),
  SynchronousInitialization->False]],
 Evaluator->"System",
 Deployed->True,
 CellContext->Cell,
 DynamicUpdating->True,
 DynamicEvaluationTimeout->12,
 Magnification->1,
 Raster3DBoxOptions->{ImageEditMode->False},
 CellTags->
  "AttachedImage3D",ExpressionUUID->"87c73a19-9957-462f-b74e-a78b5470e9fa"]
},
WindowSize->{775, 872},
WindowMargins->{{564, Automatic}, {Automatic, 54}},
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AttachedImage3D"->{
  Cell[558, 20, 98151, 2139, 70, InheritFromParent,ExpressionUUID->"87c73a19-9957-462f-b74e-a78b5470e9fa",
   CellTags->"AttachedImage3D"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AttachedImage3D", 99013, 2171}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 98151, 2139, 70, InheritFromParent,ExpressionUUID->"87c73a19-9957-462f-b74e-a78b5470e9fa",
 CellTags->"AttachedImage3D"]
}
]
*)

(* End of internal cache information *)

