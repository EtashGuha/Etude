(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     45965,       1013]
NotebookOptionsPosition[     45248,        990]
NotebookOutlinePosition[     46000,       1015]
CellTagsIndexPosition[     45957,       1012]
WindowTitle->Preferences
WindowFrame->ModelessDialog*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 StyleBox[
  PaneBox[
   DynamicModuleBox[{$CellContext`showSubgrid$$ = 
    False, $CellContext`proxySettingsGrid$$ = 
    DynamicModule[{$CellContext`setting, $CellContext`http, \
$CellContext`https, $CellContext`ftp, $CellContext`socks, \
$CellContext`usewpad}, 
     Grid[{{
        RadioButton[
         Dynamic[$CellContext`setting, (
          PacletManager`UseInternetProxy[#]; $CellContext`setting = #)& ], 
         Automatic, Enabled -> Dynamic[
           CurrentValue[$FrontEnd, "AllowDownloads"]]], 
        Toggler[
         Dynamic[$CellContext`setting === Automatic, (
          PacletManager`UseInternetProxy[Automatic]; $CellContext`setting = 
           Automatic)& ], {True -> Dynamic[
            FEPrivate`FrontEndResource[
            "PreferencesDialog", "BrowserProxyText"]], False -> Dynamic[
            FEPrivate`FrontEndResource[
            "PreferencesDialog", "BrowserProxyText"]]}, Enabled -> Dynamic[
           CurrentValue[$FrontEnd, "AllowDownloads"]]]}, {
        RadioButton[
         Dynamic[$CellContext`setting, (
          PacletManager`UseInternetProxy[#]; $CellContext`setting = #)& ], 
         False, Enabled -> Dynamic[
           CurrentValue[$FrontEnd, "AllowDownloads"]]], 
        Toggler[
         Dynamic[$CellContext`setting === False, (
          PacletManager`UseInternetProxy[False]; $CellContext`setting = 
           False)& ], {True -> Dynamic[
            FEPrivate`FrontEndResource[
            "PreferencesDialog", "DirectProxyText"]], False -> Dynamic[
            FEPrivate`FrontEndResource[
            "PreferencesDialog", "DirectProxyText"]]}, Enabled -> Dynamic[
           CurrentValue[$FrontEnd, "AllowDownloads"]]]}, {
        RadioButton[
         Dynamic[$CellContext`setting, (
          PacletManager`UseInternetProxy[#]; $CellContext`setting = #)& ], 
         True, Enabled -> Dynamic[
           CurrentValue[$FrontEnd, "AllowDownloads"]]], 
        Toggler[
         Dynamic[$CellContext`setting === True, (
          PacletManager`UseInternetProxy[True]; $CellContext`setting = 
           True)& ], {True -> Dynamic[
            FEPrivate`FrontEndResource[
            "PreferencesDialog", "CustomProxyText"]], False -> Dynamic[
            FEPrivate`FrontEndResource[
            "PreferencesDialog", "CustomProxyText"]]}, Enabled -> Dynamic[
           CurrentValue[$FrontEnd, "AllowDownloads"]]]}, {"", 
        Style[
         EventHandler[
          EventHandler[
           Row[{
             Spacer[35], 
             Grid[{{
                Row[{"HTTP", 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "PreferencesDialog", "ProxyText"]]}], 
                InputField[
                 Dynamic[
                  Part[$CellContext`http, 1], {($CellContext`http = {#, 
                    Part[$CellContext`http, 2]})& , 
                   PacletManager`SetInternetProxy[
                   "HTTP", $CellContext`http]& }], String], 
                Dynamic[
                 FEPrivate`FrontEndResource["PreferencesDialog", "PortText"]], 
                InputField[
                 Dynamic[
                  Part[$CellContext`http, 2], {($CellContext`http = {
                    Part[$CellContext`http, 1], #})& , 
                   PacletManager`SetInternetProxy[
                   "HTTP", $CellContext`http]& }], Number, FieldSize -> 5]}, {
               
                Row[{"HTTPS", 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "PreferencesDialog", "ProxyText"]]}], 
                InputField[
                 Dynamic[
                  Part[$CellContext`https, 1], {($CellContext`https = {#, 
                    Part[$CellContext`https, 2]})& , 
                   PacletManager`SetInternetProxy[
                   "HTTPS", $CellContext`https]& }], String], 
                Dynamic[
                 FEPrivate`FrontEndResource["PreferencesDialog", "PortText"]], 
                InputField[
                 Dynamic[
                  Part[$CellContext`https, 2], {($CellContext`https = {
                    Part[$CellContext`https, 1], #})& , 
                   PacletManager`SetInternetProxy[
                   "HTTPS", $CellContext`https]& }], Number, FieldSize -> 
                 5]}, {
                Row[{"FTP", 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "PreferencesDialog", "ProxyText"]]}], 
                InputField[
                 Dynamic[
                  Part[$CellContext`ftp, 1], {($CellContext`ftp = {#, 
                    Part[$CellContext`ftp, 2]})& , 
                   PacletManager`SetInternetProxy[
                   "FTP", $CellContext`ftp]& }], String], 
                Dynamic[
                 FEPrivate`FrontEndResource["PreferencesDialog", "PortText"]], 
                InputField[
                 Dynamic[
                  Part[$CellContext`ftp, 2], {($CellContext`ftp = {
                    Part[$CellContext`ftp, 1], #})& , 
                   PacletManager`SetInternetProxy[
                   "FTP", $CellContext`ftp]& }], Number, FieldSize -> 5]}, {
                Row[{"SOCKS", 
                  Dynamic[
                   FEPrivate`FrontEndResource[
                   "PreferencesDialog", "HostText"]]}], 
                InputField[
                 Dynamic[
                  Part[$CellContext`socks, 1], {($CellContext`socks = {#, 
                    Part[$CellContext`socks, 2]})& , 
                   PacletManager`SetInternetProxy[
                   "SOCKS", $CellContext`socks]& }], String], 
                Dynamic[
                 FEPrivate`FrontEndResource["PreferencesDialog", "PortText"]], 
                InputField[
                 Dynamic[
                  Part[$CellContext`socks, 2], {($CellContext`socks = {
                    Part[$CellContext`socks, 1], #})& , 
                   PacletManager`SetInternetProxy[
                   "SOCKS", $CellContext`socks]& }], Number, FieldSize -> 
                 5]}}, Alignment -> {Right, Baseline}]}], "ReturnKeyDown" :> 
           MapThread[
            PacletManager`SetInternetProxy, {{
              "HTTP", "HTTPS", "FTP", 
               "SOCKS"}, {$CellContext`http, $CellContext`https, \
$CellContext`ftp, $CellContext`socks}}], EvaluationOrder -> After, 
           PassEventsDown -> True], {"MenuCommand", "EvaluateCells"} :> 
          MapThread[
           PacletManager`SetInternetProxy, {{
             "HTTP", "HTTPS", "FTP", 
              "SOCKS"}, {$CellContext`http, $CellContext`https, \
$CellContext`ftp, $CellContext`socks}}], EvaluationOrder -> After, 
          PassEventsDown -> False], 
         InputFieldBoxOptions -> {
          ContinuousAction -> False, Enabled -> Dynamic[
             FEPrivate`And[
              FEPrivate`SameQ[$CellContext`setting, True], 
              CurrentValue[$FrontEnd, "AllowDownloads"]]], 
           BaseStyle -> {FontColor :> Dynamic[
               FEPrivate`If[
                FEPrivate`And[
                 FEPrivate`SameQ[$CellContext`setting, True], 
                 CurrentValue[$FrontEnd, "AllowDownloads"]], Automatic, 
                GrayLevel[0.6]]]}}]}, {
        Dynamic[
         If[$OperatingSystem === "Windows", 
          Checkbox[
           
           Dynamic[$CellContext`usewpad, (
            PacletManager`SetInternetProxy[
             "UseWPAD" -> #]; $CellContext`usewpad = 
             Replace[PacletManager`$InternetProxyRules, {{
                  BlankNullSequence[], "UseWPAD" -> Pattern[$CellContext`bool, 
                    Blank[]], 
                  BlankNullSequence[]} :> $CellContext`bool, Blank[] :> 
                Automatic}])& ], Enabled -> Dynamic[
             And[
              CurrentValue[$FrontEnd, "AllowDownloads"], $OperatingSystem === 
              "Windows", 
              BooleanQ[$CellContext`usewpad]]]], ""]], 
        Dynamic[
         If[$OperatingSystem === "Windows", 
          Toggler[
           
           Dynamic[$CellContext`usewpad, (
            PacletManager`SetInternetProxy[
             "UseWPAD" -> #]; $CellContext`usewpad = 
             Replace[PacletManager`$InternetProxyRules, {{
                  BlankNullSequence[], "UseWPAD" -> Pattern[$CellContext`bool, 
                    Blank[]], 
                  BlankNullSequence[]} :> $CellContext`bool, Blank[] :> 
                Automatic}])& ], {True -> Dynamic[
              FEPrivate`FrontEndResource[
              "PreferencesDialog", "AllowWPADText"]], False -> Dynamic[
              FEPrivate`FrontEndResource[
              "PreferencesDialog", "AllowWPADText"]]}, 
           Dynamic[
            FEPrivate`FrontEndResource["PreferencesDialog", "AllowWPADText"]],
            Enabled -> Dynamic[
             And[
              CurrentValue[$FrontEnd, "AllowDownloads"], $OperatingSystem === 
              "Windows", 
              BooleanQ[$CellContext`usewpad]]]], ""]]}}, 
      Alignment -> {Left, Center}, Spacings -> {0, Automatic}], 
     Initialization :> (
      Needs["PacletManager`"]; {$CellContext`setting, $CellContext`http, \
$CellContext`https, $CellContext`ftp, $CellContext`socks, \
$CellContext`usewpad} = ReplaceAll[
         ReplaceAll[{"UseProxy", "HTTP", "HTTPS", "FTP", "Socks", "UseWPAD"}, 
          
          Cases[PacletManager`$InternetProxyRules, 
           Blank[Rule]]], {
         Alternatives["UseProxy", "UseWPAD"] -> Automatic, 
          Alternatives["HTTP", "HTTPS", "FTP", "Socks", {}] -> {"", 0}}]), 
     DynamicModuleValues :> {}], $CellContext`mailSettingsGrid$$ = 
    TabView[{{"IncomingMail", Dynamic[
         FEPrivate`FrontEndResource[
         "PreferencesDialog", "IncomingMailLabel"]] -> 
       DynamicModule[{$CellContext`server, $CellContext`port, \
$CellContext`user, $CellContext`password, $CellContext`mailfolder, \
$CellContext`initializeVariables, $CellContext`getvalue}, 
         Grid[{{"", 
            Item[
             Dynamic[
              RawBoxes[
               FEPrivate`FrontEndResource[
               "PreferencesDialog", "IncomingMailDescription"]]], 
             ItemSize -> {Automatic, 3}]}, {
            Item[
             Dynamic[
              FEPrivate`FrontEndResource["PreferencesDialog", "ServerText"]], 
             Alignment -> {Right, Baseline}], 
            Item[
             Grid[{{
                EventHandler[
                 InputField[
                  
                  Dynamic[$CellContext`server, {
                   None, (MailLink`SetIncomingMailSettings[
                    Association["Server" -> #]]; $CellContext`server = #)& }],
                   String, ImageSize -> {Full, Automatic}, ContinuousAction -> 
                  False], {"MenuCommand", "EvaluateCells"} :> ((
                  MailLink`SetIncomingMailSettings[
                    Association["Server" -> #]]; $CellContext`server = #)& ), 
                 EvaluationOrder -> After, PassEventsDown -> False], "", 
                Dynamic[
                 FEPrivate`FrontEndResource[
                 "PreferencesDialog", "PortNumText"]], 
                EventHandler[
                 InputField[
                  
                  Dynamic[$CellContext`port, {
                   None, (MailLink`SetIncomingMailSettings[
                    Association[
                    "PortNumber" -> #]]; $CellContext`port = #)& }], 
                  Expression, ImageSize -> {100, Automatic}, 
                  ImageSize -> {Full, Automatic}, ContinuousAction -> 
                  False], {"MenuCommand", "EvaluateCells"} :> ((
                  MailLink`SetIncomingMailSettings[
                    Association[
                    "PortNumber" -> #]]; $CellContext`port = #)& ), 
                 EvaluationOrder -> After, PassEventsDown -> False]}}, 
              ItemSize -> {{Automatic, {2 -> 2}}, Automatic}, 
              Spacings -> {{0, {-2 -> Automatic}}, 0}], 
             Alignment -> {Left, Baseline}]}, {
            Dynamic[
             FEPrivate`FrontEndResource["PreferencesDialog", "UsernameText"]], 
            EventHandler[
             InputField[
              
              Dynamic[$CellContext`user, {
               None, (MailLink`SetIncomingMailSettings[
                  Association["Username" -> #]]; $CellContext`user = #)& }], 
              String, ImageSize -> {Full, Automatic}, ContinuousAction -> 
              False], {"MenuCommand", "EvaluateCells"} :> ((
              MailLink`SetIncomingMailSettings[
                Association["Username" -> #]]; $CellContext`user = #)& ), 
             EvaluationOrder -> After, PassEventsDown -> False]}, {
            Dynamic[
             FEPrivate`FrontEndResource["PreferencesDialog", "PasswordText"]], 
            EventHandler[
             InputField[
              Dynamic[$CellContext`password, {
               None, (MailLink`SetIncomingMailSettings[
                  Association[
                  "Password" -> #]]; $CellContext`password = #)& }], String, 
              FieldMasked -> True, ImageSize -> {Full, Automatic}, 
              ContinuousAction -> False], {
              "MenuCommand", "EvaluateCells"} :> ((
              MailLink`SetIncomingMailSettings[
                Association["Password" -> #]]; $CellContext`password = #)& ), 
             EvaluationOrder -> After, PassEventsDown -> False]}, {
            Dynamic[
             FEPrivate`FrontEndResource[
             "PreferencesDialog", "MailFolderText"]], 
            EventHandler[
             InputField[
              
              Dynamic[$CellContext`mailfolder, {
               None, (MailLink`SetIncomingMailSettings[
                  Association[
                  "MailFolder" -> #]]; $CellContext`mailfolder = #)& }], 
              String, ImageSize -> {Full, Automatic}, ContinuousAction -> 
              False], {"MenuCommand", "EvaluateCells"} :> ((
              MailLink`SetIncomingMailSettings[
                Association[
                "MailFolder" -> #]]; $CellContext`mailfolder = #)& ), 
             EvaluationOrder -> After, PassEventsDown -> False]}, {
            Item[
             Button[
              Dynamic[
               FEPrivate`FrontEndResource[
               "PreferencesDialog", 
                "ResetDefaultsText"]], $CellContext`initializeVariables[
                
                Dynamic[{$CellContext`server, $CellContext`port, \
$CellContext`user, $CellContext`password, $CellContext`mailfolder}], 
                MailLink`ResetIncomingMailSettings[]]; Null, Method -> 
              "Queued", ImageSize -> All], Alignment -> Left], SpanFromLeft}},
           Spacings -> {Automatic, Automatic}, Alignment -> {{Right, Left}}, 
          ItemSize -> {Automatic, Automatic}], 
         Initialization :> (
          Needs["MailLink`"]; $CellContext`initializeVariables[
             Dynamic[{
               Pattern[$CellContext`args$, 
                BlankSequence[]]}], 
             Pattern[$CellContext`settings$, 
              Blank[Association]]] := ({$CellContext`args$} = 
            Map[$CellContext`getvalue[#, $CellContext`settings$]& , {
              "Server", "PortNumber", "Username", "Password", 
               "MailFolder"}]); $CellContext`initializeVariables[
            
            Dynamic[{$CellContext`server, $CellContext`port, \
$CellContext`user, $CellContext`password, $CellContext`mailfolder}], 
            MailLink`GetIncomingMailSettings[]]; $CellContext`getvalue[
             Pattern[$CellContext`key, 
              Blank[]], 
             Pattern[$CellContext`settings, 
              Blank[Association]]] := 
           Lookup[$CellContext`settings, $CellContext`key]; \
$CellContext`getvalue[
             Pattern[$CellContext`key, "Password"], 
             Pattern[$CellContext`settings, 
              Blank[Association]]] := 
           Module[{$CellContext`val = 
              Lookup[$CellContext`settings, $CellContext`key]}, 
             If[
              ListQ[$CellContext`val], 
              
              MailLink`Utilities`lookupid[$CellContext`val, 
               MailLink`Utilities`$fetchmailid], $CellContext`val]]; Null), 
         DynamicModuleValues :> {}]}, {"OutgoingMail", Dynamic[
         FEPrivate`FrontEndResource[
         "PreferencesDialog", "OutgoingMailLabel"]] -> 
       DynamicModule[{$CellContext`server, $CellContext`port, \
$CellContext`encryption, $CellContext`user, $CellContext`from, \
$CellContext`fullname, $CellContext`replyto, $CellContext`autobcc, \
$CellContext`autocc, $CellContext`signature, \
$CellContext`initializeVariables, $CellContext`getvalue, \
$CellContext`getcurrvaluefunc, $CellContext`processValue}, 
         Grid[{{"", 
            Item[
             Dynamic[
              RawBoxes[
               FEPrivate`FrontEndResource[
               "PreferencesDialog", "OutgoingMailDescription"]]], 
             ItemSize -> {Automatic, 3}]}, {
            Dynamic[
             FEPrivate`FrontEndResource["PreferencesDialog", "ServerText"]], 
            EventHandler[
             InputField[
              
              Dynamic[$CellContext`server, {
               None, ExternalService`MailSettings`SetMailSettings[
                "Server" -> ($CellContext`server = #)]& }], String, 
              ImageSize -> {Full, Automatic}, ContinuousAction -> False], {
              "MenuCommand", "EvaluateCells"} :> (
              ExternalService`MailSettings`SetMailSettings[
              "Server" -> ($CellContext`server = #)]& ), EvaluationOrder -> 
             After, PassEventsDown -> False]}, {
            Item[
             Dynamic[
              FEPrivate`FrontEndResource[
              "PreferencesDialog", "EncryptProtoText"]], 
             Alignment -> {Automatic, Center}], 
            Item[
             Grid[{{
                RadioButtonBar[
                 
                 Dynamic[$CellContext`encryption, 
                  ExternalService`MailSettings`SetMailSettings[
                  "EncryptionProtocol" -> ($CellContext`encryption = #)]& ], {
                 None, "SSL", "TLS", "StartTLS"}], "", 
                Dynamic[
                 FEPrivate`FrontEndResource[
                 "PreferencesDialog", "PortNumText"]], 
                EventHandler[
                 InputField[
                  
                  Dynamic[$CellContext`port, {
                   None, ExternalService`MailSettings`SetMailSettings[
                    "PortNumber" -> ($CellContext`port = #)]& }], Number, 
                  ImageSize -> {100, Automatic}, BaselinePosition -> Baseline,
                   ImageSize -> {Full, Automatic}, ContinuousAction -> 
                  False], {"MenuCommand", "EvaluateCells"} :> (
                  ExternalService`MailSettings`SetMailSettings[
                  "PortNumber" -> ($CellContext`port = #)]& ), 
                 EvaluationOrder -> After, PassEventsDown -> False]}}, 
              ItemSize -> {{Automatic, {2 -> Fit}}, Automatic}, 
              Alignment -> {Left, Center}, 
              Spacings -> {{0, {-2 -> Automatic}}, 0}], 
             Alignment -> {Left, Center}]}, {
            Dynamic[
             FEPrivate`FrontEndResource["PreferencesDialog", "UsernameText"]], 
            EventHandler[
             InputField[
              
              Dynamic[$CellContext`user, {
               None, ExternalService`MailSettings`SetMailSettings[
                "UserName" -> ($CellContext`user = #)]& }], String, 
              ImageSize -> {Full, Automatic}, ContinuousAction -> False], {
              "MenuCommand", "EvaluateCells"} :> (
              ExternalService`MailSettings`SetMailSettings[
              "UserName" -> ($CellContext`user = #)]& ), EvaluationOrder -> 
             After, PassEventsDown -> False]}, {
            Dynamic[
             FEPrivate`FrontEndResource["PreferencesDialog", "FromAddrText"]], 
            EventHandler[
             InputField[
              
              Dynamic[$CellContext`from, {
               None, ExternalService`MailSettings`SetMailSettings[
                "FromAddress" -> ($CellContext`from = #)]& }], String, 
              ImageSize -> {Full, Automatic}, ContinuousAction -> False], {
              "MenuCommand", "EvaluateCells"} :> (
              ExternalService`MailSettings`SetMailSettings[
              "FromAddress" -> ($CellContext`from = #)]& ), EvaluationOrder -> 
             After, PassEventsDown -> False]}, {
            Dynamic[
             FEPrivate`FrontEndResource["PreferencesDialog", "FullNameText"]], 
            EventHandler[
             InputField[
              
              Dynamic[$CellContext`fullname, {
               None, ExternalService`MailSettings`SetMailSettings[
                "FromName" -> ($CellContext`fullname = #)]& }], String, 
              ImageSize -> {Full, Automatic}, ContinuousAction -> False], {
              "MenuCommand", "EvaluateCells"} :> (
              ExternalService`MailSettings`SetMailSettings[
              "FromName" -> ($CellContext`fullname = #)]& ), EvaluationOrder -> 
             After, PassEventsDown -> False]}, {
            Dynamic[
             FEPrivate`FrontEndResource["PreferencesDialog", "ReplyToText"]], 
            
            EventHandler[
             InputField[
              
              Dynamic[$CellContext`replyto, {
               None, ExternalService`MailSettings`SetMailSettings[
                "ReplyTo" -> ($CellContext`replyto = #)]& }], String, 
              ImageSize -> {Full, Automatic}, ContinuousAction -> False], {
              "MenuCommand", "EvaluateCells"} :> (
              ExternalService`MailSettings`SetMailSettings[
              "ReplyTo" -> ($CellContext`replyto = #)]& ), EvaluationOrder -> 
             After, PassEventsDown -> False]}, {
            Dynamic[
             FEPrivate`FrontEndResource["PreferencesDialog", "AutoBccText"]], 
            
            EventHandler[
             InputField[
              
              Dynamic[$CellContext`autobcc, {
               None, ($CellContext`autobcc = #; 
                ExternalService`MailSettings`SetMailSettings[
                 "AutoBcc" -> StringSplit[#, 
                    Repeated[
                    StringExpression[
                    RepeatedNull[WhitespaceCharacter], {",", ";"}, 
                    RepeatedNull[WhitespaceCharacter]]]]])& }], String, 
              ImageSize -> {Full, Automatic}, ContinuousAction -> False], {
              "MenuCommand", "EvaluateCells"} :> (($CellContext`autobcc = #; 
              ExternalService`MailSettings`SetMailSettings[
               "AutoBcc" -> StringSplit[#, 
                  Repeated[
                   StringExpression[
                    RepeatedNull[WhitespaceCharacter], {",", ";"}, 
                    RepeatedNull[WhitespaceCharacter]]]]])& ), 
             EvaluationOrder -> After, PassEventsDown -> False]}, {
            Dynamic[
             FEPrivate`FrontEndResource["PreferencesDialog", "AutoCcText"]], 
            EventHandler[
             InputField[
              
              Dynamic[$CellContext`autocc, {
               None, ($CellContext`autocc = #; 
                ExternalService`MailSettings`SetMailSettings[
                 "AutoCc" -> StringSplit[#, 
                    Repeated[
                    StringExpression[
                    RepeatedNull[WhitespaceCharacter], {",", ";"}, 
                    RepeatedNull[WhitespaceCharacter]]]]])& }], String, 
              ImageSize -> {Full, Automatic}, ContinuousAction -> False], {
              "MenuCommand", "EvaluateCells"} :> (($CellContext`autocc = #; 
              ExternalService`MailSettings`SetMailSettings[
               "AutoCc" -> StringSplit[#, 
                  Repeated[
                   StringExpression[
                    RepeatedNull[WhitespaceCharacter], {",", ";"}, 
                    RepeatedNull[WhitespaceCharacter]]]]])& ), 
             EvaluationOrder -> After, PassEventsDown -> False]}, {
            Dynamic[
             FEPrivate`FrontEndResource[
             "PreferencesDialog", "SignatureText"]], 
            EventHandler[
             InputField[
              
              Dynamic[$CellContext`signature, {
               None, ExternalService`MailSettings`SetMailSettings[
                "Signature" -> ($CellContext`signature = #)]& }], String, 
              ImageSize -> {Full, Automatic}, ContinuousAction -> False], {
              "MenuCommand", "EvaluateCells"} :> (
              ExternalService`MailSettings`SetMailSettings[
              "Signature" -> ($CellContext`signature = #)]& ), 
             EvaluationOrder -> After, PassEventsDown -> False]}, {
            Item[
             Button[
              Dynamic[
               FEPrivate`FrontEndResource[
               "PreferencesDialog", "ResetDefaultsText"]], If[
                And[
                 CurrentValue["ShiftKey"], 
                 ListQ[
                  $CellContext`initializeVariables[]]], {$CellContext`server, \
$CellContext`port, $CellContext`encryption, $CellContext`user, \
$CellContext`from, $CellContext`fullname, $CellContext`replyto, \
$CellContext`autobcc, $CellContext`autocc, $CellContext`signature} = \
$CellContext`initializeVariables[]; Unset[
                  $CellContext`initializeVariables[]]; 
                ExternalService`MailSettings`SetMailSettings[{
                  "Server" -> $CellContext`server, 
                   "PortNumber" -> $CellContext`port, 
                   "EncryptionProtocol" -> $CellContext`encryption, 
                   "UserName" -> $CellContext`user, 
                   "FromAddress" -> $CellContext`from, 
                   "FromName" -> $CellContext`fullname, 
                   "ReplyTo" -> $CellContext`replyto, 
                   "AutoBcc" -> $CellContext`autobcc, 
                   "AutoCc" -> $CellContext`autocc, 
                   "Signature" :> $CellContext`signature}], \
$CellContext`initializeVariables[] = {$CellContext`server, $CellContext`port, \
$CellContext`encryption, $CellContext`user, $CellContext`from, \
$CellContext`fullname, $CellContext`replyto, $CellContext`autobcc, \
$CellContext`autocc, $CellContext`signature}; 
                ExternalService`MailSettings`ClearMailSettings[]]; \
$CellContext`initializeVariables[
                
                Dynamic[{$CellContext`server, $CellContext`port, \
$CellContext`encryption, $CellContext`user, $CellContext`from, \
$CellContext`fullname, $CellContext`replyto, $CellContext`autobcc, \
$CellContext`autocc, $CellContext`signature}]], Method -> "Queued", ImageSize -> 
              All], Alignment -> Left], SpanFromLeft}}, 
          Spacings -> {Automatic, Automatic}, 
          Alignment -> {{Right, Left}, Automatic}], 
         Initialization :> ($CellContext`initializeVariables[
             Dynamic[{
               Pattern[$CellContext`args$, 
                BlankSequence[]]}]] := 
           Module[{$CellContext`initSettings$ = 
              ExternalService`MailSettings`LoadMailSettings[]}, \
{$CellContext`args$} = 
              Map[$CellContext`getvalue[#, $CellContext`initSettings$]& , {
                "Server", "PortNumber", "EncryptionProtocol", "UserName", 
                 "FromAddress", "FromName", "ReplyTo", "AutoBcc", "AutoCc", 
                 "Signature"}]; Null]; $CellContext`initializeVariables[
            
            Dynamic[{$CellContext`server, $CellContext`port, \
$CellContext`encryption, $CellContext`user, $CellContext`from, \
$CellContext`fullname, $CellContext`replyto, $CellContext`autobcc, \
$CellContext`autocc, $CellContext`signature}]]; $CellContext`getvalue[
             Pattern[$CellContext`param$, 
              Blank[]], 
             Pattern[$CellContext`currmailsettings$, 
              Blank[]], 
             Pattern[$CellContext`defaultsetting$, 
              Blank[]]] := 
           Module[{$CellContext`paramIsSet$ = 
              MatchQ[$CellContext`currmailsettings$, {
                 BlankNullSequence[], 
                 Blank[][$CellContext`param$, 
                  Blank[]], 
                 BlankNullSequence[]}]}, 
             If[$CellContext`paramIsSet$, 
              $CellContext`getcurrvaluefunc[$CellContext`param$, \
$CellContext`currmailsettings$], 
              $CellContext`processValue[$CellContext`param$, \
$CellContext`defaultsetting$]]]; $CellContext`getvalue[
             Pattern[$CellContext`param$, 
              Blank[]], 
             Pattern[$CellContext`currmailsettings$, 
              
              Blank[]]] := $CellContext`getvalue[$CellContext`param$, \
$CellContext`currmailsettings$, None]; $CellContext`getvalue[
             Pattern[$CellContext`param$, 
              Alternatives["AutoBcc", "AutoCc"]], 
             Pattern[$CellContext`currmailsettings$, 
              
              Blank[]]] := $CellContext`getvalue[$CellContext`param$, \
$CellContext`currmailsettings$, {}]; $CellContext`getcurrvaluefunc[
             Pattern[$CellContext`param, 
              Blank[]], 
             Pattern[$CellContext`currmailsettings, 
              Blank[]]] := 
           Replace[$CellContext`param, $CellContext`currmailsettings]; \
$CellContext`getcurrvaluefunc[
             Pattern[$CellContext`param$, 
              Alternatives["AutoBcc", "AutoCc"]], 
             Pattern[$CellContext`currmailsettings$, 
              Blank[]]] := $CellContext`processValue[$CellContext`param$, 
             
             Replace[$CellContext`param$, $CellContext`currmailsettings$]]; \
$CellContext`processValue[
             Pattern[$CellContext`param, 
              Blank[]], 
             Pattern[$CellContext`value, 
              Blank[]]] := $CellContext`value; $CellContext`processValue[
             Alternatives["AutoBcc", "AutoCc"], 
             Pattern[$CellContext`value, 
              Blank[List]]] := StringJoin[
             Riffle[$CellContext`value, ","]]; $CellContext`processValue[
             Alternatives["AutoBcc", "AutoCc"], 
             Pattern[$CellContext`value, 
              Blank[]]] := $CellContext`value; Null), 
         DynamicModuleValues :> {}]}}, 
     Dynamic[
      CurrentValue[$FrontEnd, {
       PrivateFrontEndOptions, "DialogSettings", "Preferences", "SubTabs", 
        "Mail"}, "IncomingMail"]], 
     ImageSize -> {620, All}], $CellContext`wolframAlphaSettingsGrid$$ = 
    Grid[{{
       Dynamic[
        FEPrivate`FrontEndResource[
        "PreferencesDialog", "WolframAlphaServer"]], 
       InputField[
        Dynamic[
         CurrentValue[$FrontEnd, {
          PrivateFrontEndOptions, "WolframAlphaSettings", "BaseURL"}, 
          "Automatic"], {None, FEPrivate`Set[
           
           CurrentValue[$FrontEnd, {
            PrivateFrontEndOptions, "WolframAlphaSettings", 
             "BaseURL"}], #]& }], String, FieldSize -> {{20, 20}, {1, 
           DirectedInfinity[1]}}, ContinuousAction -> False]}, {"", 
       Row[{
         Checkbox[
          Dynamic[
           
           CurrentValue[$FrontEnd, {
            PrivateFrontEndOptions, "WolframAlphaSettings", "Asynchronous"}, 
            True]]], 
         Dynamic[
          FEPrivate`FrontEndResource[
          "PreferencesDialog", "WolframAlphaAsynchronous"]]}]}, {"", 
       Row[{
         Checkbox[
          Dynamic[
           
           CurrentValue[$FrontEnd, {
            PrivateFrontEndOptions, "WolframAlphaSettings", "Interactive"}, 
            True]]], 
         Dynamic[
          FEPrivate`FrontEndResource[
          "PreferencesDialog", "WolframAlphaInteractive"]]}]}, {"", 
       Row[{
         Checkbox[
          Dynamic[
           
           CurrentValue[$FrontEnd, {
            PrivateFrontEndOptions, "WolframAlphaSettings", "Reinterpret"}, 
            True]]], 
         Dynamic[
          FEPrivate`FrontEndResource[
          "PreferencesDialog", "WolframAlphaReinterpret"]]}]}, {"", 
       Row[{
         Checkbox[
          Dynamic[
           
           CurrentValue[$FrontEnd, {
            PrivateFrontEndOptions, "WolframAlphaSettings", "Recalculate"}, 
            True]]], 
         Dynamic[
          FEPrivate`FrontEndResource[
          "PreferencesDialog", "WolframAlphaRecalculate"]]}]}, {"", 
       Row[{
         Checkbox[
          Dynamic[
           
           CurrentValue[$FrontEnd, {
            PrivateFrontEndOptions, "WolframAlphaSettings", 
             "MathematicaFormsFormatType"}, "MostlyInputForm"]], {
          "MostlyInputForm", "StandardForm"}], 
         Dynamic[
          FEPrivate`FrontEndResource[
          "PreferencesDialog", "WolframAlphaTypeset"]]}]}, {
       Dynamic[
        FEPrivate`FrontEndResource[
        "PreferencesDialog", "WolframAlphaClickingInExtrusion"]], 
       Tooltip[
        Row[{
          Checkbox[
           Dynamic[
            
            CurrentValue[$FrontEnd, {
             PrivateFrontEndOptions, "WolframAlphaSettings", 
              "ExtrusionClickClose"}, False]]], 
          Dynamic[
           FEPrivate`FrontEndResource[
           "PreferencesDialog", "WolframAlphaClickClose"]], "  ", 
          Checkbox[
           Dynamic[
            
            CurrentValue[$FrontEnd, {
             PrivateFrontEndOptions, "WolframAlphaSettings", 
              "ExtrusionClickEvaluate"}, False]]], 
          Dynamic[
           FEPrivate`FrontEndResource[
           "PreferencesDialog", "WolframAlphaClickEvaluate"]]}], 
        Dynamic[
         FEPrivate`FrontEndResource[
         "PreferencesDialog", "WolframAlphaClickTip"]]]}, {
       Dynamic[
        FEPrivate`FrontEndResource["PreferencesDialog", "WolframAlphaInfo"]], 
       
       ActionMenu[
        Dynamic[
         Switch[{
           
           CurrentValue[$FrontEnd, {
            PrivateFrontEndOptions, "WolframAlphaSettings", 
             "SendMathematicaSessionInfo"}, Automatic], 
           WolframAlphaClient`Private`$AlphaQuerySendMathematicaSessionInfo}, \
{True, 
           Blank[]}, 
          FrontEndResource["PreferencesDialog", "WolframAlphaInfoAlways"], {
          False, 
           Blank[]}, 
          FrontEndResource["PreferencesDialog", "WolframAlphaInfoNever"], {
           Blank[], True}, 
          FrontEndResource[
          "PreferencesDialog", "WolframAlphaInfoSessionYes"], {
           Blank[], False}, 
          FrontEndResource["PreferencesDialog", "WolframAlphaInfoSessionNo"], {
           Blank[], 
           Blank[]}, 
          FrontEndResource["PreferencesDialog", "WolframAlphaInfoAsk"]]], {
        Dynamic[
           FEPrivate`FrontEndResource[
           "PreferencesDialog", "WolframAlphaInfoAsk"]] :> (
          CurrentValue[$FrontEnd, {
             PrivateFrontEndOptions, "WolframAlphaSettings", 
              "SendMathematicaSessionInfo"}] = Automatic; 
          WolframAlphaClient`Private`$AlphaQuerySendMathematicaSessionInfo = 
           Automatic), Delimiter, Dynamic[
           FEPrivate`FrontEndResource[
           "PreferencesDialog", "WolframAlphaInfoNever"]] :> (
          CurrentValue[$FrontEnd, {
             PrivateFrontEndOptions, "WolframAlphaSettings", 
              "SendMathematicaSessionInfo"}] = False; 
          WolframAlphaClient`Private`$AlphaQuerySendMathematicaSessionInfo = 
           False), Dynamic[
           FEPrivate`FrontEndResource[
           "PreferencesDialog", "WolframAlphaInfoSessionNo"]] :> (
          CurrentValue[$FrontEnd, {
             PrivateFrontEndOptions, "WolframAlphaSettings", 
              "SendMathematicaSessionInfo"}] = Automatic; 
          WolframAlphaClient`Private`$AlphaQuerySendMathematicaSessionInfo = 
           False), Dynamic[
           FEPrivate`FrontEndResource[
           "PreferencesDialog", "WolframAlphaInfoSessionYes"]] :> (
          CurrentValue[$FrontEnd, {
             PrivateFrontEndOptions, "WolframAlphaSettings", 
              "SendMathematicaSessionInfo"}] = Automatic; 
          WolframAlphaClient`Private`$AlphaQuerySendMathematicaSessionInfo = 
           True), Dynamic[
           FEPrivate`FrontEndResource[
           "PreferencesDialog", "WolframAlphaInfoAlways"]] :> (
          CurrentValue[$FrontEnd, {
             PrivateFrontEndOptions, "WolframAlphaSettings", 
              "SendMathematicaSessionInfo"}] = True; 
          WolframAlphaClient`Private`$AlphaQuerySendMathematicaSessionInfo = 
           True)}, Appearance -> "PopupMenu"]}, {
       Item[
        Button[
         Dynamic[
          FEPrivate`FrontEndResource[
          "PreferencesDialog", "ResetDefaultsText"]], 
         CurrentValue[$FrontEnd, {
            PrivateFrontEndOptions, "WolframAlphaSettings"}] = {}; 
         WolframAlphaClient`Private`$AlphaQuerySendMathematicaSessionInfo = 
          Automatic, ImageSize -> All], Alignment -> Left], SpanFromLeft}}, 
     Alignment -> {{Right, Left}}]}, 
    TagBox[GridBox[{
       {
        DynamicBox[ToBoxes[
          FEPrivate`FrontEndResource[
          "PreferencesDialog", "ConnectivityText1"], StandardForm],
         ImageSizeCache->{417., {83., 13.}}], "\[SpanFromLeft]"},
       {
        DynamicBox[ToBoxes[
          FEPrivate`FrontEndResource[
          "PreferencesDialog", "ConnectivityText2"], StandardForm],
         ImageSizeCache->{674., {3., 10.}}], "\[SpanFromLeft]"},
       {
        ButtonBox[
         StyleBox[
          DynamicBox[ToBoxes[
            FEPrivate`FrontEndResource[
            "PreferencesDialog", "ConnectivityTextMore"], StandardForm],
           ImageSizeCache->{114., {0., 10.}}], "Hyperlink",
          StripOnInput->False],
         Appearance->None,
         ButtonFunction:>FEPrivate`FrontEndExecute[
           FrontEndToken[
           "OpenHelpLink", {"paclet:tutorial/InternetConnectivity", Null}]],
         Evaluator->None,
         Method->"Preemptive"], "\[SpanFromLeft]"},
       {
        RowBox[{
         CheckboxBox[Dynamic[
           CurrentValue[$FrontEnd, "AllowDownloads"]]], "\[InvisibleSpace]", 
         TogglerBox[Dynamic[
           CurrentValue[$FrontEnd, "AllowDownloads"]], {True->
          DynamicBox[ToBoxes[
            FEPrivate`FrontEndResource[
            "PreferencesDialog", "CheckInternetText"], StandardForm],
           ImageSizeCache->{302., {3., 10.}}], False->
          DynamicBox[ToBoxes[
            FEPrivate`FrontEndResource[
            "PreferencesDialog", "CheckInternetText"], StandardForm],
           ImageSizeCache->{302., {3., 10.}}]}, 
          DynamicBox[ToBoxes[
            FEPrivate`FrontEndResource[
            "PreferencesDialog", "CheckInternetText"], StandardForm],
           ImageSizeCache->{302., {3., 10.}}]]}], "\[SpanFromLeft]"},
       {
        TabViewBox[{{"AutoUpdate",
         DynamicBox[ToBoxes[
           FEPrivate`FrontEndResource["PreferencesDialog", "AutoUpdateLabel"],
            StandardForm],
          ImageSizeCache->{118., {3., 10.}}]->
         TagBox[GridBox[{
            {
             RowBox[{
              CheckboxBox[Dynamic[
                CurrentValue[$FrontEnd, "AllowDocumentationUpdates"]],
               Enabled->Dynamic[
                 CurrentValue[$FrontEnd, "AllowDownloads"]]], 
              "\[InvisibleSpace]", 
              TogglerBox[Dynamic[
                CurrentValue[$FrontEnd, "AllowDocumentationUpdates"]], {True->
               
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "PreferencesDialog", "CheckDocsText"], StandardForm],
                ImageSizeCache->{295., {3., 10.}}], False->
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "PreferencesDialog", "CheckDocsText"], StandardForm],
                ImageSizeCache->{295., {3., 10.}}]}, 
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "PreferencesDialog", "CheckDocsText"], StandardForm],
                ImageSizeCache->{295., {3., 10.}}],
               Enabled->Dynamic[
                 CurrentValue[$FrontEnd, "AllowDownloads"]]]}]},
            {
             RowBox[{
              CheckboxBox[Dynamic[
                CurrentValue[$FrontEnd, "AllowDataUpdates"]],
               Enabled->Dynamic[
                 CurrentValue[$FrontEnd, "AllowDownloads"]]], 
              "\[InvisibleSpace]", 
              TogglerBox[Dynamic[
                CurrentValue[$FrontEnd, "AllowDataUpdates"]], {True->
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "PreferencesDialog", "CheckDataText"], StandardForm],
                ImageSizeCache->{230., {3., 10.}}], False->
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "PreferencesDialog", "CheckDataText"], StandardForm],
                ImageSizeCache->{230., {3., 10.}}]}, 
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "PreferencesDialog", "CheckDataText"], StandardForm],
                ImageSizeCache->{230., {3., 10.}}],
               Enabled->Dynamic[
                 CurrentValue[$FrontEnd, "AllowDownloads"]]]}]},
            {
             ButtonBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource[
                "PreferencesDialog", "UpdateLocalIndexButtonText"], 
                StandardForm],
               ImageSizeCache->{348., {3., 10.}}],
              Appearance->Automatic,
              
              ButtonFunction:>(Needs["PacletManager`"]; 
               PacletManager`PacletSiteUpdate[
                PacletManager`$PacletSite, Interactive -> True]),
              Enabled->Dynamic[
                CurrentValue[$FrontEnd, "AllowDownloads"]],
              Evaluator->Automatic,
              ImageSize->All,
              Method->"Queued"]}
           },
           DefaultBaseStyle->"Column",
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Column"]}, {"WolframAlpha",
         DynamicBox[ToBoxes[
           FEPrivate`FrontEndResource[
           "PreferencesDialog", "WolframAlphaLabel"], StandardForm],
          ImageSizeCache->{145., {3., 10.}}]->
         DynamicBox[
          ToBoxes[$CellContext`wolframAlphaSettingsGrid$$, StandardForm],
          ImageSizeCache->{448., {111.14208984375, 117.85791015625}}]}, {
         "Proxy",
         DynamicBox[ToBoxes[
           FEPrivate`FrontEndResource["PreferencesDialog", "ProxyLabel"], 
           StandardForm],
          ImageSizeCache->{90., {3., 10.}}]->
         DynamicBox[ToBoxes[$CellContext`proxySettingsGrid$$, StandardForm],
          ImageSizeCache->{497., {97.64208984375, 104.35791015625}}]}, {"Mail",
         DynamicBox[ToBoxes[
           FEPrivate`FrontEndResource["PreferencesDialog", "MailLabel"], 
           StandardForm],
          ImageSizeCache->{80., {3., 10.}}]->
         DynamicBox[ToBoxes[$CellContext`mailSettingsGrid$$, StandardForm],
          ImageSizeCache->{620., {184., 191.}}]}}, Dynamic[
          
          CurrentValue[$FrontEnd, {
           PrivateFrontEndOptions, "DialogSettings", "Preferences", "SubTabs",
             "Internet"}, "AutoUpdate"]],
         ImageSize->Dynamic[
           FEPrivate`If[
            FEPrivate`SameQ[FEPrivate`$OperatingSystem, "Windows"], All, 
            All]]], "\[SpanFromLeft]"},
       {
        TemplateBox[{ButtonBox[
           DynamicBox[
            ToBoxes[
             FEPrivate`FrontEndResource[
             "PreferencesDialog", "TestConnectivityButtonText"], 
             StandardForm]], 
           ButtonFunction :> (Needs["PacletManager`"]; 
            PacletManager`$AllowInternet = 
             CurrentValue[$FrontEnd, "AllowDownloads"]; 
            PacletManager`Package`testConnectivity[]), ImageSize -> All, 
           Enabled -> Dynamic[
             CurrentValue[$FrontEnd, "AllowDownloads"]], Method -> "Queued", 
           Appearance -> Automatic, Evaluator -> Automatic],"\"\""},
         "RowDefault"], "\[SpanFromLeft]"}
      },
      AutoDelete->False,
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      GridBoxSpacings->{"Columns" -> {{0.8}}, "Rows" -> {0, 1, 0.1, 1, 2, 2}}],
     "Grid"],
    DynamicModuleValues:>{}],
   ImageMargins->10,
   ImageSize->{Automatic, 600}],
  StripOnInput->False,
  FontFamily:>CurrentValue["PanelFontFamily"],
  FontSize:>CurrentValue["ControlsFontSize"]]],ExpressionUUID->"f778319b-f96e-\
4af9-9201-5afdc02791a6"]
},
Evaluator->"Local",
WindowSize->Fit,
WindowMargins->Automatic,
WindowTitle->FEPrivate`FrontEndResource[
 "PreferencesDialog", "WindowTitleLabel"],
PrivateNotebookOptions->{"FileOutlineCache"->True},
TaggingRules->{
 "MainTabViewApproxWidth" -> 600, "TabViewApproxWidth" :> FE`Evaluate[
    FEPrivate`If[
     FEPrivate`SameQ[FEPrivate`$OperatingSystem, "Windows"], 580, 660]]},
CheckboxBoxOptions->{ImageMargins->{{0, 5}, {0, 0}}},
InputFieldBoxOptions->{ContinuousAction->False},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (November 22, 2018)",
StyleDefinitions->"SystemDialog.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[591, 21, 44653, 967, 638, InheritFromParent,ExpressionUUID->"f778319b-f96e-4af9-9201-5afdc02791a6"]
}
]
*)

(* End of internal cache information *)

(* NotebookSignature DLjrmm0cESarKI5ZDBfriER# *)
