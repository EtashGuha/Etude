(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    231222,       5189]
NotebookOptionsPosition[    230681,       5169]
NotebookOutlinePosition[    231226,       5190]
CellTagsIndexPosition[    231146,       5185]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 DynamicModuleBox[{$CellContext`selType$$ = 0, $CellContext`fixRatio$$ = 
  True, $CellContext`opcurrent$$ = ImageResize[#, {
    Scaled[1], 
    Scaled[
    1]}]& , $CellContext`image$$, $CellContext`imageThumbnail$$, \
$CellContext`maskTool$$ = "GetRectangleImageMask", $CellContext`maskFill$$ = 
  True, $CellContext`query$$ = None, $CellContext`alphamode$$ = "More"}, 
  DynamicModuleBox[{Ribbon`Private`page$$ = None, 
   Ribbon`Private`mouseover$$ = {0}}, 
   TagBox[GridBox[{
      {
       ItemBox[
        TagBox[GridBox[{
           {
            TagBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageSelectorIcon.png"]],
                   ImageSizeCache->{14., {9., 14.}}], "RibbonTabLabel",
                  StripOnInput->False], True->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageSelectorIconHighlight.png"]],
                   ImageSizeCache->{14., {9., 14.}}], "RibbonTabLabelActive",
                  StripOnInput->False]}, Dynamic[
                  FEPrivate`Or[
                   FEPrivate`SameQ[Ribbon`Private`page$$, "Select"], 
                   FEPrivate`SameQ[Ribbon`Private`mouseover$$, {1}]]]],
                Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "TabAbuttingRightNinePatchAppearance"], 
                  "Select", 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingRightBottomPressedNinePatchAppearance"], 
                  Blank[], 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingRightBottomNinePatchAppearance"]],
                BaseStyle->{},
                
                ButtonFunction:>(($CellContext`selType$$ = 1; 
                  MathLink`CallFrontEnd[
                    FrontEnd`SelectionMove[
                    FrontEnd`AttachedCellParent[], All, Graphics, AutoScroll -> 
                    False]]; FrontEndExecute[
                    FrontEnd`Select2DTool["GetRectangleImageSelection"]]; 
                  Null); Ribbon`Private`page$$ = "Select"),
                DefaultBaseStyle->"RibbonButton",
                Evaluator->Automatic,
                FrameMargins->{{10, 10}, {0, 0}},
                ImageSize->49,
                Method->"Preemptive"],
               DynamicBox[
                FEPrivate`FrontEndResource[
                "ImageEditModeMenu", "SelectionTooltip"], 
                BaseStyle -> {"TextStyling"}]],
              Annotation[#, 
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "ImageEditModeMenu", "SelectionTooltip"]], 
                BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {1}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {1}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], 
            TagBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageCropIcon.png"]],
                   ImageSizeCache->{16., {9., 14.}}], "RibbonTabLabel",
                  StripOnInput->False], True->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageCropIconHighlight.png"]],
                   ImageSizeCache->{16., {9., 14.}}], "RibbonTabLabelActive",
                  StripOnInput->False]}, Dynamic[
                  FEPrivate`Or[
                   FEPrivate`SameQ[Ribbon`Private`page$$, "Crop"], 
                   FEPrivate`SameQ[Ribbon`Private`mouseover$$, {2}]]]],
                Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "TabAbuttingLeftRightNinePatchAppearance"],
                   "Crop", 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomPressedNinePatchAppearance"], 
                  Blank[], 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomNinePatchAppearance"]],
                BaseStyle->{},
                
                ButtonFunction:>(($CellContext`selType$$ = 6; 
                  MathLink`CallFrontEnd[
                    FrontEnd`SelectionMove[
                    FrontEnd`AttachedCellParent[], All, Graphics, AutoScroll -> 
                    False]]; FrontEndExecute[
                    FrontEnd`Select2DTool["GetRectangleCrop"]]; Null); 
                 Ribbon`Private`page$$ = "Crop"),
                DefaultBaseStyle->"RibbonButton",
                Evaluator->Automatic,
                FrameMargins->{{10, 10}, {0, 0}},
                ImageSize->49,
                Method->"Preemptive"],
               DynamicBox[
                FEPrivate`FrontEndResource[
                "ImageEditModeMenu", "CropTooltip"], 
                BaseStyle -> {"TextStyling"}]],
              Annotation[#, 
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "ImageEditModeMenu", "CropTooltip"]], 
                BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {2}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {2}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], 
            TagBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageTransformIcon.png"]],
                   ImageSizeCache->{23., {9., 14.}}], "RibbonTabLabel",
                  StripOnInput->False], True->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageTransformIconHighlight.png"]],
                   ImageSizeCache->{23., {9., 14.}}], "RibbonTabLabelActive",
                  StripOnInput->False]}, Dynamic[
                  FEPrivate`Or[
                   FEPrivate`SameQ[Ribbon`Private`page$$, "Transform"], 
                   FEPrivate`SameQ[Ribbon`Private`mouseover$$, {3}]]]],
                Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "TabAbuttingLeftRightNinePatchAppearance"],
                   "Transform", 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomPressedNinePatchAppearance"], 
                  Blank[], 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomNinePatchAppearance"]],
                BaseStyle->{},
                ButtonFunction:>(($CellContext`selType$$ = 0; FrontEndExecute[
                    FrontEnd`Select2DTool["Select"]]; MathLink`CallFrontEnd[
                    FrontEnd`SelectionMove[
                    FrontEnd`AttachedCellParent[], All, Graphics, AutoScroll -> 
                    False]]); Ribbon`Private`page$$ = "Transform"),
                DefaultBaseStyle->"RibbonButton",
                Evaluator->Automatic,
                FrameMargins->{{10, 10}, {0, 0}},
                ImageSize->49,
                Method->"Preemptive"],
               DynamicBox[
                FEPrivate`FrontEndResource[
                "ImageEditModeMenu", "TransformTooltip"], 
                BaseStyle -> {"TextStyling"}]],
              Annotation[#, 
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "ImageEditModeMenu", "TransformTooltip"]], 
                BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {3}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {3}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], 
            TagBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageCoordinatesIcon.png"]],
                   ImageSizeCache->{22., {9., 14.}}], "RibbonTabLabel",
                  StripOnInput->False], True->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageCoordinatesIconHighlight.png"]],
                   ImageSizeCache->{22., {9., 14.}}], "RibbonTabLabelActive",
                  StripOnInput->False]}, Dynamic[
                  FEPrivate`Or[
                   FEPrivate`SameQ[Ribbon`Private`page$$, "Coordinates"], 
                   FEPrivate`SameQ[Ribbon`Private`mouseover$$, {4}]]]],
                Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "TabAbuttingLeftRightNinePatchAppearance"],
                   "Coordinates", 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomPressedNinePatchAppearance"], 
                  Blank[], 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomNinePatchAppearance"]],
                BaseStyle->{},
                ButtonFunction:>(FrontEndExecute[
                   FrontEnd`Select2DTool["GetPixelPointMarkers"]]; 
                 Ribbon`Private`page$$ = "Coordinates"),
                DefaultBaseStyle->"RibbonButton",
                Evaluator->Automatic,
                FrameMargins->{{10, 10}, {0, 0}},
                ImageSize->49,
                Method->"Preemptive"],
               DynamicBox[
                FEPrivate`FrontEndResource[
                "ImageEditModeMenu", "CoordinatesTooltip"], 
                BaseStyle -> {"TextStyling"}]],
              Annotation[#, 
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "ImageEditModeMenu", "CoordinatesTooltip"]], 
                BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {4}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {4}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], 
            TagBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageMaskIcon.png"]],
                   ImageSizeCache->{18., {9., 14.}}], "RibbonTabLabel",
                  StripOnInput->False], True->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageMaskIconHighlight.png"]],
                   ImageSizeCache->{18., {9., 14.}}], "RibbonTabLabelActive",
                  StripOnInput->False]}, Dynamic[
                  FEPrivate`Or[
                   FEPrivate`SameQ[Ribbon`Private`page$$, "MaskCreate"], 
                   FEPrivate`SameQ[Ribbon`Private`mouseover$$, {5}]]]],
                Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "TabAbuttingLeftRightNinePatchAppearance"],
                   "MaskCreate", 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomPressedNinePatchAppearance"], 
                  Blank[], 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomNinePatchAppearance"]],
                BaseStyle->{},
                ButtonFunction:>((FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]]; 
                  CurrentValue[$FrontEnd, "MarkerLineThickness"] = 1); 
                 Ribbon`Private`page$$ = "MaskCreate"),
                DefaultBaseStyle->"RibbonButton",
                Evaluator->Automatic,
                FrameMargins->{{10, 10}, {0, 0}},
                ImageSize->49,
                Method->"Preemptive"],
               DynamicBox[
                FEPrivate`FrontEndResource[
                "ImageEditModeMenu", "MaskTooltip"], 
                BaseStyle -> {"TextStyling"}]],
              Annotation[#, 
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "ImageEditModeMenu", "MaskTooltip"]], 
                BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {5}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {5}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], 
            TagBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageInformationIcon.png"]],
                   ImageSizeCache->{17., {9., 14.}}], "RibbonTabLabel",
                  StripOnInput->False], True->
                 StyleBox[
                  DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageInformationIconHighlight.png"]],
                   ImageSizeCache->{17., {9., 14.}}], "RibbonTabLabelActive",
                  StripOnInput->False]}, Dynamic[
                  FEPrivate`Or[
                   FEPrivate`SameQ[Ribbon`Private`page$$, "InfoAndZoom"], 
                   FEPrivate`SameQ[Ribbon`Private`mouseover$$, {6}]]]],
                Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "TabAbuttingLeftRightNinePatchAppearance"],
                   "InfoAndZoom", 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomPressedNinePatchAppearance"], 
                  Blank[], 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftRightBottomNinePatchAppearance"]],
                BaseStyle->{},
                ButtonFunction:>(($CellContext`selType$$ = 0; FrontEndExecute[
                    FrontEnd`Select2DTool["DisplayImageTooltip"]]; 
                  MathLink`CallFrontEnd[
                    FrontEnd`SelectionMove[
                    FrontEnd`AttachedCellParent[], All, Graphics, AutoScroll -> 
                    False]]); Ribbon`Private`page$$ = "InfoAndZoom"),
                DefaultBaseStyle->"RibbonButton",
                Evaluator->Automatic,
                FrameMargins->{{10, 10}, {0, 0}},
                ImageSize->49,
                Method->"Preemptive"],
               DynamicBox[
                FEPrivate`FrontEndResource[
                "ImageEditModeMenu", "InfoAndZoomTooltip"], 
                BaseStyle -> {"TextStyling"}]],
              Annotation[#, 
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "ImageEditModeMenu", "InfoAndZoomTooltip"]], 
                BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {6}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {6}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], 
            TagBox[
             TagBox[
              TooltipBox[
               ButtonBox[
                PaneSelectorBox[{False->
                 StyleBox[
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "ImageEditModeMenu", "MoreTab"],
                   BaseStyle->{"TextStyling"},
                   ImageSizeCache->{41., {1., 6.}}], "RibbonTabLabel",
                  StripOnInput->False], True->
                 StyleBox[
                  
                  DynamicBox[FEPrivate`FrontEndResource[
                   "ImageEditModeMenu", "MoreTab"],
                   BaseStyle->{"TextStyling"},
                   ImageSizeCache->{41., {1., 6.}}], "RibbonTabLabelActive",
                  StripOnInput->False]}, Dynamic[
                  FEPrivate`Or[
                   FEPrivate`SameQ[Ribbon`Private`page$$, "More"], 
                   FEPrivate`SameQ[Ribbon`Private`mouseover$$, {7}]]]],
                Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "TabAbuttingLeftNinePatchAppearance"], 
                  "More", 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftBottomPressedNinePatchAppearance"], 
                  Blank[], 
                  FEPrivate`FrontEndResource[
                  "FEExpressions", 
                   "TabAbuttingLeftBottomNinePatchAppearance"]],
                BaseStyle->{},
                
                ButtonFunction:>(($CellContext`alphamode$$ = 
                   "More"; $CellContext`query$$ = 
                   None; $CellContext`selType$$ = 0; FrontEndExecute[
                    FrontEnd`Select2DTool["Select"]]; MathLink`CallFrontEnd[
                    FrontEnd`SelectionMove[
                    FrontEnd`AttachedCellParent[], All, Graphics, AutoScroll -> 
                    False]]); Ribbon`Private`page$$ = "More"),
                DefaultBaseStyle->"RibbonButton",
                Evaluator->Automatic,
                FrameMargins->{{10, 10}, {0, 0}},
                ImageSize->69,
                Method->"Preemptive"],
               DynamicBox[
                FEPrivate`FrontEndResource[
                "ImageEditModeMenu", "MoreTooltip"], 
                BaseStyle -> {"TextStyling"}]],
              Annotation[#, 
               Dynamic[
                RawBoxes[
                 FEPrivate`FrontEndResource[
                 "ImageEditModeMenu", "MoreTooltip"]], 
                BaseStyle -> {"TextStyling"}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {7}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {7}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]], 
            TagBox[
             ButtonBox["\<\"\"\>",
              Appearance:>FEPrivate`Switch[Ribbon`Private`page$$, None, None, 
                Blank[], 
                FEPrivate`FrontEndResource[
                "FEExpressions", "TabEmptyNinePatchAppearance"]],
              BaseStyle->{ShowStringCharacters -> False},
              ButtonFunction:>Null,
              DefaultBaseStyle->{},
              Enabled->False,
              Evaluator->Automatic,
              FrameMargins->{{0, 0}, {0, 0}},
              ImageSize:>FEPrivate`Switch[Ribbon`Private`page$$, None, {1, 1}, 
                Blank[], 149],
              Method->"Preemptive"],
             
             EventHandlerTag[{
              "MouseEntered" :> 
               FEPrivate`Set[Ribbon`Private`mouseover$$, {8}], "MouseExited" :> 
               FEPrivate`If[
                 FEPrivate`SameQ[Ribbon`Private`mouseover$$, {8}], 
                 FEPrivate`Set[Ribbon`Private`mouseover$$, {0}]], 
               PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
               True}]]}
          },
          AutoDelete->False,
          GridBoxAlignment->{"Rows" -> {{Bottom}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
         "Grid"],
        Alignment->Bottom,
        StripOnInput->False]},
      {
       ItemBox[
        PaneSelectorBox[{None->"\<\"\"\>", "Select"->
         TagBox[
          TagBox[GridBox[{
             {
              PanelBox[
               TagBox[GridBox[{
                  {
                   PaneBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "SelectionTitle"],
                    BaseStyle->{"TextStyling"}], "RibbonTitle",
                    StripOnInput->False]},
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "SelectionCaption"],
                    BaseStyle->{"TextStyling"}], "RibbonCaption",
                    StripOnInput->False]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}],
                    "Column"],
                    ImageMargins->{{8, 0}, {5, 5}}], 
                   ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                   ItemBox[
                    ButtonBox[
                    PaneSelectorBox[{False->
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, "Close.png"]]],
                     True->
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "Close-Hover.png"]]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    ButtonFunction:>(Ribbon`Private`page$$ = None),
                    ContentPadding->False,
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->{{0, 8}, {8, 4}},
                    Method->"Preemptive"],
                    Alignment->Center,
                    StripOnInput->False]}
                 },
                 AutoDelete->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Left, Left, Right}, "Rows" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                 GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                "Grid"],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentTitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->512]},
             {
              PanelBox[
               PaneBox[
                TagBox[GridBox[{
                   {
                    PanelBox[
                    PaneBox[
                    TagBox[
                    TagBox[GridBox[{
                    {
                    TagBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`selType$$, ($CellContext`selType$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[
                    "GetRectangleImageSelection"]])& ], {1}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`selType$$ === 1, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "RectangleSelectionIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "RectangleSelection"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "RectangleSelection"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`selType$$, ($CellContext`selType$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool["GetDiskImageSelection"]])& ], {2}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`selType$$ === 2, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "DiskSelectionIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "DiskSelection"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "DiskSelection"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`selType$$, ($CellContext`selType$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool["GetLassoImageSelection"]])& ], {3}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`selType$$ === 3, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "LassoSelectionIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "LassoSelection"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "LassoSelection"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`selType$$, ($CellContext`selType$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool["EraseImageSelectionMarker"]])& ], {
                    9}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`selType$$ === 9, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageEditEraser.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "EraseSelection"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "EraseSelection"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], "\<\"\"\>", 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ClearMarkers"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayNinePatchAppearance"],
                    BaseStyle->{"RibbonBold"},
                    
                    ButtonFunction:>FrontEndTokenExecute[
                    "ClearMultiSelMarkers"],
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->100,
                    Method->"Preemptive"]}
                    },
                    AutoDelete->False,
                    BaselinePosition->Center,
                    GridBoxAlignment->{"Rows" -> {{Bottom}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"]},
                    {
                    DynamicModuleBox[{$CellContext`open$$ = False}, 
                    PaneSelectorBox[{True->
                    TagBox[GridBox[{
                    {
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ViewOptions"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold], 
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "TooltipOptionsUpArrow.png"]]]}
                    },
                    AutoDelete->False,
                    BaseStyle->{CacheGraphics -> False},
                    
                    GridBoxAlignment->{
                    "Columns" -> {Left, Right}, "Rows" -> {{Automatic}}},
                    GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.5]}}}],
                    "Grid"],
                    Alignment->Left,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "TooltipOptionsBarNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>($CellContext`open$$ = False),
                    Evaluator->Automatic,
                    FrameMargins->{{10, 10}, {2, 2}},
                    ImageSize->340,
                    Method->"Preemptive"]},
                    {
                    PanelBox[
                    TagBox[GridBox[{
                    {
                    SliderBox[Dynamic[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]], {39, 
                    3, -6},
                    ImageSize->Small], 
                    TagBox[GridBox[{
                    {
                    
                    GraphicsBox[{RasterBox[Dynamic[
                    Reverse[ImageData[ImageTake[
                    ToExpression[FE`Evaluate[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageEditingTooltipPreview.png"]]]], {
                    20 - IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2], 20 + 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2]}, {
                    20 - IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2], 20 + 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2]}]]]]], 
                    {EdgeForm[{RGBColor[0, 0, 0], Opacity[0.4], 
                    AbsoluteThickness[3]}], FaceForm[None], 
                    DynamicBox[Typeset`ToBoxes[
                    Rectangle[{
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2], 
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2]}, {
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1, 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1}], StandardForm, 
                    Graphics]]}, 
                    {EdgeForm[{RGBColor[1, 1, 1], Opacity[0.8], 
                    AbsoluteThickness[1]}], FaceForm[None], 
                    DynamicBox[Typeset`ToBoxes[
                    Rectangle[{
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2], 
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2]}, {
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1, 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1}], StandardForm, 
                    Graphics]]}},
                    ImageSize->100]},
                    {
                    TemplateBox[{DynamicBox[
                    ToBoxes[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"], 
                    StandardForm]],"\"px x \"",DynamicBox[
                    ToBoxes[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"], 
                    StandardForm]],"\"px\""},
                    "RowDefault"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Center}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}],
                    "Column"]},
                    {
                    TagBox[GridBox[{
                    {
                    CheckboxBox[Dynamic[
                    CurrentValue[$FrontEnd, "DisplayImagePixels"]], {
                    "TooltipInfo", "DetailExploreView"},
                    BaselinePosition->Scaled[0.3]], 
                    TagBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ShowImagePeek"],
                    BaseStyle->{"TextStyling"}],
                    
                    EventHandlerTag[{"MouseClicked" :> (
                    CurrentValue[$FrontEnd, "DisplayImagePixels"] = 
                    If[CurrentValue[$FrontEnd, "DisplayImagePixels"] =!= 
                    "TooltipInfo", "TooltipInfo", "DetailExploreView"]), 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{0.5}}}],
                    "Grid"], "\[SpanFromAbove]"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{5}}, "Rows" -> {{1}}}],
                    "Grid"],
                    Alignment->Center,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", 
                    "TooltipOptionsBottomNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    FrameMargins->10,
                    ImageSize->340]}
                    },
                    BaseStyle->"RibbonText",
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.1}}}],
                    "Column"], False->
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ViewOptions"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "TooltipOptionsDownArrow.png"]]]}
                    },
                    AutoDelete->False,
                    BaseStyle->{CacheGraphics -> False},
                    
                    GridBoxAlignment->{
                    "Columns" -> {Left, Right}, "Rows" -> {{Automatic}}},
                    GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.5]}}}],
                    "Grid"],
                    Alignment->Left,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "TooltipOptionsBarNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>($CellContext`open$$ = True),
                    Evaluator->Automatic,
                    FrameMargins->{{10, 10}, {2, 2}},
                    ImageSize->340,
                    Method->"Preemptive"]}, Dynamic[$CellContext`open$$],
                    ImageSize->Automatic],
                    DynamicModuleValues:>{}]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.5}}}],
                    "Grid"],
                    Deploy,
                    DefaultBaseStyle->"Deploy"],
                    FrameMargins->10],
                    Alignment->{Left, Top},
                    Appearance->{
                    "Default" -> 
                    FrontEnd`FileName[{"Ribbons", "Common"}, 
                    "ContentAreaLeft.9.png"]},
                    DefaultBaseStyle->{},
                    ImageSize->362], 
                    PaneBox[
                    TagBox[
                    TagBox[GridBox[{
                    {
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Cancel"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->{"RibbonBold"},
                    
                    ButtonFunction:>{
                    Ribbon`Private`page$$ = None, $CellContext`selType$$ = 0; 
                    FrontEndExecute[
                    FrontEnd`Select2DTool["Select"]]; MathLink`CallFrontEnd[
                    FrontEnd`SelectionMove[
                    FrontEnd`AttachedCellParent[], All, Graphics, AutoScroll -> 
                    False]]},
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->87,
                    Method->"Preemptive"]},
                    {
                    TemplateBox[{ActionMenuBox[
                    ButtonBox[
                    TagBox[
                    GridBox[{{
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CopyToClipboard"], 
                    BaseStyle -> {"TextStyling"}], 
                    PaneBox[
                    DynamicBox[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "OrangeButtonDownPointer.png"]]], 
                    BaselinePosition -> (Scaled[0.3] -> Axis)]}}, 
                    GridBoxAlignment -> {"Rows" -> {{Baseline}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Grid"], ButtonFunction :> {}, Evaluator -> None, 
                    FrameMargins -> 0, ImageSize -> 87, Appearance :> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "OrangeButtonNinePatchAppearance"], 
                    BaseStyle -> {"RibbonWhite"}, Method -> "Preemptive"], {
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ImageSingle"], 
                    BaseStyle -> {"TextStyling"}] :> 
                    Block[{FrontEnd`Private`$RibbonCopyMenu = True}, 
                    FrontEnd`Private`ImageEditingCopyMarkers[
                    $CellContext`image$$[]]], DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ImageList"], 
                    BaseStyle -> {"TextStyling"}] :> 
                    Block[{$CellContext`obj, $CellContext`result, \
$CellContext`imgTake, $CellContext`imgSel, $CellContext`range, \
$CellContext`alpha}, $CellContext`obj = MathLink`CallFrontEnd[
                    FrontEnd`AttachedCellParent[]]; $CellContext`range = 
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`GetlImageMarkersIndicesList[$CellContext`obj]]]; 
                    If[
                    MatchQ[$CellContext`range, {
                    Repeated[{{
                    Blank[], 
                    Blank[]}, {
                    Blank[], 
                    Blank[]}}]}], $CellContext`imgSel = MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    
                    FEPrivate`GetImageMarkerGraphicsList[$CellContext`obj]]]; \
$CellContext`imgTake = Map[ImageTake[
                    $CellContext`image$$[], 
                    Part[#, 1], 
                    Part[#, 2]]& , $CellContext`range]; $CellContext`alpha = 
                    Map[ToExpression, $CellContext`imgSel]; \
$CellContext`result = MapThread[If[
                    Or[ImageColorSpace[#] === Automatic, 
                    And[
                    ImageMeasurements[#, "Transparency"], ImageMeasurements[
                    AlphaChannel[#], "Min"] < 1]], 
                    ImageApply[1& , #, Masking -> ColorNegate[#2]], 
                    
                    SetAlphaChannel[#, #2]]& , {$CellContext`imgTake, \
$CellContext`alpha}], $CellContext`result = {
                    $CellContext`image$$[]}]; CopyToClipboard[
                    ExpressionCell[$CellContext`result, "Input"]]]}, Method -> 
                    "Queued", Appearance -> None, MenuStyle -> "RibbonText"]},
                    "RowDefault"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
                    "Column"],
                    Deploy,
                    DefaultBaseStyle->"Deploy"],
                    Alignment->Center,
                    Appearance->None,
                    FrameMargins->10,
                    ImageSize->150]}
                  },
                  AutoDelete->False,
                  
                  FrameStyle->RGBColor[
                   0.7019607843137254, 0.7019607843137254, 0.7019607843137254],
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxDividers->{
                   "Columns" -> {False, {True}, False}, "Rows" -> {{False}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                  GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                 "Grid"]],
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentArea.9.png"]},
               DefaultBaseStyle->{},
               FrameMargins->0,
               ImageSize->512]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
           "Column"],
          Deploy,
          DefaultBaseStyle->"Deploy"], "Crop"->
         TagBox[
          TagBox[GridBox[{
             {
              PanelBox[
               TagBox[GridBox[{
                  {
                   PaneBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CropTitle"],
                    BaseStyle->{"TextStyling"}], "RibbonTitle",
                    StripOnInput->False]},
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CropCaption"],
                    BaseStyle->{"TextStyling"}], "RibbonCaption",
                    StripOnInput->False]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}],
                    "Column"],
                    ImageMargins->{{8, 0}, {5, 5}}], 
                   ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                   ItemBox[
                    ButtonBox[
                    PaneSelectorBox[{False->
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, "Close.png"]]],
                     True->
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "Close-Hover.png"]]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    ButtonFunction:>(Ribbon`Private`page$$ = None),
                    ContentPadding->False,
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->{{0, 8}, {8, 4}},
                    Method->"Preemptive"],
                    Alignment->Center,
                    StripOnInput->False]}
                 },
                 AutoDelete->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Left, Left, Right}, "Rows" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                 GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                "Grid"],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentTitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->512]},
             {
              PanelBox[
               PaneBox[
                TagBox[GridBox[{
                   {
                    PanelBox[
                    PaneBox[
                    TagBox[
                    TagBox[GridBox[{
                    {
                    TagBox[GridBox[{
                    {
                    StyleBox["\<\"Aspect Ratio:\"\>",
                    StripOnInput->False,
                    FontWeight->Bold], 
                    PopupMenuBox[Dynamic[
                    CurrentValue[$FrontEnd, "MarkerAspectRatio"], (
                    CurrentValue[$FrontEnd, "MarkerAspectRatio"] = #; 
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`SetCropMarkerRect[#]]])& ], {
                    0->"\<\"Variable\"\>", 1->"\<\"1:1\"\>", 
                    1.5->"\<\"4:6\"\>", 0.66666->"\<\"6:4\"\>", 
                    1.4->"\<\"5:7\"\>", 0.71429->"\<\"7:5\"\>", 
                    1.77777->"\<\"9:16\"\>", 0.5625->"\<\"16:9\"\>"},
                    BaseStyle->"RibbonText",
                    MenuStyle->"RibbonText"], 
                    ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "AutoCrop"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->{"RibbonText"},
                    
                    ButtonFunction:>
                    Block[{$CellContext`w, $CellContext`h, $CellContext`l, \
$CellContext`r, $CellContext`b, $CellContext`t, $CellContext`p}, 
                    CurrentValue[$FrontEnd, "MarkerAspectRatio"] = 
                    0; {$CellContext`w, $CellContext`h} = ImageDimensions[
                    $CellContext`image$$[]]; {{$CellContext`l, \
$CellContext`r}, {$CellContext`b, $CellContext`t}} = BorderDimensions[
                    $CellContext`image$$[]]; If[
                    Not[
                    
                    MatchQ[{$CellContext`l, $CellContext`r, $CellContext`b, \
$CellContext`t}, {
                    PatternTest[
                    BlankSequence[], Positive]}]], $CellContext`p = 
                    0.2; {$CellContext`l, $CellContext`r, $CellContext`b, \
$CellContext`t} = {
                    Floor[$CellContext`l $CellContext`p], 
                    Ceiling[$CellContext`r $CellContext`p], 
                    Floor[$CellContext`b $CellContext`p], 
                    Ceiling[$CellContext`t $CellContext`p]}]; 
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    
                    FEPrivate`SetAutoCropMarker[{{$CellContext`l, \
$CellContext`b}, {$CellContext`w - $CellContext`r, $CellContext`h - \
$CellContext`t}}]]]],
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->75,
                    Method->"Queued"], 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ClearCrop"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->{"RibbonText"},
                    ButtonFunction:>FrontEndTokenExecute["ClearCropMarker"],
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->75,
                    Method->"Preemptive"]}
                    },
                    AutoDelete->False,
                    
                    FrameStyle->RGBColor[
                    0.7019607843137254, 0.7019607843137254, 
                    0.7019607843137254],
                    
                    GridBoxDividers->{
                    "Columns" -> {False, False, False, False, True}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {0.4, 0.4, 1, 1, 1}}],
                    "Grid"]},
                    {
                    DynamicModuleBox[{$CellContext`open$$ = False}, 
                    PaneSelectorBox[{True->
                    TagBox[GridBox[{
                    {
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ViewOptions"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "TooltipOptionsUpArrow.png"]]]}
                    },
                    AutoDelete->False,
                    BaseStyle->{CacheGraphics -> False},
                    
                    GridBoxAlignment->{
                    "Columns" -> {Left, Right}, "Rows" -> {{Automatic}}},
                    GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.5]}}}],
                    "Grid"],
                    Alignment->Left,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "TooltipOptionsBarNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>($CellContext`open$$ = False),
                    Evaluator->Automatic,
                    FrameMargins->{{10, 10}, {2, 2}},
                    ImageSize->340,
                    Method->"Preemptive"]},
                    {
                    PanelBox[
                    TagBox[GridBox[{
                    {
                    SliderBox[Dynamic[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]], {39, 
                    3, -6},
                    ImageSize->Small], 
                    TagBox[GridBox[{
                    {
                    
                    GraphicsBox[{RasterBox[Dynamic[
                    Reverse[ImageData[ImageTake[
                    ToExpression[FE`Evaluate[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageEditingTooltipPreview.png"]]]], {
                    20 - IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2], 20 + 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2]}, {
                    20 - IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2], 20 + 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2]}]]]]], 
                    {EdgeForm[{RGBColor[0, 0, 0], Opacity[0.4], 
                    AbsoluteThickness[3]}], FaceForm[None], 
                    DynamicBox[Typeset`ToBoxes[
                    Rectangle[{
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2], 
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2]}, {
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1, 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1}], StandardForm, 
                    Graphics]]}, 
                    {EdgeForm[{RGBColor[1, 1, 1], Opacity[0.8], 
                    AbsoluteThickness[1]}], FaceForm[None], 
                    DynamicBox[Typeset`ToBoxes[
                    Rectangle[{
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2], 
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2]}, {
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1, 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1}], StandardForm, 
                    Graphics]]}},
                    ImageSize->100]},
                    {
                    TemplateBox[{DynamicBox[
                    ToBoxes[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"], 
                    StandardForm]],"\"px x \"",DynamicBox[
                    ToBoxes[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"], 
                    StandardForm]],"\"px\""},
                    "RowDefault"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Center}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}],
                    "Column"]},
                    {
                    TagBox[GridBox[{
                    {
                    CheckboxBox[Dynamic[
                    CurrentValue[$FrontEnd, "DisplayImagePixels"]], {
                    "TooltipInfo", "DetailExploreView"},
                    BaselinePosition->Scaled[0.3]], 
                    TagBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ShowImagePeek"],
                    BaseStyle->{"TextStyling"}],
                    
                    EventHandlerTag[{"MouseClicked" :> (
                    CurrentValue[$FrontEnd, "DisplayImagePixels"] = 
                    If[CurrentValue[$FrontEnd, "DisplayImagePixels"] =!= 
                    "TooltipInfo", "TooltipInfo", "DetailExploreView"]), 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{0.5}}}],
                    "Grid"], "\[SpanFromAbove]"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{5}}, "Rows" -> {{1}}}],
                    "Grid"],
                    Alignment->Center,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", 
                    "TooltipOptionsBottomNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    FrameMargins->10,
                    ImageSize->340]}
                    },
                    BaseStyle->"RibbonText",
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.1}}}],
                    "Column"], False->
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ViewOptions"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "TooltipOptionsDownArrow.png"]]]}
                    },
                    AutoDelete->False,
                    BaseStyle->{CacheGraphics -> False},
                    
                    GridBoxAlignment->{
                    "Columns" -> {Left, Right}, "Rows" -> {{Automatic}}},
                    GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.5]}}}],
                    "Grid"],
                    Alignment->Left,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "TooltipOptionsBarNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>($CellContext`open$$ = True),
                    Evaluator->Automatic,
                    FrameMargins->{{10, 10}, {2, 2}},
                    ImageSize->340,
                    Method->"Preemptive"]}, Dynamic[$CellContext`open$$],
                    ImageSize->Automatic],
                    DynamicModuleValues:>{}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.5}}}],
                    "Column"],
                    Deploy,
                    DefaultBaseStyle->"Deploy"],
                    FrameMargins->10],
                    Alignment->{Left, Top},
                    Appearance->{
                    "Default" -> 
                    FrontEnd`FileName[{"Ribbons", "Common"}, 
                    "ContentAreaLeft.9.png"]},
                    DefaultBaseStyle->{},
                    ImageSize->362], 
                    PaneBox[
                    TagBox[
                    TagBox[GridBox[{
                    {
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Cancel"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->{"RibbonBold"},
                    
                    ButtonFunction:>{
                    Ribbon`Private`page$$ = None, $CellContext`selType$$ = 0; 
                    FrontEndExecute[
                    FrontEnd`Select2DTool["Select"]]; MathLink`CallFrontEnd[
                    FrontEnd`SelectionMove[
                    FrontEnd`AttachedCellParent[], All, Graphics, AutoScroll -> 
                    False]]},
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->87,
                    Method->"Preemptive"]},
                    {
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Crop"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "OrangeButtonNinePatchAppearance"],
                    BaseStyle->{"RibbonWhite"},
                    
                    ButtonFunction:>
                    Block[{$CellContext`imgTake, $CellContext`range}, \
$CellContext`range = MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`GetEnclosingImageMarkersIndices[]]]; 
                    If[$CellContext`range =!= 
                    Null, $CellContext`imgTake = ImageTake[
                    $CellContext`image$$[], 
                    Part[$CellContext`range, 1], 
                    Part[$CellContext`range, 2]]; 
                    FrontEnd`Private`ImageEditingReplaceImage[
                    ButtonNotebook[], $CellContext`imgTake, False, 
                    FrontEndExecute[
                    FrontEnd`Select2DTool["Select"]]]]],
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->87,
                    Method->"Queued"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
                    "Column"],
                    Deploy,
                    DefaultBaseStyle->"Deploy"],
                    Alignment->Center,
                    Appearance->None,
                    FrameMargins->10,
                    ImageSize->150]}
                  },
                  AutoDelete->False,
                  
                  FrameStyle->RGBColor[
                   0.7019607843137254, 0.7019607843137254, 0.7019607843137254],
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  
                  GridBoxDividers->{
                   "Columns" -> {False, {True}, False}, "Rows" -> {{False}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                  GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                 "Grid"]],
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentArea.9.png"]},
               DefaultBaseStyle->{},
               FrameMargins->0,
               ImageSize->512]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
           "Column"],
          Deploy,
          DefaultBaseStyle->"Deploy"], "Transform"->
         TagBox[
          TagBox[GridBox[{
             {
              PanelBox[
               TagBox[GridBox[{
                  {
                   PaneBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "TransformTitle"],
                    BaseStyle->{"TextStyling"}], "RibbonTitle",
                    StripOnInput->False]},
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "TransformCaption"],
                    BaseStyle->{"TextStyling"}], "RibbonCaption",
                    StripOnInput->False]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}],
                    "Column"],
                    ImageMargins->{{8, 0}, {5, 5}}], 
                   ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                   ItemBox[
                    ButtonBox[
                    PaneSelectorBox[{False->
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, "Close.png"]]],
                     True->
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "Close-Hover.png"]]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    ButtonFunction:>(Ribbon`Private`page$$ = None),
                    ContentPadding->False,
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->{{0, 8}, {8, 4}},
                    Method->"Preemptive"],
                    Alignment->Center,
                    StripOnInput->False]}
                 },
                 AutoDelete->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Left, Left, Right}, "Rows" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                 GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                "Grid"],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentTitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->512]},
             {
              PanelBox[
               PaneBox[
                StyleBox[
                 TagBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MirrorHorizontal.png"]]],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "SubtitleButtonNinePatchAppearance"],
                    ButtonFunction:>FrontEnd`Private`ImageEditingReplaceImage[
                    ButtonNotebook[], 
                    ImageReflect[
                    $CellContext`image$$[], Left -> Right], "Transform"],
                    Evaluator->Automatic,
                    ImageSize->30,
                    Method->"Queued"],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "FlipHorizontal"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "FlipHorizontal"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MirrorVertical.png"]]],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "SubtitleButtonNinePatchAppearance"],
                    ButtonFunction:>FrontEnd`Private`ImageEditingReplaceImage[
                    ButtonNotebook[], 
                    ImageReflect[
                    $CellContext`image$$[], Top -> Bottom], "Transform"],
                    Evaluator->Automatic,
                    ImageSize->30,
                    Method->"Queued"],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "FlipVertical"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "FlipVertical"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "Counterclockwise90.png"]]],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "SubtitleButtonNinePatchAppearance"],
                    ButtonFunction:>FrontEnd`Private`ImageEditingReplaceImage[
                    ButtonNotebook[], 
                    ImageRotate[
                    $CellContext`image$$[], Left], "Transform"],
                    Evaluator->Automatic,
                    ImageSize->30,
                    Method->"Queued"],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "RotateCounterclockwise"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "RotateCounterclockwise"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    ButtonBox[
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "Clockwise90.png"]]],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "SubtitleButtonNinePatchAppearance"],
                    ButtonFunction:>FrontEnd`Private`ImageEditingReplaceImage[
                    ButtonNotebook[], 
                    ImageRotate[
                    $CellContext`image$$[], Right], "Transform"],
                    Evaluator->Automatic,
                    ImageSize->30,
                    Method->"Queued"],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "RotateClockwise"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "RotateClockwise"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ]}
                   },
                   AutoDelete->False,
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                  "Grid"], "RibbonText",
                 StripOnInput->False],
                ImageMargins->{{8, 0}, {6, 5}}],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentSubtitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->512]},
             {
              PanelBox[
               PaneBox[
                TagBox[GridBox[{
                   {
                    PanelBox[
                    PaneBox[
                    TagBox[
                    TagBox[GridBox[{
                    {
                    PaneSelectorBox[{True->
                    TagBox[GridBox[{
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Width"],
                    BaseStyle->{"TextStyling"}], 
                    InputFieldBox[Dynamic[
                    (If[
                    IntegerQ[#], #, 100 First[#]]& )[
                    Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 1]], If[
                    Positive[#], 
                    If[
                    IntegerQ[
                    Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 1]], Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 1] = IntegerPart[#]; 
                    If[$CellContext`fixRatio$$, Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 1] = 
                    IntegerPart[(#/#2) Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 1]]], Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 1] = Scaled[
                    Round[#/100, 0.01]]; If[$CellContext`fixRatio$$, Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 1] = Scaled[
                    Round[(#/#2) Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 1, 1], 
                    0.01]]]]]& ], Number,
                    BaseStyle->"RibbonText",
                    FieldSize->{{5, 5}, {1, 1}}], 
                    PaneSelectorBox[{True->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Pixels"],
                    BaseStyle->{"TextStyling"}], False->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Percent"],
                    BaseStyle->{"TextStyling"}]}, True]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Height"],
                    BaseStyle->{"TextStyling"}], 
                    InputFieldBox[Dynamic[
                    (If[
                    IntegerQ[#], #, 100 First[#]]& )[
                    Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 2]], If[
                    Positive[#], 
                    If[
                    IntegerQ[
                    Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 2]], Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 2] = IntegerPart[#]; 
                    If[$CellContext`fixRatio$$, Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 2] = 
                    IntegerPart[(#/#2) Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 2]]], Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 2] = Scaled[
                    Round[#/100, 0.01]]; If[$CellContext`fixRatio$$, Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 2] = Scaled[
                    Round[(#/#2) Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 2, 1], 
                    0.01]]]]]& ], Number,
                    BaseStyle->"RibbonText",
                    FieldSize->{{5, 5}, {1, 1}}], 
                    PaneSelectorBox[{True->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Pixels"],
                    BaseStyle->{"TextStyling"}], False->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Percent"],
                    BaseStyle->{"TextStyling"}]}, True]}
                    },
                    AutoDelete->False,
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
                    "Grid"], False->
                    TagBox[GridBox[{
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Width"],
                    BaseStyle->{"TextStyling"}], 
                    InputFieldBox[Dynamic[
                    (If[
                    IntegerQ[#], #, 100 First[#]]& )[
                    Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 1]], If[
                    Positive[#], 
                    If[
                    IntegerQ[
                    Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 1]], Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 1] = IntegerPart[#]; 
                    If[$CellContext`fixRatio$$, Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 1] = 
                    IntegerPart[(#/#2) Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 1]]], Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 1] = Scaled[
                    Round[#/100, 0.01]]; If[$CellContext`fixRatio$$, Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 1] = Scaled[
                    Round[(#/#2) Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 1, 1], 
                    0.01]]]]]& ], Number,
                    BaseStyle->"RibbonText",
                    FieldSize->{{5, 5}, {1, 1}}], 
                    PaneSelectorBox[{True->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Pixels"],
                    BaseStyle->{"TextStyling"}], False->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Percent"],
                    BaseStyle->{"TextStyling"}]}, False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Height"],
                    BaseStyle->{"TextStyling"}], 
                    InputFieldBox[Dynamic[
                    (If[
                    IntegerQ[#], #, 100 First[#]]& )[
                    Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 2]], If[
                    Positive[#], 
                    If[
                    IntegerQ[
                    Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 2]], Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 2] = IntegerPart[#]; 
                    If[$CellContext`fixRatio$$, Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 2] = 
                    IntegerPart[(#/#2) Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 2]]], Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 2] = Scaled[
                    Round[#/100, 0.01]]; If[$CellContext`fixRatio$$, Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 2] = Scaled[
                    Round[(#/#2) Part[
                    Part[$CellContext`opcurrent$$, 1, 2], 3 - 2, 1], 
                    0.01]]]]]& ], Number,
                    BaseStyle->"RibbonText",
                    FieldSize->{{5, 5}, {1, 1}}], 
                    PaneSelectorBox[{True->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Pixels"],
                    BaseStyle->{"TextStyling"}], False->
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Percent"],
                    BaseStyle->{"TextStyling"}]}, False]}
                    },
                    AutoDelete->False,
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
                    "Grid"]}, Dynamic[
                    MatchQ[
                    Part[$CellContext`opcurrent$$, 1, 2], {
                    Blank[Integer], 
                    Blank[Integer]}]]], 
                    TagBox[GridBox[{
                    {
                    TagBox[GridBox[{
                    {
                    SetterBox[Dynamic[
                    MatchQ[
                    Part[$CellContext`opcurrent$$, 1, 2], {
                    Blank[Integer], 
                    Blank[Integer]}], If[
                    Not[
                    MatchQ[
                    Part[$CellContext`opcurrent$$, 1, 2], {
                    Blank[Integer], 
                    Blank[Integer]}]], Part[$CellContext`opcurrent$$, 1, 2] = 
                    IntegerPart[ReplaceAll[
                    Part[$CellContext`opcurrent$$, 1, 2], Scaled[
                    Pattern[$CellContext`x, 
                    Blank[]]] :> $CellContext`x] ImageDimensions[
                    $CellContext`image$$[]]], Null]& ], {True}, 
                    PaneSelectorBox[{True->
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Pixels"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayTabLeftPressedNinePatchAppearance"],
                    BaseStyle->{"RibbonText"},
                    ButtonFunction:>{},
                    DefaultBaseStyle->{},
                    Evaluator->None,
                    FrameMargins->0,
                    ImageSize->{60, 25},
                    Method->"Preemptive"]}, Dynamic[
                    MatchQ[
                    Part[$CellContext`opcurrent$$, 1, 2], {
                    Blank[Integer], 
                    Blank[Integer]}]], 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Pixels"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayTabLeftNinePatchAppearance"],
                    BaseStyle->{"RibbonText"},
                    ButtonFunction:>{},
                    DefaultBaseStyle->{},
                    Evaluator->None,
                    FrameMargins->0,
                    ImageSize->{60, 25},
                    Method->"Preemptive"]],
                    Appearance->None], 
                    SetterBox[Dynamic[
                    MatchQ[
                    Part[$CellContext`opcurrent$$, 1, 2], {
                    Blank[Integer], 
                    Blank[Integer]}], If[
                    MatchQ[
                    Part[$CellContext`opcurrent$$, 1, 2], {
                    Blank[Integer], 
                    Blank[Integer]}], Part[$CellContext`opcurrent$$, 1, 2] = 
                    Thread[
                    Scaled[
                    Round[Part[$CellContext`opcurrent$$, 1, 2]/ImageDimensions[
                    $CellContext`image$$[]], 0.01]]], Null]& ], {False}, 
                    PaneSelectorBox[{True->
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Percent"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayTabRightPressedNinePatchAppearance"],
                    BaseStyle->{"RibbonText"},
                    ButtonFunction:>{},
                    DefaultBaseStyle->{},
                    Evaluator->None,
                    FrameMargins->0,
                    ImageSize->{60, 25},
                    Method->"Preemptive"]}, Dynamic[
                    Not[
                    MatchQ[
                    Part[$CellContext`opcurrent$$, 1, 2], {
                    Blank[Integer], 
                    Blank[Integer]}]]], 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Percent"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayTabRightNinePatchAppearance"],
                    BaseStyle->{"RibbonText"},
                    ButtonFunction:>{},
                    DefaultBaseStyle->{},
                    Evaluator->None,
                    FrameMargins->0,
                    ImageSize->{60, 25},
                    Method->"Preemptive"]],
                    Appearance->None]}
                    },
                    AutoDelete->False,
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                    "Grid"]},
                    {
                    TagBox[GridBox[{
                    {
                    CheckboxBox[Dynamic[$CellContext`fixRatio$$],
                    BaselinePosition->Scaled[0.3]], 
                    TagBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "LockAspectRatio"],
                    BaseStyle->{"TextStyling"}],
                    
                    EventHandlerTag[{
                    "MouseClicked" :> ($CellContext`fixRatio$$ = Not[
                    TrueQ[$CellContext`fixRatio$$]]), Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{0.5}}}],
                    "Grid"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
                    "Column"]}
                    },
                    AutoDelete->False,
                    BaseStyle->"RibbonText",
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{2}}}],
                    "Grid"],
                    Deploy,
                    DefaultBaseStyle->"Deploy"],
                    FrameMargins->10],
                    Alignment->{Left, Top},
                    
                    Appearance->{
                    "Default" -> 
                    FrontEnd`FileName[{"Ribbons", "Common"}, 
                    "ContentAreaLeft.9.png"]},
                    DefaultBaseStyle->{},
                    ImageSize->362], 
                    PaneBox[
                    TagBox[
                    TagBox[GridBox[{
                    {
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Cancel"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->{"RibbonBold"},
                    
                    ButtonFunction:>{
                    Ribbon`Private`page$$ = None, $CellContext`selType$$ = 0; 
                    FrontEndExecute[
                    FrontEnd`Select2DTool["Select"]]; MathLink`CallFrontEnd[
                    FrontEnd`SelectionMove[
                    FrontEnd`AttachedCellParent[], All, Graphics, AutoScroll -> 
                    False]]},
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->87,
                    Method->"Preemptive"]},
                    {
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Resize"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "OrangeButtonNinePatchAppearance"],
                    BaseStyle->{"RibbonWhite"},
                    ButtonFunction:>FrontEnd`Private`ImageEditingReplaceImage[
                    ButtonNotebook[], 
                    $CellContext`opcurrent$$[
                    $CellContext`image$$[]]],
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->87,
                    Method->"Queued"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
                    "Column"],
                    Deploy,
                    DefaultBaseStyle->"Deploy"],
                    Alignment->Center,
                    Appearance->None,
                    FrameMargins->10,
                    ImageSize->150]}
                  },
                  AutoDelete->False,
                  
                  FrameStyle->RGBColor[
                   0.7019607843137254, 0.7019607843137254, 0.7019607843137254],
                  GridBoxAlignment->{"Columns" -> {{Left}}},
                  GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {{None}}},
                  
                  GridBoxItemSize->{
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                  GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                 "Grid"]],
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentAreaGradient.9.png"]},
               DefaultBaseStyle->{},
               FrameMargins->0,
               ImageSize->512]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
           "Column"],
          Deploy,
          DefaultBaseStyle->"Deploy"], "Coordinates"->
         TagBox[
          TagBox[GridBox[{
             {
              PanelBox[
               TagBox[GridBox[{
                  {
                   PaneBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CoordinatesTitle"],
                    BaseStyle->{"TextStyling"}], "RibbonTitle",
                    StripOnInput->False]},
                    {
                    StyleBox[
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CoordinatesCaption"],
                    BaseStyle->{"TextStyling"}], "RibbonCaption",
                    StripOnInput->False]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}],
                    "Column"],
                    ImageMargins->{{8, 0}, {5, 5}}], 
                   ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                   ItemBox[
                    ButtonBox[
                    PaneSelectorBox[{False->
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, "Close.png"]]],
                     True->
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "Close-Hover.png"]]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    ButtonFunction:>(Ribbon`Private`page$$ = None),
                    ContentPadding->False,
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->{{0, 8}, {8, 4}},
                    Method->"Preemptive"],
                    Alignment->Center,
                    StripOnInput->False]}
                 },
                 AutoDelete->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Left, Left, Right}, "Rows" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                 GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                "Grid"],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentTitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->512]},
             {
              PanelBox[
               PaneBox[
                TagBox[
                 DynamicModuleBox[{$CellContext`title$$ = Row[{
                    Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CoordinatesTitle"]], 
                    BaseStyle -> {"TextStyling"}], "RibbonTitle"], 
                    Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CoordinatesCaption"]], 
                    BaseStyle -> {"TextStyling"}], "RibbonText"]}, "  "]}, 
                  TagBox[GridBox[{
                    {
                    ItemBox[
                    
                    DynamicModuleBox[{$CellContext`headings$$, \
$CellContext`size$$ = 4}, 
                    TagBox[GridBox[{
                    {
                    DynamicBox[ToBoxes[
                    
                    Grid[{{"Coordinate", SpanFromLeft, "", "Indices", 
                    SpanFromLeft, "", "Color Values", 
                    Apply[Sequence, 
                    If[
                    ListQ[$CellContext`headings$$], 
                    Table[
                    SpanFromLeft, {Length[$CellContext`headings$$] - 7}], {
                    SpanFromLeft}]]}}, 
                    ItemSize -> {{$CellContext`size$$, $CellContext`size$$, 
                    0, $CellContext`size$$, $CellContext`size$$, 
                    0, {$CellContext`size$$}}}, Spacings -> {1, 1}, ItemStyle -> 
                    Bold, Alignment -> Left], StandardForm]]},
                    {
                    DynamicBox[ToBoxes[
                    If[
                    ListQ[$CellContext`headings$$], 
                    Grid[{$CellContext`headings$$}, 
                    ItemSize -> {{$CellContext`size$$, $CellContext`size$$, 
                    0, $CellContext`size$$, $CellContext`size$$, 
                    0, {$CellContext`size$$}}}, Spacings -> {1, 1}, ItemStyle -> 
                    Bold], ""], StandardForm]]},
                    {
                    DynamicBox[ToBoxes[
                    With[{$CellContext`data$ = Reverse[
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`GetImagePixelPointMarkersList[]]]]}, 
                    If[
                    MatchQ[$CellContext`data$, {
                    Repeated[{{
                    Blank[], 
                    Blank[]}, {
                    Blank[], 
                    Blank[]}, 
                    Pattern[$CellContext`c, 
                    Blank[]], 
                    Pattern[$CellContext`type, 
                    Blank[]], {
                    Pattern[$CellContext`min, 
                    Blank[]], 
                    Pattern[$CellContext`max, 
                    Blank[]]}, 
                    Blank[]}]}], $CellContext`headings$$ = {
                    "x", "y", "", "row", "col", "", 
                    Apply[Sequence, 
                    Switch[{
                    Part[
                    First[$CellContext`data$], 3], 
                    Part[
                    First[$CellContext`data$], 6]}, {GrayLevel, {
                    Blank[]}}, {"G"}, {GrayLevel, {
                    Blank[], 
                    Blank[]}}, {"G", "\[Alpha]"}, {Hue, {
                    Blank[]}}, {"H"}, {Hue, {
                    Blank[], 
                    Blank[]}}, {"H", "S"}, {Hue, {
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"H", "S", "B"}, {Hue, {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"H", "S", "B", "\[Alpha]"}, {CMYKColor, {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"C", "M", "Y", "K"}, {CMYKColor, {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"C", "M", "Y", "K", "\[Alpha]"}, {RGBColor, {
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"R", "G", "B"}, {RGBColor, {
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"R", "G", "B", "\[Alpha]"}, {"LAB", {
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"L", "A", "B"}, {"LAB", {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"L", "A", "B", "\[Alpha]"}, {"LCH", {
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"L", "C", "H"}, {"LCH", {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"L", "C", "H", "\[Alpha]"}, {"LUV", {
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"L", "U", "V"}, {"LUV", {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"L", "U", "V", "\[Alpha]"}, {"XYZ", {
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"X", "Y", "Z"}, {"XYZ", {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Blank[]}}, {"X", "Y", "Z", "\[Alpha]"}, 
                    Blank[], 
                    Table[
                    ToString[$CellContext`i], {$CellContext`i, 
                    Min[5, 
                    Length[
                    Last[
                    First[$CellContext`data$]]]]}]]]}; If[
                    TrueQ[FrontEnd`Private`$UseTableViewForCoordinatesTool], 
                    TableView[
                    Cases[$CellContext`data$, {{
                    Pattern[$CellContext`x, 
                    Blank[]], 
                    Pattern[$CellContext`y, 
                    Blank[]]}, {
                    Pattern[$CellContext`col, 
                    Blank[]], 
                    Pattern[$CellContext`row, 
                    Blank[]]}, 
                    Pattern[$CellContext`c, 
                    Blank[]], 
                    Pattern[$CellContext`type, 
                    Blank[]], {
                    Pattern[$CellContext`min, 
                    Blank[]], 
                    Pattern[$CellContext`max, 
                    Blank[]]}, 
                    Pattern[$CellContext`values, 
                    Blank[]]} :> {$CellContext`x, $CellContext`y, "", 
                    Round[$CellContext`row], 
                    Round[$CellContext`col], "", 
                    Apply[Sequence, 
                    Take[$CellContext`values, 
                    Min[5, 
                    Length[$CellContext`values]]]]}], Alignment -> Right, 
                    AppearanceElements -> {}, 
                    ImageSize -> {Automatic, 200}], $CellContext`size$$ = Min[
                    
                    With[{$CellContext`em$ = 
                    CurrentValue["FontMWidth"]}, ((
                    494 - (Length[$CellContext`headings$$] + 
                    4) $CellContext`em$)/$CellContext`em$)/(
                    Length[$CellContext`headings$$] - 2)], 8]; Pane[
                    Grid[
                    Cases[$CellContext`data$, {{
                    Pattern[$CellContext`x, 
                    Blank[]], 
                    Pattern[$CellContext`y, 
                    Blank[]]}, {
                    Pattern[$CellContext`col, 
                    Blank[]], 
                    Pattern[$CellContext`row, 
                    Blank[]]}, 
                    Pattern[$CellContext`c, 
                    Blank[]], 
                    Pattern[$CellContext`type, 
                    Blank[]], {
                    Pattern[$CellContext`min, 
                    Blank[]], 
                    Pattern[$CellContext`max, 
                    Blank[]]}, 
                    Pattern[$CellContext`values, 
                    Blank[]]} :> {$CellContext`x, $CellContext`y, 
                    Item["", Frame -> {{True, True}, {False, False}}], 
                    Round[$CellContext`row], 
                    Round[$CellContext`col], 
                    Item["", Frame -> {{True, True}, {False, False}}], 
                    Apply[Sequence, 
                    Map[NumberForm[#, 4]& , 
                    Take[$CellContext`values, 
                    Min[5, 
                    Length[$CellContext`values]]]]]}], 
                    ItemSize -> {{$CellContext`size$$, $CellContext`size$$, 
                    0, $CellContext`size$$, $CellContext`size$$, 
                    0, {$CellContext`size$$}}}, Spacings -> {1, 1}, Alignment -> 
                    Right, Frame -> All, FrameStyle -> LightGray], 
                    ImageSize -> {Automatic, 100}, 
                    Scrollbars -> {False, Automatic}, 
                    AppearanceElements -> {}]], $CellContext`headings$$ = 
                    "None"; Style["None selected", Italic]]], StandardForm]]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Column"],
                    DynamicModuleValues:>{}],
                    Alignment->Left,
                    StripOnInput->False], "\[SpanFromLeft]"},
                    {
                    ItemBox[
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ClearMarkers"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayNinePatchAppearance"],
                    BaseStyle->{"RibbonBold"},
                    
                    ButtonFunction:>FrontEndTokenExecute[
                    "ClearPixelPointMarkers"],
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->100,
                    Method->"Preemptive"],
                    Alignment->Left,
                    StripOnInput->False], 
                    ItemBox[
                    PaneBox[
                    TagBox[GridBox[{
                    {
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Cancel"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->{"RibbonBold"},
                    
                    ButtonFunction:>{
                    Ribbon`Private`page$$ = None, $CellContext`selType$$ = 0; 
                    FrontEndExecute[
                    FrontEnd`Select2DTool["Select"]]; MathLink`CallFrontEnd[
                    FrontEnd`SelectionMove[
                    FrontEnd`AttachedCellParent[], All, Graphics, AutoScroll -> 
                    False]]},
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->87,
                    Method->"Preemptive"]},
                    {
                    ActionMenuBox[
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CopyToClipboard"],
                    BaseStyle->{"TextStyling"}], 
                    PaneBox[
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "OrangeButtonDownPointer.png"]]],
                    BaselinePosition->(Scaled[0.3] -> Axis)]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "OrangeButtonNinePatchAppearance"],
                    BaseStyle->{"RibbonWhite"},
                    ButtonFunction:>{},
                    Evaluator->None,
                    FrameMargins->0,
                    ImageSize->87,
                    Method->"Preemptive"], {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CoordinatesToMarkerImage"],
                    BaseStyle->{"TextStyling"}]:>
                    Block[{$CellContext`imgSel}, $CellContext`imgSel = 
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`CreateMaskBoxesFromImageMarkers[]]]; 
                    CopyToClipboard[
                    ExpressionCell[
                    Binarize[
                    ToExpression[$CellContext`imgSel], 0.5], "Input"]]], 
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CoordinatesCopyCoordinates"],
                    BaseStyle->{"TextStyling"}]:>
                    Block[{$CellContext`data = Reverse[
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`GetImagePixelPointMarkersList[]]]]}, 
                    CopyToClipboard[
                    ExpressionCell[
                    Part[$CellContext`data, All, 1], "Input"]]], 
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CoordinatesCopyIndices"],
                    BaseStyle->{"TextStyling"}]:>
                    Block[{$CellContext`data = Reverse[
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`GetImagePixelPointMarkersList[]]]]}, 
                    CopyToClipboard[
                    ExpressionCell[
                    Round[
                    Part[$CellContext`data, All, 2]], "Input"]]], 
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CoordinatesCopyColorValues"],
                    BaseStyle->{"TextStyling"}]:>
                    Block[{$CellContext`data = Reverse[
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`GetImagePixelPointMarkersList[]]]]}, 
                    CopyToClipboard[
                    ExpressionCell[
                    Part[$CellContext`data, All, 6], "Input"]]]},
                    Appearance->None,
                    MenuStyle->"RibbonText",
                    Method->"Queued"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
                    "Column"],
                    Alignment->{Center, Center},
                    ImageSize->150],
                    Alignment->Center,
                    StripOnInput->False]},
                    {
                    DynamicModuleBox[{$CellContext`open$$ = False}, 
                    PaneSelectorBox[{True->
                    TagBox[GridBox[{
                    {
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ViewOptions"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "TooltipOptionsUpArrow.png"]]]}
                    },
                    AutoDelete->False,
                    BaseStyle->{CacheGraphics -> False},
                    
                    GridBoxAlignment->{
                    "Columns" -> {Left, Right}, "Rows" -> {{Automatic}}},
                    GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.5]}}}],
                    "Grid"],
                    Alignment->Left,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "TooltipOptionsBarNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>($CellContext`open$$ = False),
                    Evaluator->Automatic,
                    FrameMargins->{{10, 10}, {2, 2}},
                    ImageSize->340,
                    Method->"Preemptive"]},
                    {
                    PanelBox[
                    TagBox[GridBox[{
                    {
                    SliderBox[Dynamic[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]], {39, 
                    3, -6},
                    ImageSize->Small], 
                    TagBox[GridBox[{
                    {
                    
                    GraphicsBox[{RasterBox[Dynamic[
                    Reverse[ImageData[ImageTake[
                    ToExpression[FE`Evaluate[
                    FEPrivate`ImportImage[FrontEnd`ToFileName[{
                    "Ribbons", "Image"}, 
                    "ImageEditingTooltipPreview.png"]]]], {
                    20 - IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2], 20 + 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2]}, {
                    20 - IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2], 20 + 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2]}]]]]], 
                    {EdgeForm[{RGBColor[0, 0, 0], Opacity[0.4], 
                    AbsoluteThickness[3]}], FaceForm[None], 
                    DynamicBox[Typeset`ToBoxes[
                    Rectangle[{
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2], 
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2]}, {
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1, 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1}], StandardForm, 
                    Graphics]]}, 
                    {EdgeForm[{RGBColor[1, 1, 1], Opacity[0.8], 
                    AbsoluteThickness[1]}], FaceForm[None], 
                    DynamicBox[Typeset`ToBoxes[
                    Rectangle[{
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2], 
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2]}, {
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1, 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1}], StandardForm, 
                    Graphics]]}},
                    ImageSize->100]},
                    {
                    TemplateBox[{DynamicBox[
                    ToBoxes[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"], 
                    StandardForm]],"\"px x \"",DynamicBox[
                    ToBoxes[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"], 
                    StandardForm]],"\"px\""},
                    "RowDefault"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Center}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Column"]},
                    {
                    TagBox[GridBox[{
                    {
                    CheckboxBox[Dynamic[
                    CurrentValue[$FrontEnd, "DisplayImagePixels"]], {
                    "TooltipInfo", "DetailExploreView"},
                    BaselinePosition->Scaled[0.3]], 
                    TagBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ShowImagePeek"],
                    BaseStyle->{"TextStyling"}],
                    
                    EventHandlerTag[{"MouseClicked" :> (
                    CurrentValue[$FrontEnd, "DisplayImagePixels"] = 
                    If[CurrentValue[$FrontEnd, "DisplayImagePixels"] =!= 
                    "TooltipInfo", "TooltipInfo", "DetailExploreView"]), 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{0.5}}}],
                    "Grid"], "\[SpanFromAbove]"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{5}}, "Rows" -> {{1}}}],
                    "Grid"],
                    Alignment->Center,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", 
                    "TooltipOptionsBottomNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    FrameMargins->10,
                    ImageSize->340]}
                    },
                    BaseStyle->"RibbonText",
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.1}}}],
                    "Column"], False->
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ViewOptions"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "TooltipOptionsDownArrow.png"]]]}
                    },
                    AutoDelete->False,
                    BaseStyle->{CacheGraphics -> False},
                    
                    GridBoxAlignment->{
                    "Columns" -> {Left, Right}, "Rows" -> {{Automatic}}},
                    GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.5]}}}],
                    "Grid"],
                    Alignment->Left,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "TooltipOptionsBarNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>($CellContext`open$$ = True),
                    Evaluator->Automatic,
                    FrameMargins->{{10, 10}, {2, 2}},
                    ImageSize->340,
                    Method->"Preemptive"]}, Dynamic[$CellContext`open$$],
                    ImageSize->Automatic],
                    DynamicModuleValues:>{}], "\[SpanFromAbove]"}
                    },
                    AutoDelete->False,
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, 
                    "Rows" -> {1.5, 1.5, 0.8, 0.8}}],
                   "Grid"],
                  DynamicModuleValues:>{}],
                 Deploy,
                 DefaultBaseStyle->"Deploy"],
                FrameMargins->10],
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentAreaGradient.9.png"]},
               DefaultBaseStyle->{},
               ImageSize->512]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
           "Column"],
          Deploy,
          DefaultBaseStyle->"Deploy"], "MaskCreate"->
         TagBox[
          TagBox[GridBox[{
             {
              PanelBox[
               TagBox[GridBox[{
                  {
                   PaneBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskTitle"],
                    BaseStyle->{"TextStyling"}], "RibbonTitle",
                    StripOnInput->False]},
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskCaption"],
                    BaseStyle->{"TextStyling"}], "RibbonCaption",
                    StripOnInput->False]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.5}}}],
                    "Column"],
                    ImageMargins->{{8, 0}, {5, 5}}], 
                   ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                   ItemBox[
                    ButtonBox[
                    PaneSelectorBox[{False->
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, "Close.png"]]],
                     True->
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "Close-Hover.png"]]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    ButtonFunction:>(Ribbon`Private`page$$ = None),
                    ContentPadding->False,
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->{{0, 8}, {8, 4}},
                    Method->"Preemptive"],
                    Alignment->Center,
                    StripOnInput->False]}
                 },
                 AutoDelete->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Left, Left, Right}, "Rows" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                 GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                "Grid"],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentTitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->512]},
             {
              PanelBox[
               PaneBox[
                TagBox[
                 TagBox[GridBox[{
                    {
                    TagBox[GridBox[{
                    {
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetMaskPointImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "GetMaskPointImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskPointIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskPoint"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskPoint"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetLineImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "GetLineImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskLineIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskLine"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskLine"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetLineSegmentsImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "GetLineSegmentsImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskLineSegmentsIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskLineSegments"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskLineSegments"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetFreehandImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "GetFreehandImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskFreehandLineIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskFreehandLine"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskFreehandLine"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], 
                    PaneSelectorBox[{True->
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetRectangleImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "GetRectangleImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskRectangleIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskRectangle"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskRectangle"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], False->
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetFrameImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "GetFrameImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskRectangleIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskRectangle"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskRectangle"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ]}, 
                    Dynamic[$CellContext`maskFill$$]], 
                    PaneSelectorBox[{True->
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetPolygonImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "GetPolygonImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskPolygonIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskPolygon"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskPolygon"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], False->
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetHollowPolygonImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === 
                    "GetHollowPolygonImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskPolygonIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskPolygon"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskPolygon"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ]}, 
                    Dynamic[$CellContext`maskFill$$]], 
                    PaneSelectorBox[{True->
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetDiskImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "GetDiskImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskEllipseIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskEllipse"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskEllipse"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], False->
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetCircleImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "GetCircleImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskEllipseIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskEllipse"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskEllipse"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ]}, 
                    Dynamic[$CellContext`maskFill$$]], 
                    PaneSelectorBox[{True->
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetLassoImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "GetLassoImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskFreehandShapeIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskFreehandShape"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskFreehandShape"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], False->
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "GetHollowLassoImageMask"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "GetHollowLassoImageMask", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "MaskFreehandShapeIcon.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskFreehandShape"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskFreehandShape"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ]}, 
                    Dynamic[$CellContext`maskFill$$]], 
                    TagBox[
                    TooltipBox[
                    
                    SetterBox[
                    Dynamic[$CellContext`maskTool$$, ($CellContext`maskTool$$ = \
#; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ], {
                    "EraseImageMaskMarker"}, 
                    OverlayBox[{
                    DynamicBox[ToBoxes[
                    If[$CellContext`maskTool$$ === "EraseImageMaskMarker", 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Pressed.png"]]]], 
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Default.png"]]]], 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "SmallSquareButton-Highlight.png"]]]]]], StandardForm]], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageEditEraser.png"]]]}, {1, 2}, 1,
                    Alignment->Center],
                    Appearance->None],
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskEraser"], 
                    BaseStyle -> {"TextStyling"}],
                    TooltipDelay->Automatic],
                    Annotation[#, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskEraser"]], 
                    BaseStyle -> {"TextStyling"}], "Tooltip"]& ], 
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ClearMarkers"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayNinePatchAppearance"],
                    BaseStyle->{"RibbonBold"},
                    ButtonFunction:>FrontEndTokenExecute["ClearMaskMarkers"],
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->100,
                    Method->"Preemptive"]}
                    },
                    AutoDelete->False,
                    BaselinePosition->Center,
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {
                    0.4, 0.4, 0.4, 0.4, 2, 0.4, 0.4, 0.4, 2, 0.4, 0.4}, 
                    "Rows" -> {{Automatic}}}],
                    "Grid"]},
                    {
                    TagBox[GridBox[{
                    {
                    TagBox[GridBox[{
                    {"\<\"\"\>", 
                    TagBox[GridBox[{
                    {
                    
                    CheckboxBox[
                    Dynamic[$CellContext`maskFill$$, ($CellContext`maskFill$$ = \
#; $CellContext`maskTool$$ = Switch[{$CellContext`maskTool$$, #}, {
                    "GetRectangleImageMask", False}, "GetFrameImageMask", {
                    "GetDiskImageMask", False}, "GetCircleImageMask", {
                    "GetLassoImageMask", False}, "GetHollowLassoImageMask", {
                    "GetPolygonImageMask", False}, 
                    "GetHollowPolygonImageMask", {
                    "GetHollowPolygonImageMask", True}, 
                    "GetPolygonImageMask", {"GetHollowLassoImageMask", True}, 
                    "GetLassoImageMask", {"GetFrameImageMask", True}, 
                    "GetRectangleImageMask", {"GetCircleImageMask", True}, 
                    "GetDiskImageMask"]; FrontEndExecute[
                    FrontEnd`Select2DTool[$CellContext`maskTool$$]])& ],
                    Enabled->Dynamic[
                    
                    MemberQ[{"GetRectangleImageMask", "GetDiskImageMask", 
                    "GetFrameImageMask", "GetCircleImageMask", 
                    "GetPolygonImageMask", "GetHollowPolygonImageMask", 
                    "GetLassoImageMask", 
                    "GetHollowLassoImageMask"}, $CellContext`maskTool$$]]], 
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskFillShape"],
                    BaseStyle->{"TextStyling"}]}
                    },
                    AutoDelete->False,
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskThickness"],
                    BaseStyle->{"TextStyling"}], 
                    InterpretationBox[
                    StyleBox[GridBox[{
                    {
                    SliderBox[Dynamic[
                    CurrentValue[$FrontEnd, "MarkerLineThickness"]], {
                    0.125, 32},
                    Appearance->Automatic,
                    BaseStyle->"RibbonText",
                    DefaultBaseStyle->"LabeledSlider",
                    Enabled->Dynamic[
                    
                    MemberQ[{"GetMaskPointImageMask", "GetLineImageMask", 
                    "GetLineSegmentsImageMask", "GetFreehandImageMask", 
                    "GetFrameImageMask", "GetCircleImageMask", 
                    "GetHollowPolygonImageMask", 
                    "GetHollowLassoImageMask"}, $CellContext`maskTool$$]]], 
                    InputFieldBox[Dynamic[
                    CurrentValue[$FrontEnd, "MarkerLineThickness"]],
                    Appearance->"Frameless",
                    BaseStyle->"RibbonText",
                    ContinuousAction->True,
                    DefaultBaseStyle->"LabeledSlider",
                    Enabled->Dynamic[
                    
                    MemberQ[{"GetMaskPointImageMask", "GetLineImageMask", 
                    "GetLineSegmentsImageMask", "GetFreehandImageMask", 
                    "GetFrameImageMask", "GetCircleImageMask", 
                    "GetHollowPolygonImageMask", 
                    "GetHollowLassoImageMask"}, $CellContext`maskTool$$]],
                    FieldSize->{{5, 10}, {1, 2}},
                    ImageMargins->0]}
                    },
                    AutoDelete->False,
                    BaselinePosition->{{1, 1}, Axis},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
                    "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}, "RowsIndexed" -> {}}],
                    Deployed->True,
                    StripOnInput->False,
                    FontFamily:>CurrentValue["ControlsFontFamily"]],
                    LabeledSlider[
                    Dynamic[
                    CurrentValue[$FrontEnd, "MarkerLineThickness"]], {
                    0.125, 32}, Enabled -> Dynamic[
                    
                    MemberQ[{"GetMaskPointImageMask", "GetLineImageMask", 
                    "GetLineSegmentsImageMask", "GetFreehandImageMask", 
                    "GetFrameImageMask", "GetCircleImageMask", 
                    "GetHollowPolygonImageMask", 
                    "GetHollowLassoImageMask"}, $CellContext`maskTool$$]], 
                    BaseStyle -> "RibbonText"]]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"], 
                    PaneBox[
                    TagBox[GridBox[{
                    {
                    ButtonBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Cancel"],
                    BaseStyle->{"TextStyling"}],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "GrayButtonNinePatchAppearance"],
                    BaseStyle->{"RibbonBold"},
                    
                    ButtonFunction:>{
                    Ribbon`Private`page$$ = None, $CellContext`selType$$ = 0; 
                    FrontEndExecute[
                    FrontEnd`Select2DTool["Select"]]; MathLink`CallFrontEnd[
                    FrontEnd`SelectionMove[
                    FrontEnd`AttachedCellParent[], All, Graphics, AutoScroll -> 
                    False]]},
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageSize->87,
                    Method->"Preemptive"]},
                    {
                    ActionMenuBox[
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "CopyToClipboard"],
                    BaseStyle->{"TextStyling"}], 
                    PaneBox[
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "OrangeButtonDownPointer.png"]]],
                    BaselinePosition->(Scaled[0.3] -> Axis)]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"],
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "OrangeButtonNinePatchAppearance"],
                    BaseStyle->{"RibbonWhite"},
                    ButtonFunction:>{},
                    Evaluator->None,
                    FrameMargins->0,
                    ImageSize->87,
                    Method->"Preemptive"], {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskToAnImage"],
                    BaseStyle->{"TextStyling"}]:>
                    Block[{$CellContext`imgSel}, $CellContext`imgSel = 
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`CreateMaskBoxesFromImageMarkers[]]]; 
                    CopyToClipboard[
                    ExpressionCell[
                    Binarize[
                    ToExpression[$CellContext`imgSel], 0.5], "Input"]]], 
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "InverseMaskToAnImage"],
                    BaseStyle->{"TextStyling"}]:>
                    Block[{$CellContext`imgSel}, $CellContext`imgSel = 
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`CreateMaskBoxesFromImageMarkers[]]]; 
                    CopyToClipboard[
                    ExpressionCell[
                    ColorNegate[
                    Binarize[
                    ToExpression[$CellContext`imgSel], 0.5]], "Input"]]], 
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MaskToGraphics"],
                    BaseStyle->{"TextStyling"}]:>
                    Block[{$CellContext`imgSel}, $CellContext`imgSel = 
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`CreateMaskBoxesFromImageMarkers[]]]; 
                    CopyToClipboard[
                    ExpressionCell[
                    ToExpression[$CellContext`imgSel], "Input"]]], 
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "InverseMaskToGraphics"],
                    BaseStyle->{"TextStyling"}]:>
                    Block[{$CellContext`imgSel}, $CellContext`imgSel = 
                    MathLink`CallFrontEnd[
                    FrontEnd`Value[
                    FEPrivate`CreateInverseMaskBoxesFromImageMarkers[]]]; 
                    CopyToClipboard[
                    ExpressionCell[
                    ToExpression[$CellContext`imgSel], "Input"]]]},
                    Appearance->None,
                    MenuStyle->"RibbonText",
                    Method->"Queued"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1}}}],
                    "Column"],
                    Alignment->{Center, Center},
                    ImageSize->150]},
                    {
                    DynamicModuleBox[{$CellContext`open$$ = False}, 
                    PaneSelectorBox[{True->
                    TagBox[GridBox[{
                    {
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ViewOptions"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "TooltipOptionsUpArrow.png"]]]}
                    },
                    AutoDelete->False,
                    BaseStyle->{CacheGraphics -> False},
                    
                    GridBoxAlignment->{
                    "Columns" -> {Left, Right}, "Rows" -> {{Automatic}}},
                    GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.5]}}}],
                    "Grid"],
                    Alignment->Left,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "TooltipOptionsBarNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>($CellContext`open$$ = False),
                    Evaluator->Automatic,
                    FrameMargins->{{10, 10}, {2, 2}},
                    ImageSize->340,
                    Method->"Preemptive"]},
                    {
                    PanelBox[
                    TagBox[GridBox[{
                    {
                    SliderBox[Dynamic[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]], {39, 
                    3, -6},
                    ImageSize->Small], 
                    TagBox[GridBox[{
                    {
                    
                    GraphicsBox[{RasterBox[Dynamic[
                    Reverse[ImageData[ImageTake[
                    ToExpression[FE`Evaluate[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "ImageEditingTooltipPreview.png"]]]], {
                    20 - IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2], 20 + 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2]}, {
                    20 - IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2], 20 + 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2]}]]]]], 
                    {EdgeForm[{RGBColor[0, 0, 0], Opacity[0.4], 
                    AbsoluteThickness[3]}], FaceForm[None], 
                    DynamicBox[Typeset`ToBoxes[
                    Rectangle[{
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2], 
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2]}, {
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1, 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1}], StandardForm, 
                    Graphics]]}, 
                    {EdgeForm[{RGBColor[1, 1, 1], Opacity[0.8], 
                    AbsoluteThickness[1]}], FaceForm[None], 
                    DynamicBox[Typeset`ToBoxes[
                    Rectangle[{
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2], 
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2]}, {
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1, 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1}], StandardForm, 
                    Graphics]]}},
                    ImageSize->100]},
                    {
                    TemplateBox[{DynamicBox[
                    ToBoxes[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"], 
                    StandardForm]],"\"px x \"",DynamicBox[
                    ToBoxes[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"], 
                    StandardForm]],"\"px\""},
                    "RowDefault"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Center}}},
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}],
                    "Column"]},
                    {
                    TagBox[GridBox[{
                    {
                    CheckboxBox[Dynamic[
                    CurrentValue[$FrontEnd, "DisplayImagePixels"]], {
                    "TooltipInfo", "DetailExploreView"},
                    BaselinePosition->Scaled[0.3]], 
                    TagBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ShowImagePeek"],
                    BaseStyle->{"TextStyling"}],
                    
                    EventHandlerTag[{"MouseClicked" :> (
                    CurrentValue[$FrontEnd, "DisplayImagePixels"] = 
                    If[CurrentValue[$FrontEnd, "DisplayImagePixels"] =!= 
                    "TooltipInfo", "TooltipInfo", "DetailExploreView"]), 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{0.5}}}],
                    "Grid"], "\[SpanFromAbove]"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{5}}, "Rows" -> {{1}}}],
                    "Grid"],
                    Alignment->Center,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", 
                    "TooltipOptionsBottomNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    FrameMargins->10,
                    ImageSize->340]}
                    },
                    BaseStyle->"RibbonText",
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.1}}}],
                    "Column"], False->
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ViewOptions"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "TooltipOptionsDownArrow.png"]]]}
                    },
                    AutoDelete->False,
                    BaseStyle->{CacheGraphics -> False},
                    
                    GridBoxAlignment->{
                    "Columns" -> {Left, Right}, "Rows" -> {{Automatic}}},
                    GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.5]}}}],
                    "Grid"],
                    Alignment->Left,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "TooltipOptionsBarNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>($CellContext`open$$ = True),
                    Evaluator->Automatic,
                    FrameMargins->{{10, 10}, {2, 2}},
                    ImageSize->340,
                    Method->"Preemptive"]}, Dynamic[$CellContext`open$$],
                    ImageSize->Automatic],
                    DynamicModuleValues:>{}], "\[SpanFromAbove]"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Bottom}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Grid"]}
                   },
                   DefaultBaseStyle->"Column",
                   GridBoxAlignment->{"Columns" -> {{Left}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   
                   GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, 
                    "Rows" -> {1.5, 1.5, 0.8, 0.8}}],
                  "Column"],
                 Deploy,
                 DefaultBaseStyle->"Deploy"],
                FrameMargins->10],
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentAreaGradient.9.png"]},
               DefaultBaseStyle->{},
               ImageSize->512]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
           "Column"],
          Deploy,
          DefaultBaseStyle->"Deploy"], "InfoAndZoom"->
         TagBox[
          TagBox[GridBox[{
             {
              PanelBox[
               TagBox[GridBox[{
                  {
                   PaneBox[
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "InfoAndZoomTitle"],
                    BaseStyle->{"TextStyling"}], "RibbonTitle",
                    StripOnInput->False],
                    ImageMargins->{{8, 0}, {0, 0}}], 
                   ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                   ItemBox[
                    ButtonBox[
                    PaneSelectorBox[{False->
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, "Close.png"]]],
                     True->
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "Close-Hover.png"]]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    ButtonFunction:>(Ribbon`Private`page$$ = None),
                    ContentPadding->False,
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->{{0, 8}, {8, 4}},
                    Method->"Preemptive"],
                    Alignment->Center,
                    StripOnInput->False]}
                 },
                 AutoDelete->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Left, Left, Right}, "Rows" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                 GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                "Grid"],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentTitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->512]},
             {
              PanelBox[
               PaneBox[
                TagBox[
                 TagBox[GridBox[{
                    {
                    TagBox[GridBox[{
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ImageDimensions"],
                    BaseStyle->{"TextStyling"}], 
                    DynamicBox[ToBoxes[
                    BoxForm`Undeploy[
                    ImageDimensions[
                    $CellContext`image$$[]]], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ColorSpace"],
                    BaseStyle->{"TextStyling"}], 
                    TagBox[
                    
                    DynamicModuleBox[{BoxForm`localvar$$, BoxForm`update$$ = 
                    0}, 
                    
                    DynamicBox[ToBoxes[
                    If[BoxForm`update$$ === 0, BoxForm`localvar$$ = 
                    ImageColorSpace[
                    $CellContext`image$$[]], 
                    (FrontEnd`Private`ImageEditingReplaceImage[
                    ButtonNotebook[], 
                    If[# === Automatic, 
                    Image[
                    $CellContext`image$$[], ColorSpace -> Automatic], 
                    ColorConvert[
                    $CellContext`image$$[], #]], "InfoAndZoom"]& )[
                    BoxForm`localvar$$, 
                    ImageColorSpace[
                    $CellContext`image$$[]]]]; PopupMenu[
                    Dynamic[
                    BoxForm`localvar$$, {(BoxForm`localvar$$ = #)& , (
                    BoxForm`localvar$$ = #)& , (BoxForm`localvar$$ = #; 
                    PreIncrement[BoxForm`update$$])& }], {
                    Automatic, Delimiter, "Grayscale", "RGB", "CMYK", "HSB", 
                    "XYZ", "LAB", "LCH", "LUV"}, 
                    Dynamic[
                    ImageColorSpace[
                    $CellContext`image$$[]], SynchronousUpdating -> False, 
                    CachedValue -> StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False]], BaseStyle -> "RibbonText", 
                    MenuStyle -> "RibbonText"], StandardForm],
                    CachedValue:>StyleBox[
                    CheckboxBox[False], ShowContents -> False, StripOnInput -> 
                    False],
                    SynchronousUpdating->False,
                    TrackedSymbols:>{BoxForm`update$$}],
                    DynamicModuleValues:>{}],
                    Deploy,
                    DefaultBaseStyle->"Deploy"]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "AlphaChannel"],
                    BaseStyle->{"TextStyling"}], 
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    TagBox[
                    
                    DynamicModuleBox[{BoxForm`localvar$$, BoxForm`update$$ = 
                    0}, 
                    
                    DynamicBox[ToBoxes[
                    If[BoxForm`update$$ === 0, BoxForm`localvar$$ = 
                    ImageMeasurements[
                    $CellContext`image$$[], "Transparency"], 
                    (FrontEnd`Private`ImageEditingReplaceImage[
                    ButtonNotebook[], 
                    If[#, SetAlphaChannel, RemoveAlphaChannel][
                    $CellContext`image$$[]], "InfoAndZoom"]& )[
                    BoxForm`localvar$$, 
                    ImageMeasurements[
                    $CellContext`image$$[], "Transparency"]]]; Checkbox[
                    Dynamic[
                    BoxForm`localvar$$, {(BoxForm`localvar$$ = #)& , (
                    BoxForm`localvar$$ = #)& , (BoxForm`localvar$$ = #; 
                    PreIncrement[BoxForm`update$$])& }], Enabled -> 
                    Dynamic[ImageColorSpace[
                    $CellContext`image$$[]] =!= Automatic]], StandardForm],
                    CachedValue:>StyleBox[
                    CheckboxBox[False], ShowContents -> False, StripOnInput -> 
                    False],
                    SynchronousUpdating->False,
                    TrackedSymbols:>{BoxForm`update$$}],
                    DynamicModuleValues:>{}],
                    Deploy,
                    DefaultBaseStyle->"Deploy"],
                    StripOnInput->False,
                    CheckboxBoxOptions->{BaselinePosition->Scaled[0.3]}], 
                    DynamicBox[ToBoxes[
                    ImageMeasurements[
                    $CellContext`image$$[], "Transparency"], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{0.5}}}],
                    "Grid"]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Channels"],
                    BaseStyle->{"TextStyling"}], 
                    DynamicBox[ToBoxes[
                    ImageChannels[
                    $CellContext`image$$[]], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Interleaving"],
                    BaseStyle->{"TextStyling"}], 
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    TagBox[
                    
                    DynamicModuleBox[{BoxForm`localvar$$, BoxForm`update$$ = 
                    0}, 
                    
                    DynamicBox[ToBoxes[
                    If[BoxForm`update$$ === 0, BoxForm`localvar$$ = ReplaceAll[
                    ReplaceAll[Interleaving, 
                    Options[
                    $CellContext`image$$[]]], 
                    Options[Image]], 
                    (FrontEnd`Private`ImageEditingReplaceImage[
                    ButtonNotebook[], 
                    Image[
                    $CellContext`image$$[], Interleaving -> #], 
                    "InfoAndZoom"]& )[BoxForm`localvar$$, 
                    ReplaceAll[
                    ReplaceAll[Interleaving, 
                    Options[
                    $CellContext`image$$[]]], 
                    Options[Image]]]]; Checkbox[
                    Dynamic[
                    BoxForm`localvar$$, {(BoxForm`localvar$$ = #)& , (
                    BoxForm`localvar$$ = #)& , (BoxForm`localvar$$ = #; 
                    PreIncrement[BoxForm`update$$])& }], Enabled -> Dynamic[
                    MemberQ[{True, False}, 
                    ReplaceAll[
                    ReplaceAll[Interleaving, 
                    Options[
                    $CellContext`image$$[]]], 
                    Options[Image]]]]], StandardForm],
                    CachedValue:>StyleBox[
                    CheckboxBox[False], ShowContents -> False, StripOnInput -> 
                    False],
                    SynchronousUpdating->False,
                    TrackedSymbols:>{BoxForm`update$$}],
                    DynamicModuleValues:>{}],
                    Deploy,
                    DefaultBaseStyle->"Deploy"],
                    StripOnInput->False,
                    CheckboxBoxOptions->{BaselinePosition->Scaled[0.3]}], 
                    DynamicBox[ToBoxes[
                    ReplaceAll[
                    ReplaceAll[Interleaving, 
                    Options[
                    $CellContext`image$$[]]], 
                    Options[Image]], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{0.5}}}],
                    "Grid"]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "DataType"],
                    BaseStyle->{"TextStyling"}], 
                    TagBox[
                    
                    DynamicModuleBox[{BoxForm`localvar$$, BoxForm`update$$ = 
                    0}, 
                    
                    DynamicBox[ToBoxes[
                    If[BoxForm`update$$ === 0, BoxForm`localvar$$ = ImageType[
                    $CellContext`image$$[]], 
                    (FrontEnd`Private`ImageEditingReplaceImage[
                    ButtonNotebook[], 
                    Image[
                    $CellContext`image$$[], #], "InfoAndZoom"]& )[
                    BoxForm`localvar$$, 
                    ImageType[
                    $CellContext`image$$[]]]]; PopupMenu[
                    Dynamic[
                    BoxForm`localvar$$, {(BoxForm`localvar$$ = #)& , (
                    BoxForm`localvar$$ = #)& , (BoxForm`localvar$$ = #; 
                    PreIncrement[BoxForm`update$$])& }], {
                    "Bit", "Byte", "Bit16", "Real32", "Real64"}, 
                    Dynamic[
                    ImageType[
                    $CellContext`image$$[]], SynchronousUpdating -> False, 
                    CachedValue -> StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False]], BaseStyle -> "RibbonText", 
                    MenuStyle -> "RibbonText"], StandardForm],
                    CachedValue:>StyleBox[
                    CheckboxBox[False], ShowContents -> False, StripOnInput -> 
                    False],
                    SynchronousUpdating->False,
                    TrackedSymbols:>{BoxForm`update$$}],
                    DynamicModuleValues:>{}],
                    Deploy,
                    DefaultBaseStyle->"Deploy"]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Size"],
                    BaseStyle->{"TextStyling"}], 
                    DynamicBox[ToBoxes[
                    BoxForm`Undeploy[
                    ByteCount[
                    $CellContext`image$$[]]], StandardForm],
                    CachedValue:>StyleBox[
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ShowContents -> False, 
                    StripOnInput -> False],
                    SynchronousUpdating->False]},
                    {
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Magnification"],
                    BaseStyle->{"TextStyling"}], 
                    TagBox[
                    
                    DynamicModuleBox[{BoxForm`localvar$$, BoxForm`update$$ = 
                    0}, 
                    
                    DynamicBox[ToBoxes[
                    If[BoxForm`update$$ === 0, BoxForm`localvar$$ = 
                    CurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "GraphicsBoxOptionsImageSize"], 
                    (FrontEnd`Private`ImageEditingReplaceImage[
                    ButtonNotebook[], 
                    
                    Module[{$CellContext`mag$}, $CellContext`mag$ = 
                    Replace[#, {Magnification[
                    Pattern[$CellContext`x, 
                    Blank[]]] :> $CellContext`x, Pattern[$CellContext`other, 
                    Blank[]] :> $CellContext`other}]; Image[
                    $CellContext`image$$[], ImageSize -> Automatic, 
                    Magnification -> $CellContext`mag$]], "InfoAndZoom"]& )[
                    BoxForm`localvar$$, 
                    CurrentValue[
                    FrontEnd`AttachedCellParent[], 
                    "GraphicsBoxOptionsImageSize"]]]; PopupMenu[
                    Dynamic[
                    BoxForm`localvar$$, {(BoxForm`localvar$$ = #)& , (
                    BoxForm`localvar$$ = #)& , (BoxForm`localvar$$ = #; 
                    PreIncrement[BoxForm`update$$])& }], {Automatic -> Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MagnificationAutomatic"]], 
                    BaseStyle -> {"TextStyling"}], Delimiter, 
                    Magnification[0.05] -> "5%", Magnification[0.1] -> "10%", 
                    Magnification[0.25] -> "25%", Magnification[0.5] -> "50%",
                     Magnification[1] -> "100%", Magnification[2] -> "200%", 
                    Magnification[3] -> "300%", Magnification[4] -> "400%", 
                    Magnification[8] -> "800%", Magnification[16] -> "1600%"}, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MagnificationOther"]], 
                    BaseStyle -> {"TextStyling"}], BaseStyle -> "RibbonText", 
                    MenuStyle -> "RibbonText"], StandardForm],
                    CachedValue:>StyleBox[
                    CheckboxBox[False], ShowContents -> False, StripOnInput -> 
                    False],
                    SynchronousUpdating->False,
                    TrackedSymbols:>{BoxForm`update$$}],
                    DynamicModuleValues:>{}],
                    Deploy,
                    DefaultBaseStyle->"Deploy"]}
                    },
                    AutoDelete->False,
                    ColumnsEqual->True,
                    
                    FrameStyle->RGBColor[
                    0.7019607843137254, 0.7019607843137254, 
                    0.7019607843137254],
                    GridBoxAlignment->{"Columns" -> {Right, Left}},
                    
                    GridBoxDividers->{
                    "Columns" -> {{False}}, "Rows" -> {{False}, True, False}},
                    GridBoxItemSize->{},
                    GridBoxItemStyle->{"Columns" -> {Bold, Plain}},
                    GridBoxSpacings->{
                    "Columns" -> {{1}}, "Rows" -> {{0.2}, 2, 0.2}},
                    RowsEqual->True],
                    "Grid"], 
                    DynamicBox[ToBoxes[
                    Column[{
                    Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "Histogram"]], 
                    BaseStyle -> {"TextStyling"}], Bold], 
                    BoxForm`Undeploy[
                    ImageHistogram[
                    ImageResize[
                    $CellContext`image$$[], {256}, Resampling -> "Nearest"], 
                    FrameStyle -> GrayLevel[191/255.], Background -> White, 
                    ImagePadding -> None, ImageSize -> 270]], 
                    Pane["", ImageSize -> {30, 30}]}, Spacings -> 0.8], 
                    StandardForm],
                    BaseStyle->{CacheGraphics -> False},
                    CachedValue:>PaneBox[
                    InterpretationBox[
                    StyleBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "NecklaceAnimator"][Medium]], 
                    AnimatorBoxOptions -> {}], 
                    Animator[Appearance -> "Necklace"], 
                    BaseStyle -> {"Deploy"}], ImageSize -> Full, Alignment -> 
                    Center],
                    SynchronousUpdating->False]},
                    {
                    ItemBox[
                    DynamicModuleBox[{$CellContext`open$$ = False}, 
                    PaneSelectorBox[{True->
                    TagBox[GridBox[{
                    {
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ViewOptions"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "TooltipOptionsUpArrow.png"]]]}
                    },
                    AutoDelete->False,
                    BaseStyle->{CacheGraphics -> False},
                    
                    GridBoxAlignment->{
                    "Columns" -> {Left, Right}, "Rows" -> {{Automatic}}},
                    GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.5]}}}],
                    "Grid"],
                    Alignment->Left,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "TooltipOptionsBarNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>($CellContext`open$$ = False),
                    Evaluator->Automatic,
                    FrameMargins->{{10, 10}, {2, 2}},
                    ImageSize->450,
                    Method->"Preemptive"]},
                    {
                    PanelBox[
                    TagBox[GridBox[{
                    {
                    SliderBox[Dynamic[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]], {39, 
                    3, -6},
                    ImageSize->Small], 
                    TagBox[GridBox[{
                    {
                    
                    GraphicsBox[{RasterBox[Dynamic[
                    Reverse[ImageData[ImageTake[
                    ToExpression[FE`Evaluate[
                    FEPrivate`ImportImage[FrontEnd`ToFileName[{
                    "Ribbons", "Image"}, 
                    "ImageEditingTooltipPreview.png"]]]], {
                    20 - IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2], 20 + 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2]}, {
                    20 - IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2], 20 + 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2]}]]]]], 
                    {EdgeForm[{RGBColor[0, 0, 0], Opacity[0.4], 
                    AbsoluteThickness[3]}], FaceForm[None], 
                    DynamicBox[Typeset`ToBoxes[
                    Rectangle[{
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2], 
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2]}, {
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1, 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1}], StandardForm, 
                    Graphics]]}, 
                    {EdgeForm[{RGBColor[1, 1, 1], Opacity[0.8], 
                    AbsoluteThickness[1]}], FaceForm[None], 
                    DynamicBox[Typeset`ToBoxes[
                    Rectangle[{
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2], 
                    IntegerPart[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"]/2]}, {
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1, 
                    IntegerPart[CurrentValue[$FrontEnd, 
                    "RasterExploreViewRange"]/2] + 1}], StandardForm, 
                    Graphics]]}},
                    ImageSize->100]},
                    {
                    TemplateBox[{DynamicBox[
                    ToBoxes[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"], 
                    StandardForm]],"\"px x \"",DynamicBox[
                    ToBoxes[
                    CurrentValue[$FrontEnd, "RasterExploreViewRange"], 
                    StandardForm]],"\"px\""},
                    "RowDefault"]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Center}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
                    "Column"]},
                    {
                    TagBox[GridBox[{
                    {
                    CheckboxBox[Dynamic[
                    CurrentValue[$FrontEnd, "DisplayImagePixels"]], {
                    "TooltipInfo", "DetailExploreView"},
                    BaselinePosition->Scaled[0.3]], 
                    TagBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ShowImagePeek"],
                    BaseStyle->{"TextStyling"}],
                    
                    EventHandlerTag[{"MouseClicked" :> (
                    CurrentValue[$FrontEnd, "DisplayImagePixels"] = 
                    If[CurrentValue[$FrontEnd, "DisplayImagePixels"] =!= 
                    "TooltipInfo", "TooltipInfo", "DetailExploreView"]), 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Rows" -> {{Baseline}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{0.5}}}],
                    "Grid"], "\[SpanFromAbove]"}
                    },
                    AutoDelete->False,
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    GridBoxSpacings->{"Columns" -> {{5}}, "Rows" -> {{1}}}],
                    "Grid"],
                    Alignment->Center,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", 
                    "TooltipOptionsBottomNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    FrameMargins->10,
                    ImageSize->450]}
                    },
                    BaseStyle->"RibbonText",
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                    
                    GridBoxSpacings->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{0.1}}}],
                    "Column"], False->
                    ButtonBox[
                    TagBox[GridBox[{
                    {
                    StyleBox[
                    
                    DynamicBox[FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "ViewOptions"],
                    BaseStyle->{"TextStyling"}],
                    StripOnInput->False,
                    FontWeight->Bold], 
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Image"}, 
                    "TooltipOptionsDownArrow.png"]]]}
                    },
                    AutoDelete->False,
                    BaseStyle->{CacheGraphics -> False},
                    
                    GridBoxAlignment->{
                    "Columns" -> {Left, Right}, "Rows" -> {{Automatic}}},
                    GridBoxItemSize->{"Columns" -> {{
                    Scaled[0.5]}}}],
                    "Grid"],
                    Alignment->Left,
                    
                    Appearance:>FEPrivate`FrontEndResource[
                    "FEExpressions", "TooltipOptionsBarNinePatchAppearance"],
                    BaseStyle->"RibbonText",
                    ButtonFunction:>($CellContext`open$$ = True),
                    Evaluator->Automatic,
                    FrameMargins->{{10, 10}, {2, 2}},
                    ImageSize->450,
                    Method->"Preemptive"]}, Dynamic[$CellContext`open$$],
                    ImageSize->Automatic],
                    DynamicModuleValues:>{}],
                    Alignment->Left,
                    StripOnInput->False], "\[SpanFromLeft]"}
                   },
                   AutoDelete->False,
                   BaseStyle->"RibbonText",
                   GridBoxAlignment->{"Columns" -> {{Center}}},
                   
                   GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                   GridBoxSpacings->{"Columns" -> {{2}}, "Rows" -> {{1}}}],
                  "Grid"],
                 Deploy,
                 DefaultBaseStyle->"Deploy"],
                FrameMargins->{{10, 10}, {5, 5}}],
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentAreaGradient.9.png"]},
               DefaultBaseStyle->{},
               ImageSize->512]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
           "Column"],
          Deploy,
          DefaultBaseStyle->"Deploy"], "More"->
         TagBox[
          TagBox[GridBox[{
             {
              PanelBox[
               TagBox[GridBox[{
                  {
                   PaneBox[
                    StyleBox[
                    DynamicBox[ToBoxes[
                    If[$CellContext`query$$ === None, 
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MoreTitle"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Row[{
                    Button[
                    Mouseover[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MoreTitle"]], 
                    BaseStyle -> {"TextStyling"}], 
                    Style[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "ImageEditModeMenu", "MoreTitle"]], 
                    BaseStyle -> {"TextStyling"}], FontColor -> 
                    Red]], $CellContext`alphamode$$ = 
                    "More"; $CellContext`query$$ = None, Appearance -> None, 
                    DefaultBaseStyle -> {}, BaseStyle -> {}], 
                    
                    Style[$CellContext`query$$, FontColor -> 
                    RGBColor[244/255., 95/255., 17/255.], FontWeight -> 
                    "Plain"]}, 
                    Style[
                    " \[FilledRightTriangle] ", FontColor -> 
                    RGBColor[76/255., 76/255., 76/255.]]]], StandardForm]], 
                    "RibbonTitle",
                    StripOnInput->False],
                    ImageMargins->{{8, 0}, {0, 0}}], 
                   ItemBox["\<\"\"\>",
                    ItemSize->Fit,
                    StripOnInput->False], 
                   ItemBox[
                    ButtonBox[
                    PaneSelectorBox[{False->
                    DynamicBox[FEPrivate`ImportImage[
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, "Close.png"]]],
                     True->
                    DynamicBox[FEPrivate`ImportImage[
                    
                    FrontEnd`ToFileName[{"Ribbons", "Common"}, 
                    "Close-Hover.png"]]]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    ButtonFunction:>(Ribbon`Private`page$$ = None),
                    ContentPadding->False,
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->{{0, 8}, {8, 4}},
                    Method->"Preemptive"],
                    Alignment->Center,
                    StripOnInput->False]}
                 },
                 AutoDelete->False,
                 
                 GridBoxAlignment->{
                  "Columns" -> {Left, Left, Right}, "Rows" -> {{Center}}},
                 
                 GridBoxItemSize->{
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
                 GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
                "Grid"],
               Alignment->{Left, Center},
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentTitleStripe.9.png"]},
               FrameMargins->0,
               ImageSize->512]},
             {
              PanelBox[
               PaneBox[
                TagBox[
                 
                 DynamicModuleBox[{$CellContext`allCategoryData$$, \
$CellContext`chosenCategoryData$$, $CellContext`chosenCategory$$, \
$CellContext`clight$$ = GrayLevel[0.77], $CellContext`cdark$$ = GrayLevel[
                  0.34], $CellContext`cleft$$ = GrayLevel[
                  0.2980392156862745], $CellContext`cright$$ = GrayLevel[
                  0.22352941176470587`], $CellContext`cborder$$ = RGBColor[
                  0.7019607843137254, 0.7019607843137254, 
                   0.7019607843137254], $CellContext`leftsize$$ = 
                  178, $CellContext`makeLeftButton$$, \
$CellContext`makeRightButtons$$, $CellContext`height$$ = 
                  200, $CellContext`lastQuery$$ = 
                  "", $CellContext`localQueries$$ = {}}, 
                  DynamicBox[ToBoxes[
                    Switch[$CellContext`alphamode$$, "More", 
                    Grid[{{
                    Dynamic[
                    Pane[
                    Column[
                    Replace[
                    Join[{
                    
                    FrontEnd`Private`ImageEditingGetRecentActionsMenu[]}, \
$CellContext`allCategoryData$$], {Menu[
                    Pattern[$CellContext`category$, 
                    Blank[]], 
                    Pattern[$CellContext`list$, {
                    
                    BlankSequence[]}]] :> \
$CellContext`makeLeftButton$$[$CellContext`category$, $CellContext`list$], 
                    Blank[] :> Sequence[]}, {1}], Spacings -> 0], 
                    ImageSize -> {Automatic, $CellContext`height$$}, 
                    Scrollbars -> Automatic, AppearanceElements -> {}], 
                    TrackedSymbols :> {$CellContext`allCategoryData$$, \
$CellContext`chosenCategory$$}, SynchronousUpdating -> False, CachedValue -> 
                    ToBoxes[
                    Pane[
                    Animator[Appearance -> "Necklace"], ImageMargins -> 8, 
                    ImageSize -> Full, Alignment -> Center]]], 
                    Dynamic[
                    Pane[
                    Column[
                    Flatten[{
                    Replace[$CellContext`chosenCategoryData$$, {Menu[
                    Pattern[$CellContext`subcategory$, 
                    Blank[]], 
                    Pattern[$CellContext`list$, 
                    
                    Blank[]]] :> \
$CellContext`makeRightButtons$$[$CellContext`subcategory$, \
$CellContext`list$], Pattern[$CellContext`item$, 
                    Blank[
                    MenuItem]] :> \
$CellContext`makeRightButtons$$[$CellContext`item$], Blank[] :> Sequence[]}, {
                    1}]}], Spacings -> 0.1, ItemSize -> Fit], 
                    ImageSize -> {Automatic, $CellContext`height$$}, 
                    Scrollbars -> Automatic, AppearanceElements -> {}], 
                    SynchronousUpdating -> False, CachedValue -> ""]}}, 
                    Spacings -> {0, 0} + 0.2, Alignment -> Top, 
                    Dividers -> {Center, Center}, 
                    FrameStyle -> $CellContext`cborder$$], "Query", 
                    Pane[
                    Dynamic[
                    If[$CellContext`lastQuery$$ === $CellContext`query$$, 
                    Quiet[
                    AlphaIntegration`ImageEditingQuery[
                    
                    Dynamic[{$CellContext`alphamode$$, \
$CellContext`query$$}], $CellContext`query$$, 
                    $CellContext`imageThumbnail$$[], 
                    $CellContext`image$$[], 
                    StandardForm]], $CellContext`lastQuery$$ = \
$CellContext`query$$; Pane[
                    Animator[Appearance -> If[
                    
                    MemberQ[$CellContext`localQueries$$, \
$CellContext`query$$], "Necklace", "ArcUp"]], ImageSize -> Full, Alignment -> 
                    Center]], SynchronousUpdating -> False, CachedValue -> 
                    ToBoxes[
                    Pane[
                    Animator[Appearance -> "Necklace"], ImageSize -> Full, 
                    Alignment -> Center]]], ImageMargins -> 8]], 
                    StandardForm]],
                  BaseStyle->"RibbonText",
                  DynamicModuleValues:>{},
                  
                  Initialization:>($CellContext`allCategoryData$$ = 
                    AlphaIntegration`ImageEditingQuery[
                    "ImageEditing NestedCategoryListing"]; \
$CellContext`localQueries$$ = 
                    Cases[$CellContext`allCategoryData$$, Alternatives[
                    MenuItem[
                    Pattern[$CellContext`q, 
                    Blank[String]]], 
                    MenuItem[
                    Blank[], 
                    Pattern[$CellContext`q, 
                    Blank[String]]]] :> $CellContext`q, Infinity]; 
                   With[{$CellContext`recentActions$ = 
                    FrontEnd`Private`ImageEditingGetRecentActionsMenu[]}, 
                    If[
                    MatchQ[$CellContext`recentActions$, 
                    Menu[
                    Blank[], {
                    BlankSequence[]}]], $CellContext`chosenCategory$$ = 
                    Part[$CellContext`recentActions$, 
                    1]; $CellContext`chosenCategoryData$$ = 
                    Part[$CellContext`recentActions$, 
                    2], $CellContext`chosenCategory$$ = 
                    Part[$CellContext`allCategoryData$$, 1, 
                    1]; $CellContext`chosenCategoryData$$ = 
                    Part[$CellContext`allCategoryData$$, 1, 
                    2]]]; $CellContext`makeLeftButton$$[
                    Pattern[$CellContext`category$, 
                    Blank[]], 
                    Pattern[$CellContext`list$, 
                    Blank[]]] := 
                    Button[$CellContext`category$, \
$CellContext`chosenCategory$$ = $CellContext`category$; \
$CellContext`chosenCategoryData$$ = $CellContext`list$, Appearance :> 
                    FEPrivate`If[
                    
                    FEPrivate`SameQ[$CellContext`category$, \
$CellContext`chosenCategory$$], 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", 
                    "MoreLeftSetterPressedNinePatchAppearance"], 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "MoreLeftSetterNinePatchAppearance"]], 
                    FrameMargins -> {{10, 0}, {0, 0}}, 
                    ImageSize -> $CellContext`leftsize$$, 
                    BaseStyle -> {
                    "RibbonBold", FontColor -> $CellContext`cleft$$}, 
                    DefaultBaseStyle -> {}, Alignment -> 
                    Left]; $CellContext`makeRightButtons$$[
                    Pattern[$CellContext`subcategory$, 
                    Blank[]], 
                    Pattern[$CellContext`list$, 
                    Blank[]]] := {
                    
                    Button[$CellContext`subcategory$, Null, Appearance :> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "MoreRightHeaderNinePatchAppearance"], 
                    FrameMargins -> {{10, 0}, {0, 0}}, 
                    BaseStyle -> {"RibbonTitle"}, DefaultBaseStyle -> {}, 
                    Alignment -> Left], 
                    
                    Map[$CellContext`makeRightButtons$$, $CellContext`list$]}; \
$CellContext`makeRightButtons$$[
                    MenuItem[
                    Pattern[$CellContext`input$, 
                    Blank[]], 
                    BlankNullSequence[
                    Rule]]] := $CellContext`makeRightButtons$$[
                    
                    MenuItem[$CellContext`input$, $CellContext`input$]]; \
$CellContext`makeRightButtons$$[
                    MenuItem[
                    Pattern[$CellContext`label$, 
                    Blank[]], 
                    Pattern[$CellContext`input$, 
                    Blank[]], 
                    BlankNullSequence[
                    Rule]]] := $CellContext`makeRightButtons$$[
                    
                    MenuItem[$CellContext`label$, $CellContext`input$]]; \
$CellContext`makeRightButtons$$[
                    MenuItem[
                    Pattern[$CellContext`label$, 
                    Blank[]], 
                    Pattern[$CellContext`input$, 
                    Blank[]]]] := Style[
                    
                    Button[$CellContext`label$, $CellContext`query$$ = \
$CellContext`input$; $CellContext`alphamode$$ = "Query", Appearance :> 
                    FEPrivate`FrontEndResource[
                    "FEExpressions", "MoreRightSetterNinePatchAppearance"], 
                    FrameMargins -> {{10, 0}, {0, 0}}, 
                    BaseStyle -> {
                    "RibbonText", FontColor -> $CellContext`cright$$}, 
                    DefaultBaseStyle -> {}, Alignment -> Left], ContextMenu -> {
                    MenuItem["Remove from recent actions", 
                    KernelExecute[
                    
                    FrontEnd`Private`ImageEditingRemoveFromRecentActionsMenu[$\
CellContext`input$]], MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Remove all recent actions", 
                    KernelExecute[
                    FrontEnd`Private`ImageEditingRemoveFromRecentActionsMenu[
                    All]], MenuEvaluator -> Automatic]}]; Manipulate; Null),
                  SynchronousInitialization->False],
                 Deploy,
                 DefaultBaseStyle->"Deploy"],
                FrameMargins->0],
               
               Appearance->{
                "Default" -> 
                 FrontEnd`FileName[{"Ribbons", "Common"}, 
                   "ContentAreaGradient.9.png"]},
               DefaultBaseStyle->{},
               ImageSize->512]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
           "Column"],
          Deploy,
          DefaultBaseStyle->"Deploy"]}, Dynamic[Ribbon`Private`page$$],
         ImageSize->Automatic],
        Alignment->Top,
        StripOnInput->False]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
     GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}],
    "Column"],
   DynamicModuleValues:>{},
   Initialization:>(If[
      ValueQ[FrontEnd`Private`$RibbonDefaultPage], Ribbon`Private`page$$ = 
      FrontEnd`Private`$RibbonDefaultPage]; 
    ClearAll[FrontEnd`Private`$RibbonDefaultPage])],
  BaseStyle->{"RibbonText"},
  DynamicModuleValues:>{{DownValues[$CellContext`image$$] = {HoldPattern[
         $CellContext`image$$[]] :> With[{$CellContext`expr$ = ToExpression[
            MathLink`CallFrontEnd[
             FrontEnd`NotebookRead[
              FrontEnd`AttachedCellParent[]]]]}, 
         If[
          
          Image`Image2DQ[$CellContext`expr$], $CellContext`image$$[] = \
$CellContext`expr$]]}}, {
    DownValues[$CellContext`imageThumbnail$$] = {HoldPattern[
         $CellContext`imageThumbnail$$[]] :> If[
         Image`Image2DQ[
          $CellContext`image$$[]], $CellContext`imageThumbnail$$[] = Thumbnail[
            $CellContext`image$$[], Small]; If[
           Apply[Or, 
            MapThread[Greater, 
             Map[ImageDimensions, {
               $CellContext`imageThumbnail$$[], 
               $CellContext`image$$[]}]]], $CellContext`imageThumbnail$$[] = \
$CellContext`image$$[]]; $CellContext`imageThumbnail$$[]]}}},
  Initialization:>(
   CurrentValue[$FrontEnd, "DisplayImagePixels"] = "DetailExploreView"; 
   MathLink`CallFrontEnd[
     FrontEnd`Value[
      FEPrivate`SetPixelPointInfoSymbol[
       Dynamic[ImageAssistant`CoordinateIndex]]]]; $CellContext`image$$[] := 
    With[{$CellContext`expr$ = ToExpression[
         MathLink`CallFrontEnd[
          FrontEnd`NotebookRead[
           FrontEnd`AttachedCellParent[]]]]}, 
      If[
       Image`Image2DQ[$CellContext`expr$], $CellContext`image$$[] = \
$CellContext`expr$]]; $CellContext`imageThumbnail$$[] := If[
      Image`Image2DQ[
       $CellContext`image$$[]], $CellContext`imageThumbnail$$[] = Thumbnail[
         $CellContext`image$$[], Small]; If[
        Apply[Or, 
         MapThread[Greater, 
          Map[ImageDimensions, {
            $CellContext`imageThumbnail$$[], 
            $CellContext`image$$[]}]]], $CellContext`imageThumbnail$$[] = \
$CellContext`image$$[]]; $CellContext`imageThumbnail$$[]]; If[
     Image`Image2DQ[
     FrontEnd`Private`$ImageEditorDefaultImage], $CellContext`image$$[] = 
      FrontEnd`Private`$ImageEditorDefaultImage; 
     ClearAll[FrontEnd`Private`$ImageEditorDefaultImage]]; Null),
  SynchronousInitialization->False]],
 Evaluator->"System",
 Deployed->True,
 CellContext->Cell,
 DynamicUpdating->True,
 DynamicEvaluationTimeout->12,
 Magnification->1,
 CellTags->
  "AttachedImage2D",ExpressionUUID->"9a46d650-b4c1-4e20-9bf5-d209ca6cd911"]
},
WindowSize->{775, 872},
WindowMargins->{{564, Automatic}, {Automatic, 54}},
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "AttachedImage2D"->{
  Cell[558, 20, 230119, 5147, 61, InheritFromParent,ExpressionUUID->"9a46d650-b4c1-4e20-9bf5-d209ca6cd911",
   CellTags->"AttachedImage2D"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"AttachedImage2D", 230981, 5179}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 230119, 5147, 61, InheritFromParent,ExpressionUUID->"9a46d650-b4c1-4e20-9bf5-d209ca6cd911",
 CellTags->"AttachedImage2D"]
}
]
*)

(* End of internal cache information *)

