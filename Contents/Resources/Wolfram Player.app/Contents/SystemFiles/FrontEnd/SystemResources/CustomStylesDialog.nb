(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[      8795,        218]
NotebookOptionsPosition[      7299,        178]
NotebookOutlinePosition[      8783,        218]
CellTagsIndexPosition[      8740,        215]
WindowTitle->Choose a custom style
WindowFrame->ModelessDialog*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 DynamicModuleBox[{$CellContext`popupnb$$, $CellContext`nb$$, \
$CellContext`inputnb$$, $CellContext`styles$$, $CellContext`ss$$, \
$CellContext`var$$, $CellContext`scope$$, $CellContext`change$$, \
$CellContext`bg$$, $CellContext`i$$}, 
  TagBox[GridBox[{
     {
      RowBox[{
       DynamicBox[ToBoxes[
         FEPrivate`FrontEndResource["FEStrings", "customStylesFieldLabel"], 
         StandardForm],
        ImageSizeCache->{143., {3., 9.}}], "\[InvisibleSpace]", 
       DynamicWrapperBox[
        InputFieldBox[Dynamic[$CellContext`var$$], String,
         BoxID -> "inputfield",
         BaseStyle->{"TextStyleInputField", "ControlStyle"},
         ContinuousAction->True,
         ImageSize->{169, {20, 40}},
         MenuList->Dynamic[
           
           BoxForm`MenuListToBoxes[$CellContext`styles$$, 
            StandardForm]]], $CellContext`nb$$ = FE`Evaluate[
           FEPrivate`LastActiveUserNotebook[]]; $CellContext`inputnb$$ = 
         Replace[$CellContext`nb$$, $Failed :> 
           EvaluationNotebook[]]; $CellContext`bg$$ = 
         AbsoluteCurrentValue[$CellContext`inputnb$$, 
           Background]; $CellContext`ss$$ = 
         CurrentValue[$CellContext`inputnb$$, StyleDefinitions]; (If[
          And[
           StringQ[#], 
           FileExistsQ[#]], $CellContext`ss$$ = #]& )[
          FileNameJoin[{
            Quiet[
             NotebookDirectory[$CellContext`inputnb$$]], $CellContext`ss$$}]]; 
        Refresh[$CellContext`styles$$ = 
          If[$CellContext`inputnb$$ === None, {}, 
            With[{$CellContext`n = $CellContext`inputnb$$}, 
             Part[
              Rest[
               FE`Evaluate[
                FEPrivate`GetPopupList[$CellContext`n, "MenuListStyles"]]], 
              All, 2]]], UpdateInterval -> 1],
        ImageSizeCache->{171., {8., 14.}}]}]},
     {
      DynamicBox[ToBoxes[
        FEPrivate`FrontEndResource["FEStrings", "customStylesPreviewLabel"], 
        StandardForm],
       ImageSizeCache->{44., {0., 9.}}]},
     {
      FrameBox[
       PaneBox[
        DynamicBox[ToBoxes[
          
          With[{$CellContext`v$ = $CellContext`var$$, \
$CellContext`stylesheet$ = $CellContext`ss$$, $CellContext`background$ = If[
              ColorQ[$CellContext`bg$$], $CellContext`bg$$, 
              White], $CellContext`pagewidth$ = 
            CurrentValue[$CellContext`inputnb$$, {
              StyleDefinitions, $CellContext`var$$, 
               PageWidth}]}, $CellContext`i$$ = Rasterize[
              Notebook[
               ConstantArray[
                Cell[
                 BoxData[
                  ToBoxes[
                   Style[
                    
                    If[$CellContext`pagewidth$ === Infinity, 
                    "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz", 
                    FE`Evaluate[
                    FEPrivate`TruncateStringToWidth[
                    "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz", \
$CellContext`v$, 200]]], $CellContext`v$, LineBreakWithin -> False, 
                    ShowStringCharacters -> False]]], $CellContext`v$, 
                 CounterAssignments -> {{$CellContext`v$, 0}}, 
                 CellMargins -> {{0, 0}, {2, 2}}], 3], 
               Background -> $CellContext`background$, 
               StyleDefinitions -> $CellContext`stylesheet$, WindowSize -> 
               If[$CellContext`pagewidth$ === Infinity, 350, 310]], 
              "Graphics"]; ImageCrop[$CellContext`i$$, {300, Part[
                ImageDimensions[$CellContext`i$$], 2]/3}, 
             If[Part[
                ImageDimensions[$CellContext`i$$], 1] < 300, Left, Right], 
             Padding -> $CellContext`background$]], StandardForm],
         SynchronousUpdating->False,
         TrackedSymbols:>{$CellContext`var$$, $CellContext`ss$$, \
$CellContext`bg$$, $CellContext`inputnb$$}],
        Alignment->{Left, Center},
        ImageSize->{{300, 300}, {80, Full}}],
       Background->Dynamic[
         If[
          ColorQ[$CellContext`bg$$], $CellContext`bg$$, White]],
       FrameMargins->5,
       FrameStyle->GrayLevel[0.6],
       RoundingRadius->10,
       StripOnInput->False]},
     {
      ItemBox[
       StyleBox[
        DynamicBox[FEPrivate`FrontEndResource[
         "FEExpressions", "ChoiceButtonsOrder"][{
           ButtonBox[
            DynamicBox[
             FEPrivate`FrontEndResourceString["okButtonText"]], 
            ButtonFunction :> (
             FrontEndTokenExecute[$CellContext`inputnb$$, 
               "Style", $CellContext`var$$]; 
             CurrentValue[$FrontEnd, 
                StyleNameDialogSettings] = $CellContext`var$$; DialogReturn[]; 
             SetSelectedNotebook[$CellContext`inputnb$$]), Appearance -> 
            "DefaultButton", Enabled -> 
            Dynamic[$CellContext`nb$$ =!= $Failed], Evaluator -> Automatic, 
            Method -> "Preemptive"], 
           ButtonBox[
            DynamicBox[
             FEPrivate`FrontEndResourceString["cancelButtonText"]], 
            ButtonFunction :> DialogReturn[$Canceled], Appearance -> 
            "CancelButton", Enabled -> True, Evaluator -> Automatic, Method -> 
            "Preemptive"]}],
         ImageSizeCache->{192., {20., 26.}}],
        Deployed->True,
        DynamicUpdating->True,
        ButtonBoxOptions->{ImageMargins->{{2, 2}, {10, 10}},
        ImageSize->Dynamic[
          CurrentValue["DefaultButtonSize"]]},
        GridBoxOptions->{AutoDelete->False,
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}}],
       Alignment->Right,
       StripOnInput->False]}
    },
    DefaultBaseStyle->"Column",
    GridBoxAlignment->{"Columns" -> {{Left}}},
    GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
    GridBoxSpacings->{"Columns" -> {{Automatic}}, "Rows" -> {1, 2, 0.5, 1}}],
   "Column"],
  DynamicModuleValues:>{},
  Initialization:>($CellContext`var$$ = 
   CurrentValue[$FrontEnd, StyleNameDialogSettings]),
  UnsavedVariables:>{$CellContext`popupnb$$, $CellContext`nb$$, \
$CellContext`inputnb$$, $CellContext`styles$$, $CellContext`ss$$, \
$CellContext`var$$, $CellContext`scope$$, $CellContext`change$$, \
$CellContext`bg$$, $CellContext`i$$}]],
 CellMargins->10,
 CellBracketOptions->{"Color"->RGBColor[0.269993, 0.308507, 0.6]},
 CellHorizontalScrolling->True,
 PageBreakAbove->True,
 PageBreakWithin->False,
 ShowAutoStyles->True,
 LineSpacing->{1.25, 0},
 AutoItalicWords->{},
 ScriptMinSize->9,
 ShowStringCharacters->False,
 FontFamily:>CurrentValue["PanelFontFamily"],
 FontSize:>CurrentValue[
  "PanelFontSize"],ExpressionUUID->"535713f5-3112-47b5-830a-73a4ac01c1b7"]
},
NotebookEventActions->{"ReturnKeyDown" :> FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], {"MenuCommand", "EvaluateCells"} :> 
  FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], {
   "MenuCommand", "HandleShiftReturn"} :> FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], {
   "MenuCommand", "EvaluateNextCell"} :> FE`Evaluate[
    FEPrivate`FindAndClickDefaultButton[]], "EscapeKeyDown" :> (FE`Evaluate[
     FEPrivate`FindAndClickCancelButton[]]; DialogReturn[$Canceled]), 
  "WindowClose" :> (FE`Evaluate[
     FEPrivate`FindAndClickCancelButton[]]; DialogReturn[$Canceled])},
NotebookDynamicExpression:>Refresh[
  MathLink`CallFrontEnd[
   FrontEnd`BoxReferenceFind[
    FE`BoxReference[
     EvaluationNotebook[], "inputfield", FE`BoxOffset -> {
       FE`BoxChild[1]}, FE`SearchStart -> "StartFromBeginning"]]], None],
WindowSize->All,
WindowMargins->FrontEnd`CurrentValue[
 FrontEnd`$FrontEnd, {
  PrivateFrontEndOptions, "DialogSettings", "CustomStyles", WindowMargins}, 
  Automatic],
WindowFrame->"ModelessDialog",
WindowTitle->FEPrivate`FrontEndResource[
 "FEStrings", "customStylesWindowTitle"],
TaggingRules->{"NotebookID" -> "CustomStylesDialog"},
CellContext->"Global`",
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (January 7, 2019)",
StyleDefinitions->"SystemDialog.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[601, 21, 6694, 155, 236, InheritFromParent,ExpressionUUID->"535713f5-3112-47b5-830a-73a4ac01c1b7",
 PageBreakAbove->True,
 PageBreakWithin->False]
}
]
*)

(* End of internal cache information *)

