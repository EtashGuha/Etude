(FESafe`saved$Line = $Line; $Line = Infinity;);

System`Private`oldContextPath = System`$ContextPath;
System`$ContextPath = {"System`"};

Begin["System`"];

Format[Continuation[_]] := " ";
Format[DialogIndent[_]] = "";

Apply[Unprotect, Names["FE`*"]] // Quiet;
Apply[ClearAll, Select[Names["FE`*"], Attributes[#] =!= {Temporary} &]] // Quiet;


Begin["FE`"];


FE`spellOff = (Head[General::spell] === $Off);
FE`spell111Off = (Head[General::spell1] === $Off);
Off[General::spell];
Off[General::spell1];

FE`typesetToInputForm[Cell[FE`box_BoxFormData, ___]] :=
	ToString[First[
		FromBoxForm[Evaluate[FE`box],StandardForm]], 
		FormatType->InputForm];
FE`typesetToInputForm[FE`s_String] := FE`s;

FE`InterpretInlineCells[TextData[FE`list_List]] :=
	ToExpression[Apply[StringJoin, Map[FE`typesetToInputForm, FE`list]]];
FE`FC[FE`nameString_, FE`ignoreCase_:False]/; $Notebooks :=
	MathLink`CallFrontEnd[ FrontEnd`CompletionsListPacket[FE`nameString,
		Names[StringJoin[FE`nameString, "*"], IgnoreCase -> FE`ignoreCase], Contexts[StringJoin["*",StringJoin[FE`nameString, "*"]]]], NoResult];

Protect[FE`FC];

FE`CAFC[FE`nameString_, FE`ignoreCase_:False]/; $Notebooks :=
	MathLink`CallFrontEnd[ FrontEnd`CompletionsListPacket[FE`nameString,
		Names[StringJoin["*",StringJoin[FE`nameString, "*"]], IgnoreCase -> FE`ignoreCase], Contexts[StringJoin["*",StringJoin[FE`nameString, "*"]]]], NoResult];

Protect[FE`CAFC];

FE`OC[FE`nameString_, FE`patternString_]/; $Notebooks :=
	MathLink`CallFrontEnd[ FrontEnd`OptionCompletionsListPacket[FE`nameString, FE`patternString,
		ToString[#] & /@ (InputForm[#] & /@ Options[ToExpression[FE`nameString]])], NoResult];

Protect[FE`OC];

FE`OVC[FE`nameString_, FE`parentString_, FE`patternString_]/; $Notebooks :=
	MathLink`CallFrontEnd[ FrontEnd`OptionValuesCompletionsListPacket[FE`nameString, FE`parentString, FE`patternString], NoResult];

Protect[FE`OVC];


FE`PFC1[FE`nameString_]/; $Notebooks :=
	MathLink`CallFrontEnd[ FrontEnd`CompletionsListPacket[FE`nameString,
		ToString[#] & /@ (ToExpression[StringJoin[s, "[]"]]),Names["Global`*"]], NoResult];
Protect[FE`PFC1];

FE`PFC2[FE`nameString_]/; $Notebooks :=
	MathLink`CallFrontEnd[ FrontEnd`CompletionsListPacket[FE`nameString,
		ToString[#] & /@ (ToExpression[StringJoin[s, "[\"Properties\"]"]]),Names["Global`*"]], NoResult];
Protect[FE`PFC2];

FE`FlCGD[FE`lastElement_, FE`dropPath_, FE`includePath_] := 
(
	FE`dropLength = StringLength[FE`dropPath];
	
	If[FE`dropLength != 0,
		If[$PathnameSeparator === ":", 
			If[FE`dropPath === $PathnameSeparator,
				--FE`dropLength
			]
		,
			++FE`dropLength
		];
	];
	
	Map[
		(
			FE`testFile = StringJoin[
				StringDrop[
					StringReplace[
						#,
						FE`doubleSeparator -> $PathnameSeparator
					],
					FE`dropLength
				],
				If[FileType[#] === Directory, $PathnameSeparator, ""]
			];
			If[($PathnameSeparator === ":"),
				FE`testPos = StringPosition[FE`testFile, $PathnameSeparator];
				If[(Length[FE`testPos] === 1) && (First[First[FE`testPos]] === 1),
					FE`testFile = StringDrop[FE`testFile, 1]
				]
			];
			FE`testFile
		)&, 
		FileNames[FE`lastElement, StringJoin[FE`dropPath, FE`includePath]]
	]
);
Protect[FE`FlCGD];

FE`FlC[FE`pat_] := 
	Block[{FE`patWild, FE`dirCharPos, FE`sepPos, FE`dropLength,
			FE`fullPath, FE`lastElement,
			FE`doubleSeparator, FE`cdirWasOff, FE`testFile, FE`testPos},
	
	FE`patWild = StringJoin[FE`pat, "*"];
	FE`dirCharPos = StringPosition[FE`patWild, $PathnameSeparator];
	FE`doubleSeparator = StringJoin[$PathnameSeparator, $PathnameSeparator];
	FE`cdirWasOff = (Head[FileNames::cdir] === $Off);
	Off[FileNames::cdir];
	
	WriteString["stdout", ToString[InputForm[Union[Flatten[
	If [Length[FE`dirCharPos] == 0,
		Map[FE`FlCGD[FE`patWild, #, ""]&, $Path]
	,
		FE`sepPos = First[Last[FE`dirCharPos]];
		FE`fullPath = StringTake[FE`patWild, FE`sepPos];
		FE`lastElement = StringDrop[FE`patWild, FE`sepPos];
		
		If[$PathnameSeparator === ":",
			If[First[First[FE`dirCharPos]] == 1,
				Map[FE`FlCGD[FE`lastElement, #, FE`fullPath]&, 
					$Path /. $PathnameSeparator -> ""
				]
			,
				FE`FlCGD[FE`lastElement, "", FE`fullPath]
			]
		,
			If[First[First[FE`dirCharPos]] == 1,
				FE`FlCGD[FE`lastElement, "", FE`fullPath]
			,
				Map[FE`FlCGD[FE`lastElement, #, 
					StringJoin[$PathnameSeparator, FE`fullPath]]&, 
					$Path
				]
			]
		]
	]]]], PageWidth -> Infinity]];
	
	If[ !FE`cdirWasOff, On[FileNames::cdir]];
];
Protect[FE`FlC];

(* start template extraction routines -- set up transformation rules
   handling special case templates *)

alphabetrules = Map[FromCharacterCode[#] ->0 &,Range
        [65,65+25]~Join~Range[97,97+25]];

allrules = Dispatch[Join[alphabetrules,
			{" "-> Null, "\t" -> Null, "\n" -> Null, "\r" -> Null,
                       _String?(35839 >= First[ToCharacterCode[#]] >= 12228 &) -> 1}]];

(* use of utilfun is a kludge around a bug in previous versions of
   FEKernelInit.tr. When incompatable FEKernelInit packages are loaded,
   the FE removes all symbols in FE`; old versions do a blind remove
   which can cause an error message if temporary symbols are involved.
   Use of utilfun is to prevent anomalous creation of temporary pattern
   symbol. *)
utilfun[{c___,"="|".",".",(Null | 1),___}] := {c,".","."}
utilfun[any_] := any

tr = {{a:("_"|"#")..,(Null | 1 | "(" | "\:ff08"),___}:>{a},
      {a___, Null..., 1, ___} :> {a},
      {a___,"-","-",(Null | 1),___} :> {a,"-","-"},
      {a___, "+","+",(Null | 1),___} :> {a,"+","+"},
      {a__, b:("!"..), (Null | 1), ___} :> {a,b},
      {_,"'",___} :> {" "," "},
      {a___,"<",">",Null,".",".",".",___} :>{a," "," "," "," "," "," "},
      {a___, b:(0)..,(Null | 1)..,(0)..,___} :> utilfun[{a,b}]};

(* extract a special case template (one in operator form, like the one
   for Plus) *)
GetSpecialTemplate[usage_String] :=
	StringTake[usage,Length[Replace[(Characters[usage]/.allrules),tr]]]

(* pre-processing -- some usage messages may contain information which 
	gets stripped when converting to plain text so preserves original form. *)
getTemplateFromUsage[msg_String /; $eTemplate =!= True, name_String] := 
 Block[{$eTemplate = True, template}, 
  template = makePlainText[ToBoxes[msg]];
  template = getTemplateFromUsage[template, name];
  If[ StringQ[FE`template] && StringMatchQ[template, StringJoin[name, "*"]], 
	ToBoxes[template],
	getTemplateFromUsage[msg, name] ]
 ]

(* extract a regular template; calls the special case if none of the
   other possibilities can be handled. *)
FE`getTemplateFromUsage[msg_String, name_String] :=
  If[MatchQ[#, {(0).., Null, ___}],
        If[StringMatchQ[StringTake[msg,
                First[First[Position[#, Null]]]-1
               ], name | StringExpression[WordCharacter..]],
           name,
           GetSpecialTemplate[msg]
        ],
        If[# === {},
            $Failed,
            StringTake[msg, #[[1,1]]]
        ]&[Position[Partition[
                FoldList[Plus, 0, #/.Null -> 0],
             2, 1], {1,0}], #]
    ]&[Characters[msg <> " "]/.
         {"[" -> 1, "{" -> 1, "(" -> 1, "\(" -> 1, "\)" -> -1, ")" -> -1,
          "}" -> -1, "]" -> -1, " " -> Null, 
          "\t" -> Null, "\n" -> Null, "\r" -> Null,
           _String?(35839 >= First[ToCharacterCode[#]] >= 12228 &) -> Null,
           _String -> 0}
  ]

(* fallback -- just return the name of the function *)
FE`getTemplateFromUsage[_, name_String] := name

FE`splitUsage[usage_String] := 
With[{marker = "<USAGESPLITMARKER>"},
	Select[StringSplit[StringReplace[
			(* This would be simpler if Except[{"\*\n", ",\n"}, "\n"] worked in StringSplit *)
			StringReplace[usage, {"\n" -> marker}],
			{("/*"<>marker) -> "\*\n", (","<>marker) -> ",\n"}], marker],
		!StringMatchQ[#, WhitespaceCharacter...]&] ]

FE`splitUsage[usage_List, template_List, name_] :=
	FE`splitUsage[{First[usage]}, Rest[usage], Rest[template], name]

FE`splitUsage[{new___, a_}, {usage_, b___}, {template_, c___}, name_] :=
	FE`splitUsage[
		If[template =!= name, {new, a, usage}, {new, a <> "\n" <> usage}], {b}, {c}, name]
		
FE`splitUsage[new_, {}, {}, name_] := new;

$nonArg = ":>" | "->" | "=" | "==" | "::" | "\[Rule]" | "\[RuleDelayed]" | "\[LeftAssociation]" | "\[RightAssociation]";
nonargQ[s_] := StringMatchQ[s, RegularExpression["[[:punct:]]|\\s"] | $nonArg]
systemQ[s_] := StringMatchQ[Quiet[Check[Context[s], ""]], "System`"]
lowcaseQ[s_] := StringMatchQ[s, RegularExpression["[\[Alpha]\[Beta]\[Gamma]\[Delta]\[Epsilon]\
\[CurlyEpsilon]\[Zeta]\[Eta]\[Theta]\[CurlyTheta]\[Iota]\[Kappa]\
\[CurlyKappa]\[Lambda]\[Mu]\[Nu]\[Xi]\[Omicron]\[Pi]\[CurlyPi]\[Rho]\
\[CurlyRho]\[Sigma]\[FinalSigma]\[Tau]\[Upsilon]\[Phi]\[CurlyPhi]\
\[Chi]\[Psi]\[Omega]]+"] | RegularExpression["[[:lower:]]([[:alnum:]]*)"] | "\[Ellipsis]" | "\"*\""]
argumentQ[s_] := lowcaseQ[s] || Not[nonargQ[s] || systemQ[s]]


(* special case needed for CodeAssist FunctionTemplates. CodeAssist wraps the box structure in a BoxData Cell.
   The boxes are extracted from BoxData before the TagBoxes are applied.
*)
insertTagBox[clXpr:Cell[BoxData[boxes_],___], name_String] := Block[{boxestagged=insertTagBox[boxes, name]},
  {clXpr /. boxes -> First@boxestagged, Last@boxestagged}
]


(* if template does not begin with function name, assume that it is in operator form *)
insertTagBox[boxes_, name_String] := 
 insertTagBox[boxes, name, 
  If[MatchQ[boxes, _[{name, __}]], argumentQ, lowcaseQ]] /.
	{ ":>" /; !StringMatchQ[name, "RuleDelayed"] -> "\[RuleDelayed]", 
	  "->" /; !StringMatchQ[name, "Rule"] -> "\[Rule]" }

(* tag all strings which match the pattern regex *)
insertTagBox[boxes_, name_String, regex_] := 
 Block[{pos = After},
     {boxes //. {Except[TagBox, h_][x___, 
        Except[name, s_String], y___] :> 
       h[x, TagBox@s, y] /; regex[s]} //. {h_[s : {TagBox[_] ..}] :> 
      h /@ Thread[s, TagBox], 
     s : (SubscriptBox | SuperscriptBox)[TagBox[_], _] :> 
      TagBox[s /. TagBox[h_] :> h] /; 
        !StringMatchQ[name, "Subscript"], 
     TagBox[s_] :> (pos = Placeholder;
       TagBox[FrameBox@s, "Placeholder"])}, pos}]

reparseBoxStructure[boxes_, name_] := 
 MathLink`CallFrontEnd[FrontEnd`ReparseBoxStructurePacket[boxes]] /. 
  {RowBox[{x_, "^", y_}] /; !StringMatchQ[name, "Power"] :> 
	SuperscriptBox[x, y],
   s : _[{"Subscript", __}] /; !StringMatchQ[name, "Subscript"] :> 
    MakeBoxes @@ MakeExpression@s, 
   s_String /; StringMatchQ[s, "\"Subscript[*]\""] :> 
    MakeBoxes @@ MakeExpression@Evaluate[StringTake[s, {2, -2}]]}

makePlainText[usage_] :=
 Block[{template = usage},
  template = Cell[BoxData[template], ShowStringCharacters -> False];
  template = MathLink`CallFrontEnd[FrontEnd`ExportPacket[template, "PlainText"]];
  If[template === $Failed, usage, First@template]]

FE`FT[name_String /; $Notebooks] := FE`FT[Names@name]

FE`FT[{} /; UnsameQ[$eval, False]] := 
 Block[{$eval = False}, 
  FrontEndExecute[{
  	FrontEndToken[FrontEnd`InputNotebook[], "CompleteSelection"], 
    FrontEndToken[FrontEnd`InputNotebook[], "TemplateSelection"]
  }]
 ]

FE`FT[{name_}] := 
 Block[{template}, 
  If[! StringQ@ToExpression[name <> "::usage"], $NewMessage[ToExpression@name, "usage"]];
  template = FE`getTemplateFromUsage[ToExpression[name <> "::usage"], name];
  template = reparseBoxStructure[makePlainText@template, name];
  If[template === name,
   MathLink`CallFrontEnd@FrontEnd`SelectionMove[FrontEnd`SelectedNotebook[], After, Word]; Return[]];
  template = Sequence @@ insertTagBox[template, name];
  MathLink`CallFrontEnd@FrontEnd`NotebookWrite[FrontEnd`SelectedNotebook[], template]]

FE`FT[sn_, name_] := 
 Block[{usage, template}, 
  usage = ToExpression[name <> "::usage"];
  If[! StringQ[usage], Return[]];
  template = FE`splitUsage[usage];
  template = FE`getTemplateFromUsage[#, name] & /@ template;
  template = If[template === $Failed, Return[], makePlainText[#]& /@ template];
  template = If[template === $Failed, Return[], reparseBoxStructure[#, name]& /@ template];
  template = GridBox /@ List /@ List /@ template;
  MathLink`CallFrontEnd@FrontEnd`TemplateTooltipPacket[FrontEnd`InputNotebook[], sn, name, template]
]

FE`FT[name_String, index_] := 
 Block[{usage, template}, 
  usage = ToExpression[name <> "::usage"];
  If[! StringQ[usage], Return[]];
  template = FE`splitUsage[usage];
  template = FE`getTemplateFromUsage[#, name] & /@ template;
  template = If[template === $Failed, Return[], makePlainText[#]& /@ template];
  template = If[template === $Failed, Return[], reparseBoxStructure[#, name]& /@ template];
  MathLink`CallFrontEnd@FrontEnd`NotebookWrite[FrontEnd`SelectedNotebook[], Sequence @@ insertTagBox[template[[index]], name]]
]


Protect[FE`FT];

FE`FTU[sn_, name_] := 
 Block[{usage, usageStrings, template}, 
  usage = ToExpression[name <> "::usage"];
  If[! StringQ[usage], Return[]];
  If[usage == "", usage = "No usage message present"];
  usageStrings = FE`splitUsage[usage];
  template = FE`getTemplateFromUsage[#, name] & /@ usageStrings;
  
  (* combine clauses of the usage message that have no custom template *)
  usageStrings = FE`splitUsage[usageStrings, template, FE`getTemplateFromUsage[name, name]];
  template = FE`getTemplateFromUsage[#, name] & /@ usageStrings;
  
  template = If[template === $Failed, Return[], makePlainText[#]& /@ template];
  template = If[template === $Failed, Return[], reparseBoxStructure[#, name]& /@ template];
  template = GridBox /@ List /@ List /@ template;
  MathLink`CallFrontEnd@FrontEnd`TemplateTooltipPacket[FrontEnd`InputNotebook[], sn, name, template, usageStrings]
]

Protect[FE`FTU];

If[$VersionNumber >= 10,
  FE`symbolQ[str_String] := Internal`SymbolNameQ[str, True],
  FE`symbolQ[str_String] := 
    Module[{namepat = (LetterCharacter | "$") ~~ {(LetterCharacter | "$" | DigitCharacter) ...}},
      StringMatchQ[str, namepat ~~ (("`" ~~ namepat)...)] ]
];

Protect[FE`symbolQ];

FE`GetTemplateAndUsage[name_String] := 
 Block[{usage, usages, templates, strippedName}, 
  strippedName = Last[StringSplit[name, "`"]];
  If[!FE`symbolQ[name], Return[]];
  usage = ToExpression[name <> "::usage"];
  If[! StringQ[usage], Return[]];
  If[usage == "", usage = "No usage message present when building template."];
  usages = FE`splitUsage[usage];
  templates = FE`getTemplateFromUsage[#, name] & /@ usages;
  
  (* combine clauses of the usage message that have no custom template *)
  usages = FE`splitUsage[usages, templates, FE`getTemplateFromUsage[name, name]];
  templates = FE`getTemplateFromUsage[#, strippedName] & /@ usages;
  templates = If[!FreeQ[templates , $Failed], Return[], makePlainText[#]& /@ templates];
  templates = If[!FreeQ[templates , $Failed], Return[], reparseBoxStructure[#, name]& /@ templates];
  templates = Map[Cell[#, "InlineFormula", Rule[CellTags, name <>"_templates"]]&, BoxData /@ GridBox /@ List /@ List /@ templates];
  usages = Map[Cell[#, "Output", Rule[CellTags, name <>"_usages"]]&, BoxData /@ RowBox /@ List /@ usages];

  List[templates, usages]
]

Protect[FE`GetTemplateAndUsage];

FE`CacheTemplateAndUsage[name_String] := 
 Block[{templateAndUsage = FE`GetTemplateAndUsage[name]}, 
  MathLink`CallFrontEnd@FrontEnd`CacheTemplateAndUsagePacket[FrontEnd`InputNotebook[], name, templateAndUsage]
]

Protect[FE`CacheTemplateAndUsage];

FE`CacheHelpPageExistence[name_String] := 
 Block[{foundPage = (Documentation`ResolveLink["paclet:ref/"<>name] =!= Null)}, 
  MathLink`CallFrontEnd@FrontEnd`CacheHelpPageExistencePacket[FrontEnd`InputNotebook[], name, foundPage]
]

Protect[FE`CacheHelpPageExistence];

FE`FTCache[sn_, name_] := 
 Block[{usage, usageStrings, template}, 
  usage = ToExpression[name <> "::usage"];
  If[! StringQ[usage], Return[]];
  If[usage == "", usage = "No usage message present"];
  usageStrings = FE`splitUsage[usage];
  template = FE`getTemplateFromUsage[#, name] & /@ usageStrings;
  
  (* combine clauses of the usage message that have no custom template *)
  usageStrings = FE`splitUsage[usageStrings, template, FE`getTemplateFromUsage[name, name]];
  template = FE`getTemplateFromUsage[#, name] & /@ usageStrings;
  
  template = If[template === $Failed, Return[], makePlainText[#]& /@ template];
  template = If[template === $Failed, Return[], reparseBoxStructure[#, name]& /@ template];
  template = GridBox /@ List /@ List /@ template;
  MathLink`CallFrontEnd@FrontEnd`TemplateCachePacket[FrontEnd`InputNotebook[], sn, name, template, usageStrings]
]

Protect[FE`FTCache];

FE`PasteFunctionTemplate[template_, name_String] := 
  MathLink`CallFrontEnd@FrontEnd`NotebookWrite[FrontEnd`SelectedNotebook[], Sequence @@ insertTagBox[template //. {StyleBox[x_,y_]:>x, GridBox[{{x_}}]:>x}, name]]

Protect[FE`PasteFunctionTemplate];

FE`CopyExprAs[boxes_, type_] := MathLink`CallFrontEnd[FrontEnd`CopyToClipboard[Cell[BoxData[#], "Output"]]]& @
	Switch[type,
		"Boxes", boxes,
		"InputForm", Replace[MakeExpression @ boxes, {HoldComplete[e_] :> ToString[e, InputForm], _ :> boxes}],
		_, Replace[MakeExpression @ boxes, {HoldComplete[e_] :> ToBoxes[Symbol["System`" <> type] @ e], _ :> boxes}]
	]

Protect[FE`CopyExprAs];

Attributes[FE`SC] = {HoldAll};
FE`SC[FE`expr_] := (Print[FE`expr];)

If[TrueQ[$VersionNumber < 2.0],
	FE`WW[FE`w_] := ResetMedium[PageWidth -> FE`w]
,
	FE`WW[FE`w_] := SetOptions["stdout", PageWidth -> FE`w]
];

Which[
	$VersionNumber >= 6.0, $FormatType = TraditionalForm,
	$VersionNumber >= 3.0, $FormatType = StandardForm];
FE`SetResultForm[FE`form_] :=
		SetOptions["stdout", FormatType -> FE`form];

FE`SetLanguage[FE`language_] :=
		$Language = FE`language;

FE`SetBoxForms[FE`form_] :=
	$BoxForms = Union[$BoxForms, FE`form];


FE`makeSymbol[FE`s_]:= If[Length[Names[FE`s]] === 0,
  	ToExpression[StringJoin["System`", FE`s]]];

FE`makeRPC[FE`s_String] :=
    FE`makeRPCutil @@ ToHeldExpression[StringJoin["FrontEnd`", FE`s]]

Attributes[FE`makeRPCutil] = {HoldAll};

FE`makeRPCutil[FE`sym_] :=
    Set[FE`sym,
    	MathLink`CallFrontEndHeld[ FrontEnd`Value[FE`sym]]]

FE`DefineFrontEndSymbols[FE`list_] := Map[FE`makeSymbol, FE`list];
FE`DefineFrontEndGlobals[FE`list_] := Map[FE`makeRPC, FE`list];

FE`$FrontEndPackageVersion = 10.40;

End[]; (* FE` *)

End[]; (* System` *)

System`$ContextPath = System`Private`oldContextPath;


If[$VersionNumber < 3.0,
	MakeExpression[___] := $Failed;
	BoxForm`ConvertForm[___] := $Failed;
];


If[ !FE`spellOff, On[General::spell]];
If[ !FE`spell111Off, On[General::spell1]];


(
	FE`saveAttributes = Attributes[In];
	Off[Unset::norep];
	Unprotect[In];
	In[FESafe`saved$Line] =.; In[Infinity] =.;
	Attributes[In] = FE`saveAttributes; 
	FE`saveAttributes = Attributes[Out];
	Unprotect[Out];
	Out[Infinity] =.;
	Attributes[Out] = FE`saveAttributes; 
	FE`saveAttributes = Attributes[InString];
	Unprotect[InString];
	InString[FESafe`saved$Line] =.; InString[Infinity] =.;
	Attributes[InString] = FE`saveAttributes; 
	On[Unset::norep];
	$Line = FESafe`saved$Line;
);


{ "$FormatType", Continuation, DialogIndent, Cell, "FE`"}
